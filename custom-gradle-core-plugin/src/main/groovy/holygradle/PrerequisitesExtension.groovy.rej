--- PrerequisitesExtension.groovy
+++ PrerequisitesExtension.groovy
@@ -1,1 +1,1 @@
-package holygradleimport org.gradle.*import org.gradle.api.*class PrerequisitesExtension {    private Project project        PrerequisitesExtension(Project project) {        this.project = project    }        public void java(String minVersion) {        def javaVersion = System.getProperty("java.version")        def javaVerComponents = javaVersion.split("\\.")        def minVerComponents = minVersion.split("\\.")        minVerComponents.eachWithIndex { item, index ->            int minVerInt = (int)item            int curVerInt = (int)javaVerComponents[index]            if (minVerInt > curVerInt) {                throw new RuntimeException(                    "Java version prerequisite not met. The Gradle plugins require at least version '${minVersion}', but found '${javaVersion}'. " +                    "Please ensure that you have installed at least version '${minVersion}' of the Java run-time. (You can go to " +                    "www.java.com/getjava/ where it might be referred to as Version ${minVerComponents[1]} Update X. Or use a Java SDK of your choice). " +                    "After the appropriate version of the Java runtime has been installed please set the JAVA_HOME environment variable to the location " +                    "of your new installation of Java (for example C:\\Program Files\\Java\\jdk1.7.0_07). Afterwards, please start a new command prompt " +                    "and re-run the same command."                )            }        }    }}
\ No newline at end of file
+package holygradleimport org.gradle.*import org.gradle.api.*class PrerequisitesExtension {    private final Project project    private final def checkers = [:]    private final def statedPrerequisites = []        public static void DefineExtension(Project project) {        project.extensions.create("prerequisites", PrerequisitesExtension, project)        project.prerequisites.register("Java", { checker, minVersion -> PrerequisitesExtension.checkJava(checker, minVersion) })                project.prerequisites.register("Windows", { checker, versions ->             def os = System.getProperty("os.name")            if (!versions.contains(os)) {                checker.fail "The operating system is '${os}' which is not supported. The supported operating systems are: ${versions}"            }        })                project.prerequisites.register("EnvironmentVariable", { checker, envVar ->             if (System.getenv(environmentVariable) == null) {                checker.fail "The environment variable '${environmentVariable}' has not been set."            }        })                project.prerequisites.register("EnvironmentVariableContainsDirectory", { checker, envVar ->             def env = System.getenv(environmentVariable)            if (env == null) {                checker.fail "The environment variable '${environmentVariable}' has not been set."            } else {                def dir = new File(env)                if (dir.exists()) {                    if (!dir.isDirectory()) {                        checker.fail "The environment variable '${environmentVariable}' is set, contains '{env}' but that is not a directory."                    }                } else {                    checker.fail "The environment variable '${environmentVariable}' is set, contains '{env}' but that path does not exist."                }            }        })    }        public PrerequisitesExtension(Project project) {        this.project = project    }        public void register(String prerequisite, Closure checkerClosure) {        checkers[prerequisite] = new PrerequisitesChecker(project, prerequisite, checkerClosure)    }        public StatedPrerequisite specify(String prerequisiteName, Closure checkerClosure) {        def checker = new PrerequisitesChecker(project, prerequisiteName, checkerClosure)        def prerequisite = new StatedPrerequisite(checker, null)        statedPrerequisites.add(prerequisite)        return prerequisite    }        public StatedPrerequisite specify(String prerequisiteName, def params = null) {        if (checkers.containsKey(prerequisiteName)) {            def checker = checkers[prerequisiteName]            def prerequisite = new StatedPrerequisite(checker, params)            statedPrerequisites.add(prerequisite)            return prerequisite        } else {            throw new RuntimeException("Unknown prerequisite '${prerequisiteName}'.")        }    }        public void check(String prerequisite) {        def prerequisites = statedPrerequisites.findAll { it.name == prerequisite }        if (prerequisites.size() == 0) {            throw new RuntimeException("Unknown prerequisite '${prerequisite}'.")        } else {            prerequisites.each { it.check() }        }    }        public boolean checkAll() {        int fails = 0        for (prerequisite in statedPrerequisites) {            if (!prerequisite.checkWithoutFailure()) {                fails++            }        }        if (fails == 0) {            println "All prerequisites satisfied."        } else {            throw new RuntimeException("Some prerequisites were not met.")        }    }        public StatedPrerequisite specifyJava(String minVersion) {        specify("Java", minVersion)    }        public StatedPrerequisite specifyWindows(String... versions) {        specify("Windows", versions.collect { it })    }        public StatedPrerequisite specifyEnvironmentVariable(String environmentVariable) {        specify("EnvironmentVariable", environmentVariable)    }        public StatedPrerequisite specifyEnvironmentVariableContainsDirectory(String environmentVariable) {        specify("EnvironmentVariableContainsDirectory", environmentVariable)    }        public String readLocalMachineRegistry(String key, String valueName) {        WindowsRegistry.readString(WindowsRegistry.HKEY_LOCAL_MACHINE, key, valueName)    }        public static void checkJava(PrerequisitesChecker checker, def minVersion) {        def javaVersion = System.getProperty("java.version")        def javaVerComponents = javaVersion.split("\\.")        def minVerComponents = minVersion.split("\\.")        minVerComponents.eachWithIndex { item, index ->            int minVerInt = (int)item            int curVerInt = (int)javaVerComponents[index]            if (minVerInt > curVerInt) {                checker.fail "Java version prerequisite not met. Minimum version required is '${minVersion}', but found '${javaVersion}'. Please ensure that you have installed at least version '${minVersion}' of the Java run-time. (You can go to www.java.com/getjava/ where it might be referred to as Version ${minVerComponents[1]} Update X. Or use a Java SDK of your choice). After the appropriate version of the Java runtime has been installed please set the JAVA_HOME environment variable to the location of your new installation of Java (for example C:\\Program Files\\Java\\jdk1.7.0_07). Afterwards, please start a new command prompt and re-run the same command."            }        }    }}
\ No newline at end of file
