package holygradleimport org.gradle.*import org.gradle.api.*class PrerequisitesChecker {    public final String name    private final Project project    private final Closure checkClosure    private boolean ok = true    private boolean allowFailure = true        PrerequisitesChecker(Project project, String name, Closure checkClosure) {        this.project = project        this.name = name        this.checkClosure = checkClosure    }        public boolean run() {        // The 'ok' variable is not really stateful. It's purpose is to determine the return value for this method.        ok = true         checkClosure(this)        ok    }        public boolean run(def params) {        // The 'ok' variable is not really stateful. It's purpose is to determine the return value for this method.        ok = true         checkClosure(this, params)        ok    }        public boolean runWithoutFailure() {        // The value of the 'allowFailure' variable is only properly defined during the invocation of the checkClosure.        allowFailure = false        def result = run()        allowFailure = true        result    }        public boolean runWithoutFailure(def params) {        // The value of the 'allowFailure' variable is only properly defined during the invocation of the checkClosure.        allowFailure = false        def result = run(params)        allowFailure = true        result    }        public String readRegistry(String location, String key) {        def regOutput = new ByteArrayOutputStream()        def execResult = project.exec {            commandLine "cmd", "/c", "reg", "query", "\"${location}\"", "/v", key            setStandardOutput regOutput            setErrorOutput new ByteArrayOutputStream()            setIgnoreExitValue true        }        if (execResult.getExitValue() == 0) {            String line = regOutput.toString().readLines()[2]            return line.split()[-1]        }        return null    }        public String readEnvironment(String variable) {        System.getenv(variable)    }        public String readProperty(String property) {        System.getProperty(property)    }        public String readFile(String path) {        def f = new File(path)        if (f.exists() && f.isFile()) {            return f.text        } else {            return null        }    }        public void fail(String text) {        wrapMessage(text)        ok = false        if (allowFailure) {            throw new RuntimeException("Check '${name}' failed.")        }    }        public void wrapMessage(String text, int columns = 80) {        println "-"*columns        text.eachLine { lnText ->            def line = ""            lnText.split(" ").each { word ->                if (word.length() > columns) {                    def part = word.substring(0, columns - line.length())                    line += part                    word = word.substring(part.length())                }                if (line.length() + word.length() > columns) {                    println line.trim()                    line = ""                }                while (word.length() > columns) {                    println word.substring(0, columns)                    word = word.substring(columns)                }                line += word + " "                   }            println line.trim()        }        println "-"*columns    }}