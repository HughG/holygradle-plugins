package holygradleimport org.gradle.*import org.gradle.api.*class PrerequisitesExtension {    private final Project project    private final def checkers = [:]    private final def statedPrerequisites = []        public static void DefineExtension(Project project) {        project.extensions.create("prerequisites", PrerequisitesExtension, project)                project.prerequisites.register("Java", { checker, params ->             def minVersion = params[0]            def javaVersion = checker.readProperty("java.version")            def javaVerComponents = javaVersion.split("\\.")            def minVerComponents = minVersion.split("\\.")            minVerComponents.eachWithIndex { item, index ->                int minVerInt = (int)item                int curVerInt = (int)javaVerComponents[index]                if (minVerInt > curVerInt) {                    checker.fail "Java version prerequisite not met. Minimum version required is '${minVersion}', but found '${javaVersion}'. Please ensure that you have installed at least version '${minVersion}' of the Java run-time. (You can go to www.java.com/getjava/ where it might be referred to as Version ${minVerComponents[1]} Update X. Or use a Java SDK of your choice). After the appropriate version of the Java runtime has been installed please set the JAVA_HOME environment variable to the location of your new installation of Java (for example C:\\Program Files\\Java\\jdk1.7.0_07). Afterwards, please start a new command prompt and re-run the same command."                }            }        })                project.prerequisites.register("Windows", { checker, versions ->             def os = checker.readProperty("os.name")            if (!versions.contains(os)) {                checker.fail "The operating system is '${os}' which is not supported. The supported operating systems are: ${versions}"            }        })                project.prerequisites.register("EnvironmentVariable", { checker, params ->             def envVar = params[0]            if (checker.readEnvironment(envVar) == null) {                checker.fail "The environment variable '${envVar}' has not been set."            }        })                project.prerequisites.register("EnvironmentVariableContainsDirectory", { checker, params ->            def envVar = params[0]            def env = checker.readEnvironment(envVar)            if (env == null) {                checker.fail "The environment variable '${envVar}' has not been set."            } else {                def dir = new File(env)                if (dir.exists()) {                    if (!dir.isDirectory()) {                        checker.fail "The environment variable '${envVar}' is set, contains '{env}' but that is not a directory."                    }                } else {                    checker.fail "The environment variable '${envVar}' is set, contains '{env}' but that path does not exist."                }            }        })    }        public PrerequisitesExtension(Project project) {        this.project = project    }        // Register a new type of prerequisite checker. The checker closure will be supplied parameters.    public void register(String prerequisite, Closure checkerClosure) {        checkers[prerequisite] = new PrerequisitesChecker(project, prerequisite, checkerClosure)    }        private void addStatedPrerequisite(StatedPrerequisite prerequisite) {        boolean add = true        statedPrerequisites.each {             if (it.name == prerequisite.name && it.params == prerequisite.params) {                add = false            }        }        if (add) statedPrerequisites.add(prerequisite)    }        // Specify the details for a previously registered type of prerequisite. Calling this method does not     // immediately perform the prerequisite check, but simply specifies that the prerequisite exists and defines    // the parameters. Later on check() can be called on PrerequisitesExtension or on the StatedPrerequisite     // returned by this method. Another way the prequisite can be checked is by calling checkAll, which is     // called by the checkPrerequisites task.    public StatedPrerequisite specify(String prerequisiteName, String... params) {        if (checkers.containsKey(prerequisiteName)) {            def checker = checkers[prerequisiteName]            def paramList = []            params.each { paramList.add(it) }            def prerequisite = new StatedPrerequisite(checker, paramList)            addStatedPrerequisite(prerequisite)            return prerequisite        } else {            throw new RuntimeException("Unknown prerequisite '${prerequisiteName}'.")        }    }        // Specifies a new type of prerequisite by supplying     public StatedPrerequisite specify(String prerequisiteName, Closure checkerClosure) {        if (statedPrerequisites.contains(prerequisiteName)) {            throw new RuntimeException("The prerequisite '${prerequisiteName}' has already been specified.")        }        def prerequisite = new StatedPrerequisite(new PrerequisitesChecker(project, prerequisiteName, checkerClosure))        addStatedPrerequisite(prerequisite)        return prerequisite    }        // Runs the check for previously specified prerequisites of the given type. For any given type of    // prerequisite there may be multiple StatedPrerequisite instances.    public void check(String prerequisite) {        def prerequisites = statedPrerequisites.findAll { it.name == prerequisite }        if (prerequisites.size() == 0) {            throw new RuntimeException("Unknown prerequisite '${prerequisite}'.")        } else {            prerequisites.each { it.check() }        }    }        // Check all stated prerequisites, printing out failure messages and counting failures. An exception will    // be thrown at the end if there were any failures.    public boolean checkAll() {        int fails = 0        for (prerequisite in statedPrerequisites) {            if (!prerequisite.checkWithoutFailure()) {                fails++            }        }        if (fails == 0) {            println "All prerequisites satisfied."        } else {            throw new RuntimeException("Some prerequisites were not met.")        }    }}