:docinfo1:
:linkcss:
:stylesdir: asciidoc
:scriptsdir: asciidoc
:stylesheet: master.css
:toc2:
:toclevels: 3
:numbered:

= Overview

include::sitemap.ascinc[]

gloss:artifactory[] is a shared, structured store for software modules and gloss:gradle[] is a
tool which helps you package software gloss:module[]s and transfer them to and from such a store. 
(gloss:gradle[] also has many other features which are not detailed in this guide.)

The gloss:holygradle[] is a set of plugins for gloss:gradle[] which extend it for 

* developing modules which contain a large number of files when built (such as C++ libraries or
web applications);
* working with multiple source code repositories; and
* working under Windows.

This section gives a short introduction to the main concepts and features.

TODO: Link to pages with more detail.

== gloss:gradle[] Module Concepts

In gloss:gradle[] terms, a published gloss:module[] is a collection of files (which gloss:gradle[]
calls gloss:artifact[]s), plus metadata which identifies the module and describes how it depends
on other modules.  Modules may be published by many groups in different organisations, so a
module identifier has three parts: _group_ (also called _organisation_), _name_, and _version_.
As an easy way to avoid conflicts, the group string often includes the reverse domain name of the
organisation, in the Java style; for example, +com.mycorp.teamA+.

Modules are stored in gloss:repositories[], which are usually on a shared server but can also be
on the local file system.  When a developer uses gloss:gradle[] to download a module, the
dependencies for that module are automatically also downloaded.  gloss:gradle[] will check that
all versions are consistent, even if the same dependency is requested by several different
libraries.

A module may contain several artifacts for different aspects of the same software component, if
they are needed in different contexts.  For example, one part may be for normal runtime use and
another for debugging; or it might be a communication library with separate client and server
parts.  In a gloss:gradle[] module these parts are called gloss:configuration[]s.  One
configuration in a module can extend (include) other configurations to share artifacts.  For
example, the client and server parts of a communication library may need to share some definitions.

Each part may need different sets of other modules; therefore, each configuration has its own
collection of dependencies.  When we say "the dependencies of a module" we really mean "the
dependencies of the configurations of a module".

The relationships between these concepts can be viewed as follows.

.gloss:gradle[] module concept relationships
[caption="Figure {counter:figureindex}: "]
[graphviz,overview_module_concepts.svg,dot,svg]
--
digraph {
    node [shape=box]
    edge [labeldistance=1.5]

    M [label="module"]
    I [label="ID"]
    C [label="configuration"]
    A [label="artifact", shape=note]
    M -> I [label="has", taillabel="1", headlabel="1", minlen=0]
    M -> C [label="has", taillabel="1", headlabel="*"]
    C -> C [label="extends", taillabel="1", headlabel="*", tailport=sw, headport=nw]
    C -> A [label="has", taillabel="1", headlabel="*"]
    C -> M [label="depends on", taillabel="*", headlabel="*", tailport=ne, headport=se]
}
--

== gloss:gradle[] and the gloss:holygradle[]

The gloss:holygradle[] provides a way to publish and use pre-built and pre-packaged software
gloss:module[]s produced with tools like C++, HTML, and JavaScript.  These tools do not provide
their own module packaging system and their output form can have a large number of files.  (In
contrast, Java and .NET have their own packaging systems, and only a small number of output files
per module).  A packaged gloss:module[] may be a library, web component, build tool, end-user
application, test data set, or any other collection of files which are useful for developing software components.

=== Basic Modular Development Process

The basic approach for developing with gloss:gradle[] is as follows.

* Write a +build.gradle+ file for your module (call it A) which lists
** the configurations of A;
** the modules needed by each configuration (its _dependencies_), each with its own version (for example, B:1.0 and C:1.5);
** the locations for downloading those dependencies;
** the artifacts to publish for each configuration of A;
** the location to publish A.
* Run gloss:gradle[] to download the dependencies.
* Build and test A.
* Run gloss:gradle[] to publish A.

The downloading and publishing of modules in the above example could look like this, where an arrow
means "file transfer".  The group parts of the module IDs are omitted for simplicity.

.Basic view of using gloss:gradle[]
[caption="Figure {counter:figureindex}: "]
[graphviz,overview_basic_gradle_use.svg,dot,svg]
----
digraph {
    subgraph servers {
        servers_source[shape=point,margin="0.0",style=invis]
        servers_sink[shape=point,margin="0.0",style=invis]
        servers_source -> {

            subgraph cluster_server1 {
                label=server_1
                s1_repo1 [label="repo1"]
            }
            subgraph cluster_server2 {
                label=server_2
                s2_repo2a [label="repo2a"]
                s2_repo2b [label="repo2b"]
            }

        } -> servers_sink [style=invis,minlen=0]
    }
    subgraph clients {
        clients_source[shape=point,margin="0.0",style=invis]
        clients_sink[shape=point,margin="0.0",style=invis]
        clients_source -> {

            subgraph cluster_pc1 {
                label=team_A_dev_pc
                workspace_A [label="workspace\nfor A", shape=folder]
            }
            subgraph cluster_pc2 {
                label=team_C_dev_pc
                workspace_C [label="workspace\nfor C", shape=folder]
            }

        } -> clients_sink [style=invis,minlen=0]
    }
    servers_sink -> clients_source [style=invis]

    s1_repo1 -> workspace_A [label="B:1.0"]
    s2_repo2a -> workspace_A [label="C:1.5"]
    s2_repo2a -> workspace_C [label="C:1.5", dir=back]
    s2_repo2b -> workspace_A [label="A:2.1", dir=back]
}
----

The transferred files also include a metadata file describing the module.  For the
gloss:holygradle[] this is an gloss:ivy-xml[] file.

Ignoring the detail of configurations, the relationships between these modules is as follows,
where an arrow means "depends on".  

.Basic view of module dependencies
[caption="Figure {counter:figureindex}: "]
[graphviz,overview_modules_1.svg,dot,svg]
--
digraph {
    rankdir=LR;
    node [shape=box];

    A [label="com.foo.teamA:A:2.1"]
    B [label="org.other:B:1.0"]
    C [label="com.foo.teamC:C:1.5"]
    A -> B
    A -> C
}
--

Suppose another team creates a new module N which uses A and C, giving the dependency graph
below.  gloss:gradle[] will automatically download B as well, and will check that the version of
C is consistent.

.More complex module dependencies
[caption="Figure {counter:figureindex}: "]
[graphviz,overview_modules_2.svg,dot,svg]
--
digraph {
    rankdir=LR;
    node [shape=box];

    A [label="com.foo.teamA:A:2.1"]
    B [label="org.other:B:1.0"]
    C [label="com.foo.teamC:C:1.5"]
    N [label="com.foo.teamA:N:0.1"]
    A -> B
    A -> C
    N -> A
    N -> C
}
--

=== gloss:holygradle[] Modules

The gloss:holygradle[] plugins add several features to processes of fetching and publishing modules.

==== Packaged Artifacts

The artifacts of Java-based modules are often only one or two JAR files.  To build a module, the
file names of these JAR dependencies are simply passed to the Java compiler on the command line.

For languages like C++, each module may provide many files -- header files, static and dynamic
libraries, resources, and so on.  Also, some of these files may have variants such as for "release"
and "debug" mode, or for 32-bit and 64-bit platforms.  To build such a module, the file names
from its dependencies are often too many to pass on a command line, and compilers expect to get a
list of folders to search for header files etc.

The basic extension which the gloss:holygradle[] provides is to collect files into one or more
ZIP files when publishing, and unzip those files when dependencies are downloaded.  It also changes
the gloss:gradle[] syntax to specify a relative folder path for each dependency, and the unzipped
files appear at that location in your gloss:workspace[].  The compiler can then be configured to
look for the dependency files at those locations.

==== Source Dependencies

In gloss:subversion[] and some other source control systems, a very simple way to handle
dependencies is to add them as "externals".  This has many disadvantages -- for example, there is
no easy way use the same external at more than one place in the graph, as in the previous example
where module C is used by both A and N.  However, it is useful for combining source code from
multiple repositories, for cases where several components are always built together, which is not
well supported by some other systems such as gloss:mercurial[].

The gloss:holygradle[] adds the notion of "source dependencies" to gloss:gradle[].  "Downloading"
a source dependency will check it out from source control.  When the original module is published,
its source dependencies will also be published, as separate modules.  The metadata will be
automatically filled in to describe the connections between these modules.

==== Source Reference Information

In the Java world, binary modules often have a matching source module, containing the same version
of the source code, for example for debugging use.  Java IDEs are often built to automatically
download source published in this way.  For C++ applications on Windows, the Visual Studio IDE
instead downloads source from a Microsoft Symbol Server.  Neither the gloss:holygradle[] nor
gloss:artifactory[] include special support for this.  However, the gloss:holygradle[] automatically
adds a +build_info+ folder to each module, which has a reference to the source code location and
revision.

include::{localDoc}/overview_source_access.ascinc[]

=== gloss:holygradle[] Plugins

The gloss:holygradle[] is implemented as a set of gloss:gradle[] plugins, plus a custom distribution
of gloss:gradle[] (for bootstrapping and debugging the plugins).

TODO: Link to example of how you cause them to be used.

DONE: https://bitbucket.org/nm2501/holy-gradle-plugins/wiki/Home

The usage relationship between the plugins, the custom distribution, and some other related tools,
is as follows.

.gloss:holygradle[] component dependencies
[caption="Figure {counter:figureindex}: "]
[graphviz,overview_holygradle_components.svg,dot,svg]
--
digraph {
    ranksep=0.4
    fontsize=12
    node [shape=box, style=rounded, margin="0.04,0.04", height=0.3, fontsize=12]
    edge [fontsize=12]
    compound=true

    subgraph key {
        rank=same
        key [label="Key:", shape=plaintext]
        key_proj [label="Your source", color=navy, fontcolor=navy, style=""]
        key_hg [label="Holy Gradle"]
        key_ext [label="Third-party", color=darkgreen, fontcolor=darkgreen, style=diagonals]
    }

    subgraph cluster_project {
        label="Your project"

        build [label="build.gradle", shape=note, color=navy, fontcolor=navy]
        wrapper [label="Gradle\nwrapper", color=darkgreen, fontcolor=darkgreen, style=diagonals]
    }

    key_proj -> build [style=invis]

    subgraph cluster_plugins {
        label="Holy Gradle Plugins"

        { rank=same
            afym [label="artifactory-manager"]
            stamper [color=grey, fontcolor=grey, style="dashed,rounded"]
        } -> { rank=same
            intrepid
            myc [label="my-credentials"]
            devenv [color=grey, fontcolor=grey, style="dashed,rounded"]
            ut [label="unit-test", color=grey, fontcolor=grey, style="dashed,rounded"]
        } -> { rank=same
            cgc [label="custom-gradle-core"]
            cred_store [label="credential-store.exe"]
        } [style=invis]

        intrepid -> cgc [headport=n]
        myc -> cgc [headport=n]
        devenv -> cgc [headport=n]
        ut -> cgc [headport=n]
        intrepid -> cred_store
        myc -> cred_store
    }

    build -> afym [lhead=cluster_plugins, label="specifies"]
    build -> wrapper [label="input to", style=dashed]//, minlen=0]

    custom_gradle [label="custom-gradle"]
    wrapper -> custom_gradle [label="downloads\n& runs"]
    custom_gradle -> devenv [lhead=cluster_plugins, label="downloads", constraint=false]

    { rank=same
        Java [label="Java 7", color=darkgreen, fontcolor=darkgreen, style=diagonals]
        Windows [label="Windows 7", color=darkgreen, fontcolor=darkgreen, style=diagonals]
        VS [label="Visual Studio", color=darkgreen, fontcolor=darkgreen, style=diagonals]
    }

    custom_gradle -> Java
    { cred_store intrepid } -> Windows
    devenv -> VS

    wrapper -> afym [ltail=cluster_project, lhead=cluster_plugins, style=invis] // just for layout
}
--

==== Custom Gradle Core

The link:plugin-custom-gradle-core.html[] is used by most of the other gloss:holygradle plugins.

This plugin supports the following.

* Some useful standard tasks.
* +prerequisites+ syntax to help you specify prerequisites for difficult cases where a dependency
can't be simply unzipped into a folder and must be manually installed, e.g., Microsoft Visual
Studio.

==== Intrepid

The link:plugin-intrepid.html[] supports the following.

* Source code dependencies
  * Retrieving source code repositories from gloss:subversion[] or gloss:mercurial[].
  * Caching gloss:subversion[] and gloss:mercurial[] credentials in the gloss:credential-manager[].
  * Specifying dependency metadata when publishing a module with its source code dependencies.
  * Overriding a source code dependency and using already-published versions of that
module instead.
* Packed dependencies
  * Retrieving dependencies which are ZIP files and unpacking them into your workspace.
  * Unzipping to a per-user cache and creating a symlink to there from your workspace, to save space
when multiple workspaces have the same dependencies.
  * Explicit creation of extra symlinks within workspace if required.
  * Control of folder naming to allow multiple versions of the same component.
* Publishing
  * Creating "gloss:package[]d artifacts" (that is, ZIP files).
  * Uploading to gloss:ivy[] format repository.

==== My Credentials

The link:plugin-my-credentials.html[] supports the following.

* Securely storing credentials using the Windows Credential Manager, and using them in a
+build.gradle+ script.
* Displaying a dialog box to request credentials from the user.
  * Time-out to prevent the dialog box from causing an automated build to hang.

==== Artifactory Manager

The link:plugin-artifactory-manager.html[] supports the following.

* Deleting artifacts from an Artifactory server according to rules such as:
  * delete anything older than X days/weeks/months; or
  * delete anything older than Y days/weeks/months but keep one version per day/week/month.

==== DevEnv

WARNING: This plugin is not actively maintained.  We recommend you do not use it.

The link:plugin-devenv.html[] supports the following.

* Invoking DevEnv to build and clean a Visual Studio solution.
* Building each module only once, even if multiple other source modules depend on it.
* Specifying a solution file.
* Specifying which version of DevEnv to use.
 
==== Unit-Test

WARNING: This plugin is not actively maintained.  We recommend you do not use it.

The link:plugin-unit-test.html[] supports the following.

* Syntax for defining your unit test processes.
* Automatically creating tasks to run your unit test processes.
* In a multi-module build, running tests in order according module dependencies, or running them for
one project independently.
* Syntax to define unit test 'flavours', defaulting to `Debug' and `Release`.
  * Automatically replacing strings `<flavour>` and `<f>` in test definitions.
 
==== Stamper

WARNING: This plugin is not actively maintained.  We recommend you do not use it.

The link:plugin-stamper.html[] supports the following.

* 'Stamping' information (such as version numbers) into text files.
* Syntax for defining which files to stamp and how to stamp them (using regular expressions).

== gloss:artifactory[]

gloss:artifactory[] is a web service for storing modules which are published using tools such as
gloss:gradle[].  The simplest view of it is "version control for binaries" or "FTP / file share with
history".  However, it has more features and some standards to follow, described in this section.

=== Repositories

An gloss:artifactory[] server instance does not allow users to store files in any structure they
choose.  It stores modules in named collections, called gloss:repositories[].  These can only be
created by server administrators.  Within each repository (or "repo"), the files for each module are
in a three-level folder structure: group, then name, then version.

There are three kinds of repository on a server: local, remote, and virtual.

Local:: Usually named +_something_-local+, these contain artifacts whose contents are managed by that server.  The word "local" does *not* mean "only visible within one organisation" -- visibility depends on permissions, and visibility to other organisations depends on network configuration.
Remote:: Always named +_something_-cache+, each contains local copies of artifacts automatically cached from a repo on another server.  Cached files may be downloaded on demand or in advance, and may be automatically deleted, depending on server setup.
Virtual:: Any other naming is a virtual repo.  These point to one or more other repos, using a list configured by admins.  Requests for artifacts from these repos will search the list in order.

Usually a server admin will set up one or more virtual repos for a team which includes all the local and remote repos they need.  This is convenient for the team, because they only need to list one repo in their +build.gradle+ file.  It is also important for admins, if they need to change repository configuration in future, for example, to change permissions or backup processes.  When
they make such changes they can also change the virtual repo lists, so that all requests to the virtual repo work as before.

[IMPORTANT]
--
You can think of virtual repos like "interfaces", and local and remote repos like "implementation".
You should always set up your +build.gradle+ scripts to

* get dependencies from a virtual repo (so that admins can re-arrange the other repos); and
* publish to a local repo (because you can't publish to the other two).
--

=== Access Control

gloss:artifactory[] has access control, so different users may have different permissions to read
or modify a repository.  The gloss:holygradle[] includes a feature to keep a developer's
gloss:artifactory[] password securely in the gloss:credential-manager[], so that it can log in
automatically without storing passwords in build scripts.

=== Module Version Lifetimes

An important question which gloss:artifactory[] cannot fully answer is, after a version of a 
module is published, when can it be deleted?  Official release versions may need to be kept for
many years but often teams also make temporary versions, and delete them to save disk space.

A common approach is to put long-term and temporary releases in different repositories:
+_something_-release-local+ for "permanent" versions, and +_something_-integration-local+ for
temporary ones.  The gloss:holygradle[] provides a plugin for deleting older versions of modules
using date ranges and other rules, and it allows different rules for each repository.  Typically
this plugin would be run periodically using a tool like gloss:Jenkins[].

=== Promotion

A common development process called _continuous integration_ involves building and testing a module
regularly, for example, any time a new source code change is committed.  When a build passes all
tests, it can be used as a release candidate.

When a repository server like gloss:artifactory[] is involved, it is a good idea to publish each
build to a temporary repository.  This tests the publish process, and also allows the builds to
be downloaded from gloss:artifactory[] for manual testing.  To release a successful build, you
could re-run the publish process targeting a repository which will store the module permanently.
However, gloss:artifactory[] provides a quick way to copy or move a module to another repository on
the same server.

TODO: Link to doc on how to do more complex cases with dependencies which also need to be promoted.

TODO: Link to requirements (and rejected solutions?)

DONE: http://localwiki/Gradle#What_is_it.3F (intro to tools)

DONE: http://localwiki/Gradle#Getting_Started (pictorial overviews, GradleConfigurations.ppt, Gradle_High_Level_Map.pptx (brief plugin/package list))

DONE: http://localwiki/Artifactory#Repository_Types (repo types)

include::{localDoc}/overview_artifactory.ascinc[]
