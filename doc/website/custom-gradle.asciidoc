include::stdattr.ascinc[]

= custom-gradle

include::sitemap.ascinc[]


== Overview

=== What is it?

The +custom-gradle+ package is a custom gloss:gradle-distribution[], based on gloss:gradle[] 1.4, with an extra gloss:init-script[].

You won't usually need to download this manually because if you use a gloss:gradle-wrapper[] then it should fetch it from your gloss:artifactory[] server automatically. 

The reasons for using a custom distribution of Gradle as opposed to using the original versions from the Gradle website are:

* to include the custom init script which does several useful things;
* to speed up downloads of Gradle by using an in-house repository.

== How to use it

You need a gloss:gradle-wrapper[] whose properties file refers to a URL corresponding to a
published version of +custom-gradle+. This would normally be published to an Artifactory server.
See the link:first_steps.html[] page for an example of how to set this up.

Once you're using a Gradle Wrapper that refers to +custom-gradle+ then an init-script will automatically be applied. This adds a little bit of extra functionality to the standard Gradle distribution, described below.

=== Applying Holy Gradle plugins

The +gplugins+ DSL from the init script makes it easier to use the custom Gradle plugins such as link:plugin-intrepid.html[] and link:plugin-my-credentials.html[]. To use it put the following at the top of your +build.gradle+, with the plugin versions of your choice.

[source,groovy]
----
buildscript {
    gplugins.use "intrepid:7.2.5"
    gplugins.use "my-credentials:7.2.5"
}
gplugins.apply()
----

Note that the link:plugin-custom-gradle-core.html[] will automatically be applied whenever you
use the +gplugins+ DSL.

[[user-gradle]]
=== user.gradle

One of features of the init script is to automatically load +user.gradle+ files that are in the
same directory as the build script. Simply create a Gradle script named +user.gradle+ or
+_build_script_.user.gradle+, where +_build_script_+ is the name of the build script. For example,
consider the following directory structure.

----
<workspace>
|   build.gradle
|   build.user.gradle
|   settings.gradle
+---framework
|   |   framework.gradle
|   |   framework.user.gradle
|   +---src
|   |   ...
|   +---libs
|       ...
+---my_app
    |   my_app.gradle
    |   user.gradle
    +---src
    |   ...
    +---libs
        ...
----

In the above example:

* +settings.gradle+ will be loaded and evaluated before any of the other build scripts. (See
gloss:settings-file[].)
* +build.user.gradle+ will be loaded and evaluated immediately after +build.gradle+.
* +framework/framework.user.gradle+ will be loaded and evaluated immediately after
+framework/framework.gradle+.
* +my_app/user.gradle+ will be loaded and evaluated immediately after 'my_app/my_app.gradle'.

==== Build script names

Build scripts are normally called +build.gradle+. In this example we have some build scripts
called +framework.gradle+ and +my_app.gradle+. This is possible because +settings.gradle+ is
auto-generated by the link:plugin-intrepid.html[] and contains some code that allows
sub-project build scripts to be named +build.gradle+ or +_subproject_.gradle+ where +_subproject_+
is the name of the sub-project -- that is, the name of the directory in which the build script
lives.
