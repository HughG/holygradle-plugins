include::stdattr.ascinc[]

= I just want to ...

include::sitemap.ascinc[]

== ... make it work!

If you are seeing error messages from gloss:gradle[] or having other problems, please see the
link:troubleshooting.html[] page.  If you can't find the solution there, see the link:support.html[]
page for where to get more help.

[[_get_something_from_artifactory]]
== ... get something from Artifactory

To get something from gloss:artifactory[] you need to know the gloss:module[] version ID (group,
name, and version), and the gloss:repository[] to get it from.  The group which publishes the module
can tell you this information, or give you a URL which links directly to it.  You also need to make
sure you have permissions in Artifactory which allow you to download it -- ask your local
administrators (see the link:support.html[] page) and/or the group lead.

=== -- just one file

It is possible to download individual ZIP files and other files directly from the Artifactory web
UI.  Log in, then click on the "Artifacts" tab, and use the "Tree Browser" or "Simple Browser" to
find the files you need.  The file structure is +/_repository_/_group_/_module_/_version_/_files_+.
For more details, see http://www.jfrog.com/confluence/display/RTF/Browsing+Artifactory.

TIP: The "Tree Browser" only shows you files that have been published at your site, or already
downloaded from another site.  If you need a file from another site but it has not been downloaded
yet, you should use the "Simple Browser", and look in the appropriate _virtual_ repository.  If you
are not sure which repository to look in, please contact the team which published it, and/or your
local link:support.html[] contacts.

[[get_a_whole_software_module]]
=== -- a whole software module

In most cases, if you need one file from a module in gloss:artifactory[], you will also need other
files from that module and from its gloss:dependencies[].  A tool like the gloss:holygradle[] makes
this much easier.  In this case you need to do the following things.

* Find out the name of a _virtual_ gloss:repository[] which you can use to access the module.
* Find out the module version ID _and_ the gloss:configuration[](s) you need -- ask the group which
publishes the module if you are not sure.
* Make sure you have link:first_steps.html[set up your machine] for gloss:gradle[], and create a
minimal project (see link:first_steps.html#running_the_holy_gradle[]) if you don't have one already.
* Add at least one gloss:configuration[] to your +build.gradle+, if you don't have any already.
+
[source,groovy]
----
configurations {
    privateBuild
}
----
* Add a reference to the repository, if it is not already in your +build.gradle+.  (For more
information on authentication, see the link:plugin-my-credentials.html[] page.)
+
[source,groovy]
----
repositories.ivy {
    credentials {
        username my.username("Artifactory")
        password my.password("Artifactory")
    }    
    url "https://artifact-server.example-corp.com/libs-release/"
}
----
+
The credentials block is required if your server needs you to log in to access the module you need.
See link:plugin-my-credentials.html[] for details.

* Add a reference to the module in your +build.gradle+, with a mapping from your project's
configurations to the other project's configurations.
+
[source,groovy]
----
packedDependencies {
    "somelib" {
        dependency "com.example-corp.teamA:somelib:1.3.2"
        configuration "privateBuild->compileVc10Debug,compileVc10Release"
        configuration "privateBuild->debuggingVc10Debug,debuggingVc10Release"
    }
}
----
+
See link:plugin-intrepid.html#packedDependencies[] for details.

* Run +gw fAD+ in a Windows Command Prompt in your project's directory.  If you have any problems,
contact your local link:support.html[] staff or the group which publishes the module.
TIP: Before publishing your module, you should review the list of configurations in your
+build.gradle+, and the configuration mapping for each dependency.  If you do not, it may be more
difficult for other teams to use your module.  See the <<make_a_release>> section below, and the
page on link:workflows.html[] for more information.

[[start_a_new_project]]
== ... start a new project

Follow the instructions above to get "<<get_a_whole_software_module>>", and you will have a minimal
project with one packed dependency.  You can then add the other dependencies needed for your project,
fetch them all, and build it.

For more information, see the link:workflows.html#_initial_set_up[] workflow section.

== ... build an existing project

To build a project from source when it already exists, you need to do the following things.

* Make sure your machine is link:first_steps.html[set up for Gradle].
* Make sure you have permissions to access the source code repository _and_ the gloss:artifactory[]
gloss:repositories[] which contain the project's dependencies.  The team which owns the project
should have this information.
* Check out the source code using the appropriate tool--usually gloss:subversion[] or
gloss:mercurial[].
* Open a Command Prompt in the project's folder, and follow the link:workflows.html#_typical_workflow[].

Note that, if this is the first time you have accessed the project's Artifactory repository/-ies,
the Holy Gradle will pop up a dialog to prompt you for the username and password.  If the project
has gloss:source-dependencies[] you may be prompted separately for those.  It stores them in the
gloss:credential-manager[] so you will not need to supply them again until you change your password.
When your password changes, see link:plugin-my-credentials.html#updating-credentials[] for how to
update the password stored by the Holy Gradle.

[[make_a_release]]
== ... make a release of my project

If you are just starting to use the gloss:holygradle[] and gloss:artifactory[], you may already have
a release process which does not use those tools.  If you want to start to release into Artifactory,
this is not something you can just do quickly.  You must consider several points before you start:

* what needs to be released;
* what restrictions there are on your release (such as licensing, or export laws);
* how you identify it later;
* where the released things will be stored;
* who should do the release;
* how your customers will get the release.

See link:workflows.html#_initial_set_up[] and link:workflows.html#_making_a_release[] for more
information.  It is a good idea to test your release process completely, including having your
customer checking a sample release.