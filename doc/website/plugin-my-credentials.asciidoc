include::stdattr.ascinc[]

= my-credentials-plugin

include::sitemap.ascinc[]


== Overview

=== What is it?

This is a custom plugin for gloss:gradle[] to support storage and retrieval of user-specific
credentials under Windows.  It provides the following features.

* Secure storage of credentials using the gloss:credential-manager[].
* Methods to retrieve a username and password.
* A dialog box to request credentials from the user.
* DSL to specify instructions to be displayed in the dialog box.
** A time-out to prevent the dialog box permanently halting an autobuild machine.

=== Example build script

Here is an example build script:

[source,groovy]
----
buildscript {
    gplugins.use "my-credentials:7.2.5"
}
gplugins.apply()

repositories.ivy {
    credentials {
        username my.username()
        password my.password()
    }
    url "https://artifactory-server.example-corp.com/artifactory/my-integration-repo/"
}
----

This will query the Credentials Manager for suitable credentials. If they exist then the username
and password will be retrieved and used to configure the repository's credentials. If no such
credentials exist in the Credentials Manager then a dialog box will be displayed, requesting input.
Whatever the user enters will be permanently stored in the Credentials Manager.  They are stored
under an entry labelled "Intrepid - _type_", where _type_ is the parameter described below; so the
default entry is "Intrepid - Domain Credentials".

WARNING: By default the gloss:holygradle[] uses the gloss:gradle-daemon[].  This can sometimes prevent
the password dialog being shown.  Therefore, when running Gradle on a new project for the first
time, use the +--no-daemon+ argument, otherwise authentication may fail.  Depending on your
organisation's IT policies, this may eventually lead to your account being locked.

== DSL Guide

=== username

This method will return a user-name that has previously been entered by the user. If no suitable
user-name exists in the Credentials Manager then a dialog box will be displayed.

This method optionally takes one parameter to allow for different credentials to be used in
different situations. When passing no parameter to this method, it acts as if +"Domain Credentials"+
had been passed in.

=== password

This method will return a password that has previously been entered by the user. If no suitable
password exists in the Credentials Manager then a dialog box will be displayed.

This method optionally takes one parameter to allow for different credentials to be used in
different situations. When passing no parameter to this method, it acts as if +"Domain Credentials"+
had been passed in.

=== instructions

This is a container, in which each element corresponds to a credential `type'; that is, the
parameter passed to the +username+ and +password+ methods. For each credential type, it is possible
to add instructions which will be displayed in the dialog, as follows.

[source,groovy]
----
my.instructions {
    Artifactory {
        add "Visit https://artifactory-server.example-corp.com/artifactory with a web-browser."
        add "Log in using your domain username and password."
        add "Click on your username at the top right to visit your user profile."
        add "Enter your password again in the Current Password box, then click Unlock."
        add "Copy the Encrypted Password out of the box."
    }
    "Domain Credentials" {
        add "Enter your usual domain credentials."
        add "Your username should not be prefixed with the domain."
    }
}
----

The instructions for +"Domain Credentials"+ above will be displayed for calls to +username+ or
+password+ with no parameters.  If no instructions are set, default instructions will be shown.


[[updating-credentials]]
== Updating Credentials

If your password changes, you can run +credential-store.exe+ as a quick way to update the entries in
the gloss:credential-manager[].  This program is automatically downloaded into your project
directory the first time you use the gloss:holygradle[].

Run it with no arguments and it will show you the command line options, then prompt you for your new
password.  It will automatically replace all Mercurial credentials with this new password.  For any
credentials stored under +Intrepid - _type_+ keys, it will prompt you for each one.
