/**
 * Note: This project doesn't need to be built or deployed, because Artifactory loads plugins from source.  This
 * build.gradle file is just here to help IntelliJ fond all the dependencies, to get syntax highlighting correct.
 */

group = "holygradle"

apply plugin: "groovy"

dependencies {
    groovy localGroovy()

    // These libraries can be found in // from http://repo.jfrog.org/artifactory/libs-releases/org/artifactory/artifactory-papi/
    compile "org.slf4j:slf4j-api:1.7.5" // (also from repo1)
    compile "org.artifactory:artifactory-papi:4.7.7"

    compile "org.codehaus.groovy.modules.http-builder:http-builder:0.6"
    compile "javax.mail:mail:1.4.3"
}

repositories {
    maven {
        url artifactoryServer + 'remote-repos/'
        // We use credentials here because artifactoryPluginRepo may not be readable to anonymous users, depending
        // on local Artifactory configuration; or they may not be able to deploy into caches.
        credentials {
            username artifactoryUsername
            password artifactoryPassword
        }
    }
}

project.ext.pluginsPackageSubdir = "artifactory/etc/plugins"
project.ext.contentPackageSubdir = "content"
if (!project.hasProperty("pluginsDeployDir")) {
    project.ext.pluginsDeployDir = new File(buildDir, "deploy/artifactory-etc-plugins")
}
if (!project.hasProperty("contentDeployDir")) {
    project.ext.contentDeployDir = new File(buildDir, "deploy/webserver")
}

task packageRepositoryGraph(type: Copy) {
    into "${buildDir}/package/repositoryGraph"
    from("src/main/groovy/repositoryGraph.groovy") {
        into "${pluginsPackageSubdir}"
    }
    from("src/main/html/") {
        include "repositorygraph.html"
        into contentPackageSubdir
    }
    from("src/main/css/") {
        include "joint.min.css"
        into "${contentPackageSubdir}/style/"
    }
    from("src/main/javascript/") {
        include "joint.min.js"
        include "joint.layout.DirectedGraph.min.js"
        into "${contentPackageSubdir}/script/"
    }
}

// Annoyingly, the task outputs for a Copy are the single root destinationDir, so we have to just magically know
// what to deploy from the package dir.
//
// This isn't a Copy task because we expect some network cost to checking up-to-date-ness, and the set of files to copy
// is small.
task deployRepositoryGraph {
    dependsOn packageRepositoryGraph
    doLast {
        project.copy {
            from new File(packageRepositoryGraph.destinationDir, pluginsPackageSubdir)
            into pluginsDeployDir
        }
        project.copy {
            from new File(packageRepositoryGraph.destinationDir, contentPackageSubdir)
            into contentDeployDir
        }
    }
}