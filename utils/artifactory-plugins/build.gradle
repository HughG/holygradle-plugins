/**
 * Note: This project doesn't need to be built to a JAR, because Artifactory loads plugins from source.  However, it
 * does have a "deploy" task which prepares all the plugins for deployment onto the server (but doesn't actually deploy
 * them).
 *
 * TODO: Put the dependencies which need to be deployed into a separate configuration (from the ones which are built in
 * to the Artifactory WAR) and automatically copy them into the deploy folder under "plugins/lib".
 */
group = "holygradle"

apply plugin: "groovy"

dependencies {
    compile localGroovy()

    // ----------------------------------------------------------------------------------------------------------------
    // These modules do not need to be deployed to Artifactory, because they're included in the Artifactory WAR.  They
    // are just here to allow IntelliJ etc. to find references.

    // These libraries can be found in http://repo.jfrog.org/artifactory/libs-releases/org/artifactory/artifactory-papi/
    // (or Maven Central).
    compile "org.slf4j:slf4j-api:1.7.5"
    compile "org.artifactory:artifactory-papi:4.7.7"

    // These modules can be found on Maven Central
    compile "javax.mail:mail:1.4.3"

    // ----------------------------------------------------------------------------------------------------------------
    // These libraries are not included as part of Artifactory, so you need to manually deploy them to the "plugins/lib"
    // folder under the Artifactory root.
    compile "org.codehaus.groovy.modules.http-builder:http-builder:0.6"
    compile "xml-resolver:xml-resolver:1.2" // Included in Artifactory 4.x, but not 5.x.
}

repositories {
    maven {
        url artifactoryServer + 'remote-repos/'
        // We use credentials here because artifactoryPluginRepo may not be readable to anonymous users, depending
        // on local Artifactory configuration; or they may not be able to deploy into caches.
        credentials {
            username artifactoryUsername
            password artifactoryPassword
        }
    }
}

project.ext.localConfDir = "${projectDir}/localConf"
if (!new File((String)localConfDir).exists()) {
    "cmd /c mklink /j \"${localConfDir}\" \"${projectDir}\\..\\..\\local\\local-artifactory-plugins\\conf\"".execute().waitFor()
}

project.ext.pluginsPackageSubdir = "artifactory/etc/plugins"
project.ext.pluginsConfSubdir = "${pluginsPackageSubdir}/conf"
project.ext.contentPackageSubdir = "content"
if (!project.hasProperty("pluginsDeployDir")) {
    project.ext.pluginsDeployDir = new File(buildDir, "deploy/artifactory-etc-plugins")
}
project.ext.pluginsConfDeployDir = new File((File)pluginsDeployDir, "conf")
if (!project.hasProperty("contentDeployDir")) {
    project.ext.contentDeployDir = new File(buildDir, "deploy/webserver")
}

task packageRepositoryGraph(type: Copy) {
    into "${buildDir}/package/repositoryGraph"
    from("src/main/groovy/repositoryGraph.groovy") {
        into "${pluginsPackageSubdir}"
    }
    from("src/main/html/") {
        include "repositorygraph.html"
        into contentPackageSubdir
    }
    from("src/main/css/") {
        include "joint.min.css"
        into "${contentPackageSubdir}/style/"
    }
    from("src/main/javascript/") {
        include "joint.min.js"
        include "joint.layout.DirectedGraph.min.js"
        into "${contentPackageSubdir}/script/"
    }
}

task prepareDeploy {
    description = """
This task collects files in the correct layout for deployment, but doesn't actually deploy them.

The contents of the plugins deploy dir (by default, "deploy/artifactory-etc-plugins") should be copied into the
"<ARTIFACTORY_ROOT>/etc/plugins" folder.

The contents of the static content deploy dir (by default, "deploy/webserver") should be copied into an appropriate
static content folder for your web server.
"""

    // Annoyingly, the task outputs for a Copy are the single root destinationDir, so we have to just magically know
    // what to deploy from the package dir, instead of being able to declare a dependency on the packageRepositoryGraph
    // task.
    //
    // This isn't a Copy task because we expect some network cost to checking up-to-date-ness, and the set of files to
    // copy is small.
    dependsOn packageRepositoryGraph
    doLast {
        project.copy {
            from("src/main/groovy") { include "*.groovy" }
            into pluginsDeployDir
        }
        project.copy {
            from localConfDir
            into pluginsConfDeployDir
        }
        project.copy {
            from new File(packageRepositoryGraph.destinationDir, pluginsPackageSubdir)
            into pluginsDeployDir
        }
        project.copy {
            from new File(packageRepositoryGraph.destinationDir, contentPackageSubdir)
            into contentDeployDir
        }
    }
}
