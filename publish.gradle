def propertyOrNull(Object o, String propertyName) {
    o.hasProperty(propertyName) ? o.property(propertyName) : null
}

void setPublishTaskDescription(Task t, String publishingGroup, String targetUri) {
    t.group = "Publishing"
    t.description = "Publish snapshot or (using 'publishVersion' property) release of ${publishingGroup} to ${targetUri}"
}

// Set up publish tasks for root project.
project.ext.publishTasks = []
project.ext.publishReallyTasks = []
["Plugins", "CustomGradle"].each { String publishingGroup ->
    Task publishReally = project.task("publish${publishingGroup}Really") { Task t ->
        setPublishTaskDescription(t, publishingGroup, PUBLISH_TARGET_URI)
    }
    project.publishTasks << publishReally
    project.publishReallyTasks << publishReally

    project.publishTasks << project.task("publish${publishingGroup}Locally") { Task t ->
        setPublishTaskDescription(t, publishingGroup, PUBLISH_LOCAL_TARGET_URI)
    }
}

// Pick a version number for each subproject, if we're publishing.
project.gradle.taskGraph.whenReady {
    String publishVersion = "unspecified"
    if (project.publishTasks.any { project.gradle.taskGraph.hasTask(it) }) {
        String publishVersionFromProperty = propertyOrNull(project, "publishVersion")
        if (publishVersionFromProperty != null) {
            publishVersion = publishVersionFromProperty
        } else {
            String username = System.getProperty("user.name").toLowerCase()
            publishVersion = "${username}-SNAPSHOT"
        }

        println()
        println "Publishing as version '${publishVersion}'..."
        println()
    }

    project.allprojects { Project p ->
        p.version = publishVersion
        p.logger.info "Set ${p.name} version to ${p.version}"
    }
}

project.subprojects {
    // Add local repo to repos used for dependencies.
    repositories {
        ivy {
            url PUBLISH_LOCAL_TARGET_URI
        }
    }
    
    String publishingGroup =
        (project.name.endsWith("-plugin") || project.name == "credential-store") ?
            "Plugins" :
            "CustomGradle";

    // Set up publish tasks for each subproject.
    project.ext.publishTasks = []
    project.publishTasks << project.task("publish${publishingGroup}Really", type: Upload) { Upload t ->
        setPublishTaskDescription(t, publishingGroup, PUBLISH_TARGET_URI)
        t.configuration = configurations.default
        t.uploadDescriptor = true
        t.descriptorDestination = new File(project.buildDir, "ivy.xml")
        t.dependsOn(t.configuration.getTaskDependencyFromProjectDependency(true, t.name))
        // Add a dependency on the root project, so that it will be triggered to set up the version number, by the
        // existence of that task in the task graph, and because it brings in a dependency on integration testing.
        t.dependsOn rootProject.tasks[t.name]

        t.repositories.ivy {
            credentials {
                username artifactoryUsername
                password artifactoryPassword
            }
            url PUBLISH_TARGET_URI
        }

        t.doLast {
            println "Published ${project.name} ${project.version} " +
                "to ${PUBLISH_TARGET_URI} at: " + new Date()
        }
    }
    project.publishTasks << project.task("publish${publishingGroup}Locally", type: Upload) { Upload t ->
        t.configuration = configurations.default
        setPublishTaskDescription(t, publishingGroup, PUBLISH_LOCAL_TARGET_URI)
        t.uploadDescriptor = true
        t.descriptorDestination = new File(project.buildDir as File, "ivy.xml")
        t.dependsOn(t.configuration.getTaskDependencyFromProjectDependency(true, t.name))
        // Add a dependency on the root project, so that it will be triggered to set up the version number, by the
        // existence of that task in the task graph.
        t.dependsOn rootProject.tasks[t.name]

        t.repositories.ivy {
            url PUBLISH_LOCAL_TARGET_URI
        }

        t.inputs.dir new File(project.projectDir as File, "/build/libs")
        t.outputs.dir PUBLISH_LOCAL_TARGET_URI.toString() + "${project.group}/${project.name}/${project.version}"

        t.doLast {
            println "Published ${project.name} ${project.version} " +
                "to ${PUBLISH_LOCAL_TARGET_URI} at: " + new Date()
        }
    }
}

project.tasks["clean"].doLast {
    project.delete(PUBLISH_LOCAL_TARGET_URI)
    project.delete(LOCAL_GRADLE_USER_HOME)
}