import org.gradle.api.initialization.dsl.ScriptHandler
import org.gradle.api.tasks.testing.Test
import org.gradle.process.JavaForkOptions

apply plugin: 'groovy'

buildscript { ScriptHandler script ->
    // Make sure we don't publish something which is based on conflicting versions of dependencies.
    script.configurations["classpath"].resolutionStrategy { ResolutionStrategy rs ->  rs.failOnVersionConflict() }
}

subprojects {
    if (project.name.endsWith("plugin")) {
        apply plugin: "groovy"

        // Set helper properties for unit tests.
        test {
            systemProperties([
                'holygradle.gradleHomeDir': project.gradle.gradleHomeDir.path,
                'holygradle.gradleUserHomeDir': project.gradle.gradleUserHomeDir.path
            ])
        }

        // Specify common dependencies for all projects.
        dependencies {
            groovy localGroovy()
            compile gradleApi()
            testCompile files("../buildSrc/build/classes/main/")
        }
    }
}

// The custom-gradle project also needs the groovy plugin, even though it's not a "-plugin" itself.
project(":custom-gradle") {
    apply plugin: "groovy"
}

void maybeForwardHttpProxyProperties(JavaForkOptions forkOptions) {
    String proxyHost = System.getProperty("http.proxyHost")
    String proxyPort = System.getProperty("http.proxyPort")

    if (proxyHost != null) {
        forkOptions.systemProperty("http.proxyHost", proxyHost)
    }
    if (proxyPort != null) {
        forkOptions.systemProperty("http.proxyPort", proxyPort)
    }
}

subprojects {
    // Add a default configuration for any subprojects which don't have one.
    if (configurations.findByName("default") == null) {
        configurations {
            it."default"
        }
    }

    // Set a common group.
    group = "holygradle"
    
    // Set common repo info for dependencies.
    repositories {
        ivy {
            url artifactoryServer + artifactoryPluginRepo
            // We use credentials here because artifactoryPluginRepo may not be readable to anonymous users, depending
            // on local Artifactory configuration.
            credentials {
                username artifactoryUsername
                password artifactoryPassword
            }
        }
        maven {
            url artifactoryServer + 'remote-repos/'
            // We need credentials here because "remote-repos/" is a read-through cache of external repos, set up on
            // Artifactory.  If you update dependencies to require a new version of something (such as svnkit) which
            // exists in a real remote repo (such as <http://repo1.maven.org/maven2/>), but isn't cached in the local
            // Artifactory server, it will be written to the local Artifactory server.  Depending on the setup of your
            // server, that may require credentials.
            credentials {
                username artifactoryUsername
                password artifactoryPassword
            }
        }
    }
    
    // Don't cache SNAPSHOT dependencies for any length of time.
    // TODO 2013-16-18 HughG: Really, we shouldn't use any SNAPSHOT dependencies.
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
    }

    // For any projects with a "test" task, add integration tests and a way to launch the test report then run tests.
    if (project.tasks.findByPath("test") != null) {
        // Separate out unit tests and integration tests
        project.tasks.test { Test t ->
            t.description = "Run the unit tests (test classes not ending in 'IntegrationTest')."
            t.include "**/*Test.*"
            t.exclude "**/Abstract*.*"
            t.exclude "**/*IntegrationTest.*"

            maybeForwardHttpProxyProperties(t)
        }
        project.task([type: Test], "integTest") { Test t ->
            t.group = "Verification"
            t.description = "Run the integration tests (test classes not ending in 'IntegrationTest')."
            t.include "**/*IntegrationTest.*"
            t.exclude "**/Abstract*.*"
            t.testReportDir = file("${project.reporting.baseDir}/$name")

            maybeForwardHttpProxyProperties(t)
        }

        task testAndShowReport(type: DefaultTask) {
            dependsOn test
            group = "Verification"
            description "Opens the test report and runs the tests."
            doFirst {
                project.exec {
                    commandLine "cmd", "/c", "start", "${test.testReportDir}/index.html"
                }
            }
        }
        task integTestAndShowReport(type: DefaultTask) {
            dependsOn integTest
            group = "Verification"
            description "Opens the integration test report and runs the integration tests."
            doFirst {
                project.exec {
                    commandLine "cmd", "/c", "start", "${integTest.testReportDir}/index.html"
                }
            }
        }
    }
}

apply from: "versionInfo.gradle"
apply from: "website.gradle"
apply from: "publish.gradle"
