/**
 * The following values and tasks are used to publish the static website.
 */
project.ext.WEBSITE_DIR = "${projectDir}/doc/website"

void initializeBuildWebsiteTask(
    Map options = [quickly: false, local: false],
    Task t,
    String websiteOutputSubdir
) {
    String websiteOutputDir = "${WEBSITE_DIR}/${websiteOutputSubdir}"

    fileTree(WEBSITE_DIR).include("*.asciidoc").each { File asc ->
        String ascName = asc.name
        String ascBase = asc.name - ".asciidoc"
        String ascOutJustFileName = ascBase + ".html"
        String ascOut = "${websiteOutputDir}/${ascOutJustFileName}"

        t.inputs.file asc
        t.outputs.file ascOut

        t.doLast {
            File outputDir = new File(websiteOutputDir)
            if (!(outputDir.exists() || outputDir.mkdirs())) {
                throw new RuntimeException("Failed to create ${websiteOutputDir}")
            }
            def baseArgs = ["/c", "make-asciidoc.bat"]
            def buildQuicklyArgs = options.quickly ? ['"-a source-highlighter=none"'] : []
            def buildLocalArgs = options.local ? ['"-a localDoc=local"'] : []
            def filenameArgs = [
                "-v",
                "-o", "${websiteOutputSubdir}/${ascOutJustFileName}", "${asc.name}"
            ]
            exec {
                workingDir WEBSITE_DIR
                executable "cmd.exe"
                args = baseArgs + buildQuicklyArgs + buildLocalArgs + filenameArgs
            }
        }

        // Also copy the extra files for the website.
        t.inputs.dir "${WEBSITE_DIR}/asciidoc"
        t.inputs.files.files.each { File f ->
            t.outputs.file "${websiteOutputDir}/asciidoc/${f.name}"
        }
        t.doLast {
            copy {
                from WEBSITE_DIR
                into websiteOutputDir
                include "asciidoc/**"
            }
        }
    }
}

[false, true].each { local ->
    String namePart = local ? "Local" : "Public"
    String websiteOutputSubdir = local ? 'output-local' : 'output'

    task "clean${namePart}Website" { Task t ->
        t.group = "Documentation"
        t.description = "Clean the ${namePart} website 'output' dir"
        t.doLast {
            delete(fileTree("${WEBSITE_DIR}/${websiteOutputSubdir}") { ConfigurableFileTree tree ->
                tree.include "**"
                tree.exclude ".hg"
            })
        }
    }

    task "build${namePart}Website" { Task t ->
        t.group = "Documentation"
        t.description = "Build the ${namePart} website (more slowly, using nice code highlighting)"
        // Clean the website before we build it, so we can be sure files weren't build with buildWebsiteQuickly
        t.dependsOn "clean${namePart}Website"
        initializeBuildWebsiteTask(t, websiteOutputSubdir, local: local)
    }

    task "build${namePart}WebsiteQuickly" { Task t ->
        t.group = "Documentation"
        t.description = "Build the ${namePart} website (quickly, using no code highlighting)"
        initializeBuildWebsiteTask(t, websiteOutputSubdir, quickly: true, local: local)
    }

}