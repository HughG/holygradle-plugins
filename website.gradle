import java.util.regex.*

/**
 * The following values and tasks are used to publish the static website.
 */
project.ext.WEBSITE_DIR = "${projectDir}/doc/website"

void initializeBuildWebsiteTask(
    Map options = [quickly: false, local: false],
    Task buildTask,
    String websiteOutputSubdir,
    String namePart
) {
    String websiteOutputDir = "${WEBSITE_DIR}/${websiteOutputSubdir}"

    ConfigurableFileTree otherInputs = fileTree(WEBSITE_DIR) {
        include "**/*.conf"
        include "**/*.ascinc"
    }
    fileTree(WEBSITE_DIR).include("*.asciidoc").each { File asc ->
        String ascName = asc.name
        String ascBase = asc.name - ".asciidoc"
        String ascOutJustFileName = ascBase + ".html"
        String parentRelativeToProject =
            projectDir.toPath().relativize(asc.parentFile.toPath()).toString()
        String ascPathPlusBaseAsName =
            parentRelativeToProject.split(Pattern.quote(File.separator))*.capitalize().join("") +
            ascBase.capitalize()
        String ascOut = "${websiteOutputDir}/${ascOutJustFileName}"
        String ascTaskName = "build" +
            namePart +
            ascPathPlusBaseAsName +
            (options.quickly ? 'Quickly' : '')

        Task ascTask = project.task(ascTaskName) { Task t ->

            t.inputs.files otherInputs
            t.inputs.file asc
            t.outputs.file ascOut

            t.doLast {
                File outputDir = new File(websiteOutputDir)
                if (!(outputDir.exists() || outputDir.mkdirs())) {
                    throw new RuntimeException("Failed to create ${websiteOutputDir}")
                }
                def baseArgs = ["/c", "make-asciidoc.bat"]
                def buildQuicklyArgs = options.quickly ? ['"-a source-highlighter=none"'] : []
                def buildLocalArgs = options.local ? ['"-a localDoc=local"'] : []
                def filenameArgs = [
                    "-v",
                    "-o", "${websiteOutputSubdir}/${ascOutJustFileName}", "${asc.name}"
                ]
                exec {
                    workingDir WEBSITE_DIR
                    executable "cmd.exe"
                    args = baseArgs + buildQuicklyArgs + buildLocalArgs + filenameArgs
                }
            }
        }

        buildTask.dependsOn ascTask
    }
}

[false, true].each { local ->
    String namePart = local ? "Local" : "Public"
    String websiteOutputSubdir = local ? 'output-local' : 'output'
    String websiteOutputDir = "${WEBSITE_DIR}/${websiteOutputSubdir}"

    task "clean${namePart}Website" { Task t ->
        t.group = "Documentation"
        t.description = "Clean the ${namePart} website 'output' dir"
        t.doLast {
            delete(fileTree("${WEBSITE_DIR}/${websiteOutputSubdir}") { ConfigurableFileTree tree ->
                tree.include "**"
                tree.exclude ".hg"
            })
        }
    }

    task "copy${namePart}WebsiteExtraFiles"(type: Copy) {
        from WEBSITE_DIR
        into websiteOutputDir
        include "asciidoc/**"
        if (local) {
            include "local/asciidoc/**"
        }
    }

    task "build${namePart}Website" { Task t ->
        t.group = "Documentation"
        t.description = "Build the ${namePart} website (more slowly, using nice code highlighting)"
        // Clean the website before we build it, so we can be sure files weren't build with buildWebsiteQuickly
        t.dependsOn "clean${namePart}Website"
        t.dependsOn "copy${namePart}WebsiteExtraFiles"
        initializeBuildWebsiteTask(t, websiteOutputSubdir, namePart, local: local)
    }

    task "build${namePart}WebsiteQuickly" { Task t ->
        t.group = "Documentation"
        t.description = "Build the ${namePart} website (quickly, using no code highlighting)"
        t.dependsOn "copy${namePart}WebsiteExtraFiles"
        initializeBuildWebsiteTask(t, websiteOutputSubdir, namePart, quickly: true, local: local)
    }

}