import holygradle.buildHelpers.*

import java.nio.file.*
import java.util.regex.*

/**
 * The following values and tasks are used to publish the static website.
 */
project.ext.WEBSITE_DIR = "${projectDir}/doc/website"
project.ext.LOCAL_WEBSITE_DIR = "${WEBSITE_DIR}/local"

if (!new File(LOCAL_WEBSITE_DIR).exists()) {
    "cmd /c mklink /j \"${LOCAL_WEBSITE_DIR}\" \"${projectDir}\\local\\doc\\local-holy-gradle\"".execute().waitFor()
}

void initializeBuildWebsiteTask(
    Map options = [quickly: false, local: false],
    Task buildTask,
    String asciidocOutputSubdir,
    String namePart
) {
    String asciidocOutputDir = "${project.WEBSITE_DIR}/${asciidocOutputSubdir}"
    final File quicklyFile = new File("${asciidocOutputSubdir}/_quickly.txt")

    ConfigurableFileTree otherInputs = fileTree(project.WEBSITE_DIR) {
        include "**/*.conf"
        include "sitemap.ascinc"
        include "docinfo.html"
    }
    // Note that we can only build "*.asciidoc" files in the top-level folder, not in the "local" sub-folder, for a few
    // reasons.
    // * AsciiDoc resolves the path of the input doc behind symlinks, then tries to find other files relative to that,
    //   so trying to get to "local/../asciidoc" ends up in the wrong place.
    // * AsciiDoc won't load the top-level config file for input files in the "local" sub-folder, because it only looks
    //   in the same folder as the input doc.
    fileTree(project.WEBSITE_DIR).include("*.asciidoc").each { File asc ->
        String ascBase = asc.name - ".asciidoc"
        String ascOutJustFileName = ascBase + ".html"
        String parentRelativeToProject =
            projectDir.toPath().relativize(asc.parentFile.toPath()).toString()
        String ascPathPlusBaseAsName =
            parentRelativeToProject.split(Pattern.quote(File.separator))*.capitalize().join("") +
            ascBase.capitalize()
        String ascOut = "${asciidocOutputDir}/${ascOutJustFileName}"
        String ascTaskName = "build" +
            namePart +
            ascPathPlusBaseAsName +
            (options.quickly ? 'Quickly' : '')

        Task ascTask = project.task(ascTaskName) { Task t ->
            ConfigurableFileTree includeFiles = fileTree(project.WEBSITE_DIR) {
                include "**/${ascBase}*.ascinc"
            }

            t.inputs.files otherInputs
            t.inputs.files includeFiles
            t.inputs.file asc
            t.outputs.file ascOut

            if (!options.quickly && quicklyFile.exists()) {
                // Clean the website before we build it, so we can be sure files weren't built with buildWebsiteQuickly
                t.dependsOn "clean${namePart}Website"
            }
            t.dependsOn "setHgVersionInfo"

            t.doLast {
                File outputDir = new File(asciidocOutputDir)
                if (!(outputDir.exists() || outputDir.mkdirs())) {
                    throw new RuntimeException("Failed to create ${asciidocOutputDir}")
                }
                // For some unknown reason, for the release info to appear in the footer, the attribute name must not
                // contain '-' or uppercase, even though those are normally legal.  Sigh.
                def baseArgs = [
                    "/c", "make-asciidoc.bat",
                    "\"-a hg_release_info='${project.releaseNoteInfo}'\""
                ]
                def buildQuicklyArgs = options.quickly ? ['"-a source-highlighter=none"'] : []
                def buildLocalArgs = options.local ? [
                    '"-a localDoc=local"',
                    "\"-a local_hg_release_info='${project.hgLocalDocVersion}'\"",
                    "\"-a local_hg_full_release_info_url_enc='${project.hgLocalDocFullVersionInfoURLEncoded}'\""
                ] : [
                    // Nothing
                ]
                def loggingArgs = (project.logger.isEnabled(LogLevel.INFO)) ? ['-v'] : []
                def backendArgs = (ascBase.startsWith("slides-")) ? ['-b', 'slidy'] : []
                def filenameArgs = [
                    "-o", "${asciidocOutputSubdir}/${ascOutJustFileName}", "${asc.name}"
                ]
                exec { ExecSpec e ->
                    e.workingDir project.WEBSITE_DIR
                    e.executable "cmd.exe"
                    e.args = baseArgs + buildQuicklyArgs + buildLocalArgs + loggingArgs + backendArgs + filenameArgs
                }
            }
        }

        buildTask.dependsOn ascTask
    }
}

Pattern WEBSITE_ROOT_PATTERN = Pattern.compile(/\[\[WEBSITE_ROOT\]\]/)

for (local in [false, true]) {
    final closed_local = local // capture for use in closures; otherwise you get the final loop value
    final String namePart = local ? 'Local' : 'Public'
    final String namePartLowercase = local ? 'local' : 'public'
    final String rawHtmlSubdir = local ? 'raw-html-local' : 'raw-html'
    final String rawHtmlDir = "${project.WEBSITE_DIR}/${rawHtmlSubdir}"
    final String websiteOutputSubdir = local ? 'output-local' : 'output'
    final String websiteOutputDir = "${project.WEBSITE_DIR}/${websiteOutputSubdir}"
    final String publishUrlProperty = namePartLowercase + 'WebsitePublishUrl'
    final String websiteUrlProperty = namePartLowercase + 'WebsiteUrl'
    final String publishUrl =
        project.hasProperty(publishUrlProperty) ? project.property(publishUrlProperty) : null
    final String publishUsernameProperty = "${namePartLowercase}WebsitePublishUsername"
    final File quicklyFile = new File("${rawHtmlDir}/_quickly.txt")

    task("clean${namePart}Website") { Task t ->
        t.group = "Documentation"
        t.description = "Clean the ${namePart} website 'output' dir"
        t.doLast {
            [rawHtmlSubdir, websiteOutputSubdir].each { String outDir ->
                delete(
                    fileTree("${project.WEBSITE_DIR}/${outDir}") { ConfigurableFileTree tree ->
                        tree.include "**"
                        tree.exclude ".hg"
                    }
                )
            }
        }
    }

    def addWebsiteExamples = { CopySpec spec, String prefix ->
        spec.include "${prefix}files/examples/**"
        spec.exclude "${prefix}files/examples/*/credential-store.exe"
        spec.exclude "${prefix}files/examples/*/gw.bat"
        spec.exclude "${prefix}files/examples/*/.gradle"
        spec.exclude "${prefix}files/examples/*/build"
        spec.exclude "${prefix}files/examples/*/dep"
        spec.exclude "${prefix}files/examples/*/gradle"
    }

    task("copy${namePart}WebsiteExamples", type: Copy) {
        from project.WEBSITE_DIR
        into websiteOutputDir
        addWebsiteExamples(it, "")
        if (local) {
            addWebsiteExamples(it, "local/")
        }

        if (project.hasProperty(websiteUrlProperty)) {
            final String rootString = project.property(websiteUrlProperty)
            filter { line -> WEBSITE_ROOT_PATTERN.matcher(line).replaceAll(rootString) }
        } else {
            doFirst {
                logger.warn(
                    "WARNING: Not replacing published website URL in examples because property " +
                    "${websiteUrlProperty} is not set"
                )
            }
        }
    }

    def addWebsiteExtraFiles = { CopySpec spec, String prefix ->
        spec.include "${prefix}asciidoc/**"
        spec.include "${prefix}files/**"
        spec.exclude "${prefix}files/examples/**"
        spec.include "${prefix}images/**"
    }

    task("copy${namePart}WebsiteExtraFiles", type: Copy) {
        dependsOn "copy${namePart}WebsiteExamples"

        from project.WEBSITE_DIR
        into websiteOutputDir
        addWebsiteExtraFiles(it, "")
        if (local) {
            addWebsiteExtraFiles(it, "local/")
        }
    }

    task("build${namePart}RawHtml") { Task t ->
        t.group = "Documentation"
        t.description = "Build the raw HTML of the ${namePart} website"
        boolean quickly = project.hasProperty("quickly")
        initializeBuildWebsiteTask(t, rawHtmlSubdir, namePart, quickly: quickly, local: local)
        doLast {
            if (quickly) {
                quicklyFile.createNewFile()
            }
        }
    }

    task("copy${namePart}RawHtmlExtraFiles", type: Copy) {
        dependsOn project.tasks["build${namePart}RawHtml"]
        from rawHtmlDir
        into websiteOutputDir
        include "**/*.png"
        include "**/*.svg"
    }

    task("fillLinks${namePart}") { Task t ->
        final Task rawHtmlTask = project.tasks["build${namePart}RawHtml"]
        final Set<Task> rawHtmlSubTasks = rawHtmlTask.taskDependencies.getDependencies(rawHtmlTask)
        for (Task subTask : rawHtmlSubTasks) {
            t.inputs.files(subTask.outputs.files)
        }
        t.inputs.files project.fileTree(new File(project.projectDir, "buildSrc/build/libs"))
        t.dependsOn project.tasks["build${namePart}RawHtml"]

        BuildContext buildContext = new BuildContext(project, new File(project.WEBSITE_DIR))
        XmlDocumentSource docSource = new XmlDocumentSource(buildContext)

        t.doLast {
            File outputDir = new File(websiteOutputDir)
            if (!(outputDir.exists() || outputDir.mkdirs())) {
                throw new RuntimeException("Failed to create ${websiteOutputDir}")
            }
        }

        t.inputs.files.files.each { File htmlIn ->
            // Only process the inputs which are HTML.
            if (!htmlIn.name.endsWith(".html")) {
                return
            }
            File htmlOut = new File("${websiteOutputDir}/${htmlIn.name}")
            t.outputs.file htmlOut

            t.doLast {
                logger.info "Filling links for ${htmlIn} -> ${htmlOut}"
                LinkTextFiller filler = new LinkTextFiller(buildContext, docSource, htmlIn)
                filler.fillAllLinkText()
                filler.writeTo(htmlOut)
            }
        }

        t.doLast {
            if (buildContext.failed) {
                throw new RuntimeException("There were errors filling in the HTML link text")
            }
        }
    }

    task("build${namePart}Website") { Task t ->
        t.group = "Documentation"
        t.description = "Build the ${namePart} website"
        t.dependsOn "fillLinks${namePart}"
        t.dependsOn "copy${namePart}WebsiteExtraFiles"
        t.dependsOn "copy${namePart}RawHtmlExtraFiles"
    }

    task("publish${namePart}Website") { Task t ->
        t.group = "Documentation"
        t.description = "Publish the ${namePart} website"
        t.dependsOn "build${namePart}Website"
        t.dependsOn ":credential-store:build"
        t.doFirst {
            if (publishUrl == null) {
                throw new RuntimeException(
                    "Can't publish ${namePartLowercase} website because ${publishUrlProperty} is not set"
                )
            }

            final Task cleanTask = project.tasks["clean${namePart}Website"]
            if (!gradle.taskGraph.hasTask(cleanTask) || !cleanTask.state.executed) {
                throw new RuntimeException("Must use ${cleanTask.name} before ${t.name}")
            }
        }
        t.doLast {
            if (project.getHasUncommittedChanges()) {
                throw new RuntimeException("Cannot publish website with uncommitted changes in main repo.")
            }
            if (project.getHasNonPublicParent(project.projectDir)) {
                throw new RuntimeException("Cannot publish website from non-public parent revision.")
            }
            if (closed_local) {
                if (project.hgLocalDocVersion.endsWith('+')) {
                    throw new RuntimeException(
                        "Cannot publish local website with uncommitted changes in local repo."
                    )
                }
                if (project.getHasNonPublicParent(new File("${WEBSITE_DIR}/local"))) {
                    throw new RuntimeException(
                        "Cannot publish local website from non-public parent revision of local repo."
                    )
                }
            }

            final String username = (
                project.hasProperty(publishUsernameProperty)
                ? project.property(publishUsernameProperty)
                : System.getProperty("user.name").toLowerCase()
            )
            final File credStoreExe =
                new File(rootProject.projectDir, "/credential-store/Release/credential-store.exe")
            OutputStream credentialStoreOutput = new ByteArrayOutputStream()
            project.exec { ExecSpec spec ->
                spec.setIgnoreExitValue true
                spec.commandLine credStoreExe, "Intrepid - Domain Credentials"
                spec.setStandardOutput credentialStoreOutput
            }
            final String password = credentialStoreOutput.toString().split("&&&")[1]
            println "Publishing to ${publishUrl} ..."
            final WagonPublisher publisher = new WagonPublisher(project.logger, publishUrl, username, password)
            final File dirToPublish = new File(websiteOutputDir)
            ConfigurableFileTree filesToPublish = project.fileTree(dirToPublish)
            publisher.publish(filesToPublish, dirToPublish)
            println "Published to ${publishUrl}"

            // Tag the repo
            final String tagPrefix = 'T' + (closed_local ? 'L' : 'P') + 'W'
            final String tag = "${tagPrefix}_${project.hgVersion}"
            project.exec {
                workingDir "${WEBSITE_DIR}"
                commandLine 'hg.exe', 'tag', '-f', '-m', "${t.name} ${tag}", tag
            }
            println "Tagged public repo; now push the tag."
        }
    }
}

tasks['publishLocalWebsite'].doLast { Task t ->
    // Tag the local repo with a cross-ref to the public one.
    project.exec {
        workingDir Paths.get("${WEBSITE_DIR}/local").toRealPath().toFile()
        commandLine 'hg.exe', 'tag',
            '-f',
            '-m', "${t.name} from holy-gradle-plugins ${project.hgVersion} and this local repo at ${hgLocalDocVersion}",
            "TLW_${project.hgVersion}_local_${hgLocalDocVersion}"
    }
    println "Tagged local repo; now push the tag."
}

gradle.taskGraph.whenReady {
    // If we're publishing, force user to clean and rebuild the website, so that the rev info in the
    // footer is correct.  (We can't just do "publishTask.dependsOn cleanTask" because the graph is
    // already fixed at this point.)
    for (local in [false, true]) {
        final String namePart = local ? "Local" : "Public"
        final Task publishTask = project.tasks["publish${namePart}Website"]
        final Task cleanTask = project.tasks["clean${namePart}Website"]
        if (gradle.taskGraph.hasTask(publishTask) && !gradle.taskGraph.hasTask(cleanTask)) {
            throw new RuntimeException("Must use ${cleanTask.name} before ${publishTask.name}")
        }
    }
}