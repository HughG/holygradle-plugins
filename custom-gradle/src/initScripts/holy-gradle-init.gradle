class HolyGradlePlugins {
    def buildscript
    def project
    def usages = [:]
    
    HolyGradlePlugins(buildscript, project) {
        this.buildscript = buildscript
        this.project = project
        if (project.ext.holyGradlePluginsRepository != null) {
            buildscript.repositories {
                ivy { url project.ext.holyGradlePluginsRepository }
            }
        }
        if (project.ext.holyGradleRemoteRepository != null) {
            buildscript.repositories {
                maven { url project.ext.holyGradleRemoteRepository }
            }
        }

        // By default, set the resolution strategy for buildscript dependencies
        // such that those specified with dynamic version nos (e.g. "1.0.+") are cached for 1 hour
        buildscript.configurations.all {
            resolutionStrategy {
                cacheChangingModulesFor 1, 'seconds'
                cacheDynamicVersionsFor 1, 'hours'
            }
        }
    }
    
    def use(String plugin_version) {
        String group = "holygradle"
        String plugin = null
        String version = null
        def error = "Invalid format for 'gplugins.use'. The parameter should be in the form '<module>:<version>'."
        if (plugin_version.contains(":")) {
            def split = plugin_version.split(":")
            if (split.size() == 2) {
                plugin = split[0]
                version = split[1]
            } else if (split.size() == 3) {
                group = split[0]
                plugin = split[1]
                version = split[2]
            } else {
                throw new RuntimeException(error)
            }
        } else {
            throw new RuntimeException(error)
        }
        useInternal(group, plugin, version)
    }
    
    public void use(String plugin, String version) {
        useInternal "holygradle", plugin, version
    }
    
    private void useInternal(String group, String plugin, String version) {
        String pluginFullName = null
        if (plugin.endsWith("-plugin")) {
            pluginFullName = plugin
            plugin = plugin - "-plugin"
        } else {
            pluginFullName = "${plugin}-plugin"
        }
        
        boolean usingSnapshots = false
        if (version.endsWith("-SNAPSHOT")) {
            println "Detected a changing (e.g. under development) module due to -SNAPSHOT in version: $plugin $version"            
            usingSnapshots = true
        }
        if (project.hasProperty("holyGradlePluginsSnapshots") && project.ext.holyGradlePluginsSnapshots != null) {
            version = "${project.ext.holyGradlePluginsSnapshots}-SNAPSHOT"
            usingSnapshots = true
        }
        if (usingSnapshots) {
            buildscript.dependencies {
                classpath("${group}:${pluginFullName}:${version}") { changing = true }
            }
        } else {
            buildscript.dependencies {
                classpath "${group}:${pluginFullName}:${version}"
            }
        }
        usages[plugin] = version
    }
    
    public void apply() {
        // Schedule 'user.gradle' files to be loaded first thing after the projects are evaluated.
        project.gradle.projectsEvaluated {
            def userScript = 'user.gradle'
            def userScriptFile = new File(project.projectDir, userScript)
            if (userScriptFile.exists()) {
                project.apply from: userScriptFile.name
            } else if (project.buildFile != null) {
                def userBuildScript = project.buildFile.name.replace(".gradle", ".${userScript}")
                userScriptFile = new File(project.projectDir, userBuildScript)
                if (userScriptFile.exists()) {
                    project.apply from: userScriptFile.name
                }
            }
        }
        
        usages.each { name, version ->
            project.apply plugin: name
        }
    }  
}

allprojects {
    project.ext.initScriptVersion = "[[INIT_SCRIPT_VERSION]]"
    
    def defaultPluginsRepo = "http://[[ARTIFACTORY_SERVER]]/artifactory/plugins-release/"
    def defaultRemoteRepo = "http://[[ARTIFACTORY_SERVER]]/artifactory/remote-repos/"
    
    // Check if we should override use of repositories based on presence of 'local_artifacts' folder.
    boolean usingLocalArtifacts = false
    def localArtifactsFile = new File(project.rootProject.projectDir, "local_artifacts")
    if (project == project.rootProject) {
        if (localArtifactsFile.exists()) {
            usingLocalArtifacts = true
            
            println "="*75
            println "Detected '${localArtifactsFile.name}' directory. Overriding usage of non-local repositories..."
            println "="*75
        }
    } else {
        usingLocalArtifacts = project.rootProject.ext.usingLocalArtifacts
    }
    project.ext.usingLocalArtifacts = usingLocalArtifacts
    
    if (usingLocalArtifacts) {
        project.repositories.ivy {
            url new File(localArtifactsFile, "ivy").path
        }
    }
    
    // Configure holyGradlePluginsSnapshots
    def holyGradlePluginsSnapshotsValue = null
    if (project.hasProperty("holyGradlePluginsSnapshots")) {
        holyGradlePluginsSnapshotsValue = holyGradlePluginsSnapshots
    }
    project.ext.holyGradlePluginsSnapshots = holyGradlePluginsSnapshotsValue
    
    // Configure holyGradlePluginsRepository
    def pluginsRepo = defaultPluginsRepo
    if (usingLocalArtifacts) {
        pluginsRepo = new File(localArtifactsFile, "ivy").path
    }
    project.ext.holyGradlePluginsRepository = pluginsRepo
   
    // Configure holyGradleRemoteRepository
    def remoteRepo = defaultRemoteRepo
    if (usingLocalArtifacts) {
        remoteRepo = new File(localArtifactsFile, "maven").path
    }
    project.ext.holyGradleRemoteRepository = remoteRepo
    
    project.extensions.create('gplugins', HolyGradlePlugins, buildscript, project)
}

// Build scripts need to do the following:
/*
buildscript {
    gplugins.use "intrepid:3.0.6.+"
    gplugins.use "devenv:2.0.0.+"
}
gplugins.apply()
*/

// Unfortunately the plugin needs to be applied outside of the buildscript block. However, once
// this issue (http://issues.gradle.org/browse/GRADLE-2407) is fixed, we can tidy this up.