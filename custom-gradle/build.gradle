repositories {
    mavenCentral()
}

configurations {
    gradleApi
    gradleApi.extendsFrom groovy
    compile.extendsFrom gradleApi
}

dependencies {
    gradleApi gradleApi()
    groovy localGroovy()
}

String initScriptsPath = 'src/initScripts/'
String versionedInitScriptsPath = 'build/tmp/tempInitScripts/'
File f = new File(project.projectDir, versionedInitScriptsPath)
if (!f.exists()) {
    f.mkdir()
}

task createVersionedInitScript(type: Copy) {
    // We don't need a copy of either of these files, because we'll read the info from project
    // properties.  But these files will have changed if those property values changed since the
    // last time this task ran, so we use them to cause this task to re-run.
    from rootProject.setHgVersionInfo.outputs.files
    from rootProject.setPublishVersion.outputs.files

    // Depend on root properties file, as the substition values come from it (unless overridden by "-P").
    from new File(rootProject.projectDir, "gradle.properties")

    from initScriptsPath
    into versionedInitScriptsPath
    filter { String line -> (line =~ /\[\[INIT_SCRIPT_SOURCE_VERSION\]\]/).replaceFirst(rootProject.hgVersionInfo) }
    filter { String line -> (line =~ /\[\[INIT_SCRIPT_VERSION\]\]/).replaceFirst(project.version) }
}

task latestInitScript(type: Copy) {
    from createVersionedInitScript.outputs.files
    into 'build/tmp/latestInitScript'
}

task customDistribution(type: Zip) {
    dependsOn latestInitScript
    group = "Main"
    description = 'Creates a custom Gradle distribution containing the custom plugins'
    // Give this distribution a name that indicates that it is not the standard distribution
    baseName = rootProject.CUSTOM_GRADLE_BASE_NAME
    into(rootProject.CUSTOM_GRADLE_BASE_NAME) {
        into('init.d') { 
            from createVersionedInitScript.outputs.files
            exclude "*- Copy.gradle"
            exclude "*.bak"
        }
        into('custom') { 
            from 'src/custom'
        }
        from gradle.gradleHomeDir
    }
    doLast {
        println "gradle.gradleHomeDir: " + gradle.gradleHomeDir
        File temp = new File(project.projectDir, versionedInitScriptsPath)
        for (tempFile in temp.listFiles()) {
            tempFile.delete()
        }
    }
}

artifacts {
    compile customDistribution
}

project.publishTasks.each { Upload it ->
    it.configuration = configurations.compile
}
