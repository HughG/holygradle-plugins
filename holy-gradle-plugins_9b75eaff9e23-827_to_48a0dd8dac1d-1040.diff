diff -r 9b75eaff9e23 -r 48a0dd8dac1d .hgignore
--- a/.hgignore	Sat Jun 10 22:29:31 2017 +0100
+++ b/.hgignore	Fri May 03 13:55:15 2019 +0100
@@ -5,6 +5,7 @@
 *.suo
 *.vcxproj.user
 # Generated
+buildSrc/gradle.properties
 credential-store/project_version_info.h
 credential-store/release_version_info.h
 custom-gradle-core-plugin/src/main/resources/holygradle/gradlew.bat
@@ -22,6 +23,7 @@
 distributionUrlBase.txt
 credential-store.exe
 *-subprojects.txt
+*/.restart
 syntax: regexp
 # Ignore any files which may contain company-specific information.
 ^gradle*.properties
@@ -35,33 +37,48 @@
 (^|/).gradle/
 (^|/)build/
 ^classes/
+# Holy Gradle
 (^|^wrapper-starter-kit/|^https-setup-kit/)gradle/(certs|cacerts|cacerts.import.log)
 # IntelliJ IDEA
-.idea/workspace.xml
-.idea/tasks.xml
+^\.idea/(tasks|modules|workspace).xml
+^\.idea/(libraries|modules)/
 # Generated doc
 ^doc/website/(raw-html|output)(-local)?/
 ^doc/website/local/
+# Website examples
+^doc/website/files/examples/multi-project/(\.gradle|gradle|dep)/
+^doc/website/files/examples/multi-project/gw.bat
+^doc/website/files/examples/multi-project/([^/]+/|)(\.gradle|gradle|dep)/
+^doc/website/files/examples/multi-project/[^/]+/userHome/
 # Other
+^[^/]+/out/
 ^[^/]+/src/test/groovy/holygradle/.*/settings.gradle
 ^credential-store/_ReSharper.credential-store/
-^credential-store/(Debug|Release)
+^credential-store/(Debug|Release)/
+^credential-store/.vs/
 ^ivy\.xml
 ^(wrapper-starter|https-setup)-kit/gradle/init.d
+^wrapper-starter-kit/gradle/distributionPath\.txt
 ^wrapper-starter-kit/newWrapper/(gw|gradlew)(\.bat)?
 ^wrapper-starter-kit/newWrapper/gradle
 ^https-setup-kit/plainWrapper/(gw|gradlew)(\.bat)?
 ^https-setup-kit/plainWrapper/gradle
-^intrepid-plugin/src/test/groovy/holygradle/SourceControlRepositoriesTest
-^intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTest
+^custom-gradle-core-plugin/src/test/groovy/holygradle/io/(Symlink|Junction)Test/non_empty_dir/
+^intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositories(|Svn|Hg|Git)Test
+^intrepid-plugin/src/test/groovy/holygradle/scm/(Hg|Git)DependencyTest
 ^intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactsIntegrationTest/projectB/(build_info|packages)/
 ^intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactBuildScriptHandlerIntegrationTest/[^/]+/build_info/.*
 ^intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesTest/unpacking_modules_to_same_location/extlib/
-^intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/conflicting_modules2/extlib.*/.*
+^intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/.*/extlib.*/.*
 ^intrepid-plugin/src/test/groovy/holygradle/dependencies/CollectDependenciesIntegrationTest/[^/]+/userHome/.*
+^intrepid-plugin/src/test/groovy/holygradle/dependencies/CollectDependenciesIntegrationTest/[^/]+/(gradle|build_info|local_artifacts)/
+^intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/source/
+^intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/project[A-Z](|source)/
 ^intrepid-plugin/src/test/groovy/holygradle/dependencies/(Collect|Zip)DependenciesIntegrationTest/[^/]+/((gradle|build_info)/|local_artifacts|.*build\.gradle)
 ^intrepid-plugin/src/test/groovy/holygradle/source_dependencies/CopyArtifactsIntegrationTest/copyPackedDependencies/blah/
 ^intrepid-plugin/src/test/groovy/holygradle/unpacking/PackedDependenciesStateHandlerIntegrationTest/[^/]+/[^/]+-?(lib|framework)/
+^intrepid-plugin/src/test/groovy/holygradle/unpacking/SpeedyUnpackManyTaskIntegrationTest/unpackLongFileName/long-name-lib/
+^intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/project[A-Z]/
 ^utils/artifactory-plugins/localConf/
 ^utils/versionListChecker/gradle
 ^utils/versionListChecker/gw.bat
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .hgtags
--- a/.hgtags	Sat Jun 10 22:29:31 2017 +0100
+++ b/.hgtags	Fri May 03 13:55:15 2019 +0100
@@ -77,4 +77,30 @@
 86d77773bae07c1dd2c894fef157f1138764c90f TPW_86d77773bae0
 3e6fe3d1f43248a8e24db4111b7463cc680d3cea TRP_7-9-1
 c3d9c3bfe9e59c5a4edcb15f265f444b87438226 TLW_c3d9c3bfe9e5
+6de1381c9dba92d987efb9f3da38386776463980 TRP_7-9-2
+a9ca09bfff1ff00bdbbcf05d105d67ef65be0979 TLW_a9ca09bfff1f
+238dac7222d62b026286e93dd9dca25ab1c87afc TRP_7-10-0
+9f7c5d2fe375850c57f39fd8c0f1d861a9d0c0ac TLW_9f7c5d2fe375
+e31cb0f6176818849d6d4c75968fd0a561898fe6 TPW_e31cb0f61768
+d61afb3c0e6dc4bba7140a2f35f33443481f8161 TRP_7-10-1
+94a9b8ae44114f675977b278cdebfc5e729a8913 TLW_94a9b8ae4411
+bcbdabef989bacfa44565204dcf739d821ffcd37 TRP_7-10-2
+d51e2fb4c8a3d0659c54a9946c4c7ff52254de29 TLW_d51e2fb4c8a3
+62ee2a1a8eaf2dd69dc5d054c34809d78b8b0f5e TRP_7-10-3
+792be72589af994f9b30cd819fd74205c8009096 TLW_792be72589af
+4ec3faf09545b675d988f0ef960792433281c2aa TRC_7-11-0
+33428452419a66fc398c4ea827e600016b14e8af TRP_7-11-0
 9a64c2e3a70eb91066feafca8bc82a38dc603583 GR_4107_Upgrade_Gradle_working_1.12
+01356a342715cac0204ebf30ac384aa602a269fa TRP_7-12-0
+c07c6f87784cc9ecae9188e990df148f330284c3 TLW_c07c6f87784c
+42e14ffb96b69e1bb2c36d29a30f5d5477ebf25a TPW_42e14ffb96b6
+102187f17362b04bf119d58f6f07b2880157846a TRP_7-10-4
+7f04516078aa900c4a7552b2bd00975d7fd2a58e GR_6728
+13f535d081011c789e939f3fa0a18024fbfaaf77 TRP_7-12-1
+0fc9a7ba261c52d3fc035a279e310d4176753ad2 TRP_8-0-0
+7846555d3e4d973d185f02945ff240e025379b4c TRP_8-0-2
+95b3e42ab4a793925b789214d9b30797c2967179 TRP_9-0-0
+725fd30d3308f56e8f2c662cb2cd5688bae23cd3 TRP_10-0-0
+54c60140981709eb43874dc8d3706c81ccf38e3d TRP_10-0-1
+5b0334e595dd2241ecf7665b20d20a501e4774e0 TRP_10-0-2
+bce36ae8b624fd54da9dbd4bd61a026bdbc4ac8a TRP_10-0-3
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/codeStyles/Project.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/.idea/codeStyles/Project.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <XML>
+      <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
+    </XML>
+  </code_scheme>
+</component>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/compiler.xml
--- a/.idea/compiler.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/compiler.xml	Fri May 03 13:55:15 2019 +0100
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <option name="DEFAULT_COMPILER" value="Javac" />
-    <resourceExtensions />
     <wildcardResourcePatterns>
       <entry name="?*.properties" />
       <entry name="?*.xml" />
@@ -15,32 +13,27 @@
       <entry name="?*.tld" />
       <entry name="?*.ftl" />
     </wildcardResourcePatterns>
-    <annotationProcessing>
-      <profile default="true" name="Default" enabled="false">
-        <processorPath useClasspath="true" />
-      </profile>
-    </annotationProcessing>
     <bytecodeTargetLevel>
-      <module name="artifactory-manager-plugin_main" target="1.7" />
-      <module name="artifactory-manager-plugin_test" target="1.7" />
-      <module name="buildSrc_main" target="1.7" />
-      <module name="buildSrc_test" target="1.7" />
-      <module name="custom-gradle-core-plugin_main" target="1.7" />
-      <module name="custom-gradle-core-plugin_test" target="1.7" />
-      <module name="devenv-plugin_main" target="1.7" />
-      <module name="devenv-plugin_test" target="1.7" />
-      <module name="holy-gradle-plugins_main" target="1.7" />
-      <module name="holy-gradle-plugins_test" target="1.7" />
-      <module name="integration_main" target="1.7" />
-      <module name="integration_test" target="1.7" />
-      <module name="intrepid-plugin_main" target="1.7" />
-      <module name="intrepid-plugin_test" target="1.7" />
-      <module name="my-credentials-plugin_main" target="1.7" />
-      <module name="my-credentials-plugin_test" target="1.7" />
-      <module name="stamper-plugin_main" target="1.7" />
-      <module name="stamper-plugin_test" target="1.7" />
-      <module name="unit-test-plugin_main" target="1.7" />
-      <module name="unit-test-plugin_test" target="1.7" />
+      <module name="artifactory-manager-plugin_main" target="1.8" />
+      <module name="artifactory-manager-plugin_test" target="1.8" />
+      <module name="buildSrc_main" target="1.8" />
+      <module name="buildSrc_test" target="1.8" />
+      <module name="custom-gradle-core-plugin_main" target="1.8" />
+      <module name="custom-gradle-core-plugin_test" target="1.8" />
+      <module name="devenv-plugin_main" target="1.8" />
+      <module name="devenv-plugin_test" target="1.8" />
+      <module name="holy-gradle-plugins_main" target="1.8" />
+      <module name="holy-gradle-plugins_test" target="1.8" />
+      <module name="integration_main" target="1.8" />
+      <module name="integration_test" target="1.8" />
+      <module name="intrepid-plugin_main" target="1.8" />
+      <module name="intrepid-plugin_test" target="1.8" />
+      <module name="my-credentials-plugin_main" target="1.8" />
+      <module name="my-credentials-plugin_test" target="1.8" />
+      <module name="stamper-plugin_main" target="1.8" />
+      <module name="stamper-plugin_test" target="1.8" />
+      <module name="unit-test-plugin_main" target="1.8" />
+      <module name="unit-test-plugin_test" target="1.8" />
     </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/dynamic.xml
--- a/.idea/dynamic.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/dynamic.xml	Fri May 03 13:55:15 2019 +0100
@@ -51,6 +51,14 @@
               <option name="myProperties">
                 <set>
                   <DPropertyElement>
+                    <option name="name" value="instructions" />
+                    <option name="static" value="false" />
+                    <option name="type" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.credentials.InstructionsHandler&gt;" />
+                    <option name="myType" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.credentials.InstructionsHandler&gt;" />
+                    <option name="myStatic" value="false" />
+                    <option name="myName" value="instructions" />
+                  </DPropertyElement>
+                  <DPropertyElement>
                     <option name="name" value="extensions" />
                     <option name="static" value="false" />
                     <option name="type" value="org.gradle.api.plugins.ExtensionContainer" />
@@ -87,6 +95,14 @@
                     <option name="myName" value="buildScriptDependencies" />
                   </DPropertyElement>
                   <DPropertyElement>
+                    <option name="name" value="dependenciesState" />
+                    <option name="static" value="false" />
+                    <option name="type" value="holygradle.dependencies.DependenciesStateHandler" />
+                    <option name="myType" value="holygradle.dependencies.DependenciesStateHandler" />
+                    <option name="myStatic" value="false" />
+                    <option name="myName" value="dependenciesState" />
+                  </DPropertyElement>
+                  <DPropertyElement>
                     <option name="name" value="hgVersionInfo" />
                     <option name="static" value="false" />
                     <option name="type" value="java.lang.String" />
@@ -103,14 +119,6 @@
                     <option name="myName" value="hgVersionInfoFile" />
                   </DPropertyElement>
                   <DPropertyElement>
-                    <option name="name" value="packedDependencies" />
-                    <option name="static" value="false" />
-                    <option name="type" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.PackedDependencyHandler&gt;" />
-                    <option name="myType" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.PackedDependencyHandler&gt;" />
-                    <option name="myStatic" value="false" />
-                    <option name="myName" value="packedDependencies" />
-                  </DPropertyElement>
-                  <DPropertyElement>
                     <option name="name" value="ext" />
                     <option name="static" value="false" />
                     <option name="type" value="org.gradle.api.plugins.ExtraPropertiesExtension" />
@@ -127,6 +135,14 @@
                     <option name="myName" value="my" />
                   </DPropertyElement>
                   <DPropertyElement>
+                    <option name="name" value="usingLocalArtifacts" />
+                    <option name="static" value="false" />
+                    <option name="type" value="boolean" />
+                    <option name="myType" value="boolean" />
+                    <option name="myStatic" value="false" />
+                    <option name="myName" value="usingLocalArtifacts" />
+                  </DPropertyElement>
+                  <DPropertyElement>
                     <option name="name" value="packedDependenciesSettings" />
                     <option name="static" value="false" />
                     <option name="type" value="holygradle.dependencies.PackedDependencySettingsHandler" />
@@ -143,6 +159,14 @@
                     <option name="myName" value="packedDependenciesState" />
                   </DPropertyElement>
                   <DPropertyElement>
+                    <option name="name" value="packedDependencies" />
+                    <option name="static" value="false" />
+                    <option name="type" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.PackedDependencyHandler&gt;" />
+                    <option name="myType" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.PackedDependencyHandler&gt;" />
+                    <option name="myStatic" value="false" />
+                    <option name="myName" value="packedDependencies" />
+                  </DPropertyElement>
+                  <DPropertyElement>
                     <option name="name" value="publishPackages" />
                     <option name="static" value="false" />
                     <option name="type" value="holygradle.publishing.PublishPackagesExtension" />
@@ -166,6 +190,14 @@
                     <option name="myStatic" value="false" />
                     <option name="myName" value="sourceDependencies" />
                   </DPropertyElement>
+                  <DPropertyElement>
+                    <option name="name" value="sourceOverrides" />
+                    <option name="static" value="false" />
+                    <option name="type" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.SourceOverrideHandler&gt;" />
+                    <option name="myType" value="org.gradle.api.NamedDomainObjectContainer&lt;holygradle.dependencies.SourceOverrideHandler&gt;" />
+                    <option name="myStatic" value="false" />
+                    <option name="myName" value="sourceOverrides" />
+                  </DPropertyElement>
                 </set>
               </option>
             </DClassElement>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/gradle.xml
--- a/.idea/gradle.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/gradle.xml	Fri May 03 13:55:15 2019 +0100
@@ -1,13 +1,13 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="GradleSettings">
-    <option name="linkedExternalProjectsSettings">
-      <GradleProjectSettings>
-        <option name="distributionType" value="DEFAULT_WRAPPED" />
-        <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="modules">
-          <set>
-            <option value="$PROJECT_DIR$" />
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/artifactory-manager-plugin" />
             <option value="$PROJECT_DIR$/buildSrc" />
             <option value="$PROJECT_DIR$/credential-store" />
@@ -21,7 +21,23 @@
           </set>
         </option>
         <option name="useAutoImport" value="true" />
-      </GradleProjectSettings>
-    </option>
-  </component>
+        <option name="myModules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/artifactory-manager-plugin" />
+            <option value="$PROJECT_DIR$/buildSrc" />
+            <option value="$PROJECT_DIR$/credential-store" />
+            <option value="$PROJECT_DIR$/custom-gradle-core-plugin" />
+            <option value="$PROJECT_DIR$/devenv-plugin" />
+            <option value="$PROJECT_DIR$/integration" />
+            <option value="$PROJECT_DIR$/intrepid-plugin" />
+            <option value="$PROJECT_DIR$/my-credentials-plugin" />
+            <option value="$PROJECT_DIR$/stamper-plugin" />
+            <option value="$PROJECT_DIR$/unit-test-plugin" />
+          </set>
+        </option>
+        <option name="useAutoImport" value="true" />
+      </GradleProjectSettings>
+    </option>
+  </component>
 </project>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/inspectionProfiles/Project_Default.xml	Fri May 03 13:55:15 2019 +0100
@@ -8,6 +8,7 @@
     <inspection_tool class="GrPackage" enabled="true" level="WARNING" enabled_by_default="true">
       <option name="myCheckScripts" value="false" />
     </inspection_tool>
+    <inspection_tool class="GrUnnecessaryPublicModifier" enabled="true" level="VERY WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="GrUnresolvedAccess" enabled="true" level="WARNING" enabled_by_default="true" />
     <inspection_tool class="GroovyUnresolvedAccess" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="LoggerInitializedWithForeignClass" enabled="false" level="WARNING" enabled_by_default="false">
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/libraries/Gradle__xerces_xercesImpl_2_9_1.xml
--- a/.idea/libraries/Gradle__xerces_xercesImpl_2_9_1.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/libraries/Gradle__xerces_xercesImpl_2_9_1.xml	Fri May 03 13:55:15 2019 +0100
@@ -4,6 +4,8 @@
       <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/xerces/xercesImpl/2.9.1/7bc7e49ddfe4fb5f193ed37ecc96c12292c8ceb6/xercesImpl-2.9.1.jar!/" />
     </CLASSES>
     <JAVADOC />
-    <SOURCES />
+    <SOURCES>
+      <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/xerces/xercesImpl/2.9.1/e30837a0843d5ea477b9334efdb730e66ffbd253/xercesImpl-2.9.1-sources.jar!/" />
+    </SOURCES>
   </library>
 </component>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/misc.xml
--- a/.idea/misc.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/misc.xml	Fri May 03 13:55:15 2019 +0100
@@ -1,13 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="EntryPointsManager">
-    <entry_points version="2.0" />
-  </component>
   <component name="ProjectResources">
     <resource url="http://ant.apache.org/ivy/maven" location="$APPLICATION_HOME_DIR$/plugins/maven/lib/maven.jar!/schemas/maven-4.0.0.xsd" />
     <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" assert-keyword="true" jdk-15="true" project-jdk-name="1.7" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/classes" />
   </component>
 </project>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules.xml
--- a/.idea/modules.xml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin.iml" group="artifactory-manager-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_main.iml" group="artifactory-manager-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_test.iml" group="artifactory-manager-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/buildSrc.iml" filepath="$PROJECT_DIR$/.idea/modules/buildSrc.iml" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/buildSrc_main.iml" filepath="$PROJECT_DIR$/.idea/modules/buildSrc_main.iml" group="buildSrc" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/buildSrc_test.iml" filepath="$PROJECT_DIR$/.idea/modules/buildSrc_test.iml" group="buildSrc" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/credential-store/credential-store.iml" filepath="$PROJECT_DIR$/.idea/modules/credential-store/credential-store.iml" group="credential-store" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin.iml" group="custom-gradle-core-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_main.iml" group="custom-gradle-core-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_test.iml" group="custom-gradle-core-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin.iml" group="devenv-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin_main.iml" group="devenv-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/devenv-plugin/devenv-plugin_test.iml" group="devenv-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/holy-gradle-plugins.iml" filepath="$PROJECT_DIR$/.idea/modules/holy-gradle-plugins.iml" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/holy-gradle-plugins_main.iml" filepath="$PROJECT_DIR$/.idea/modules/holy-gradle-plugins_main.iml" group="holy-gradle-plugins" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/holy-gradle-plugins_test.iml" filepath="$PROJECT_DIR$/.idea/modules/holy-gradle-plugins_test.iml" group="holy-gradle-plugins" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/integration/integration.iml" filepath="$PROJECT_DIR$/.idea/modules/integration/integration.iml" group="integration" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/integration/integration_main.iml" filepath="$PROJECT_DIR$/.idea/modules/integration/integration_main.iml" group="integration" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/integration/integration_test.iml" filepath="$PROJECT_DIR$/.idea/modules/integration/integration_test.iml" group="integration" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin.iml" group="intrepid-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin_main.iml" group="intrepid-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/intrepid-plugin/intrepid-plugin_test.iml" group="intrepid-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin.iml" group="my-credentials-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin_main.iml" group="my-credentials-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/my-credentials-plugin/my-credentials-plugin_test.iml" group="my-credentials-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin.iml" group="stamper-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin_main.iml" group="stamper-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/stamper-plugin/stamper-plugin_test.iml" group="stamper-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin.iml" filepath="$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin.iml" group="unit-test-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin_main.iml" filepath="$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin_main.iml" group="unit-test-plugin" />
-      <module fileurl="file://$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin_test.iml" filepath="$PROJECT_DIR$/.idea/modules/unit-test-plugin/unit-test-plugin_test.iml" group="unit-test-plugin" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/artifactory-manager-plugin/artifactory-manager-plugin.iml
--- a/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":artifactory-manager-plugin" external.linked.project.path="$MODULE_DIR$/../../../artifactory-manager-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../artifactory-manager-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_main.iml
--- a/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,66 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":artifactory-manager-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../artifactory-manager-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_test.iml
--- a/.idea/modules/artifactory-manager-plugin/artifactory-manager-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":artifactory-manager-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../artifactory-manager-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../artifactory-manager-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="artifactory-manager-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="library" name="Gradle: org.mockito:mockito-all:1.10.19" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="artifactory-manager-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/buildSrc.iml
--- a/.idea/modules/buildSrc.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="buildSrc" external.linked.project.path="$MODULE_DIR$/../../buildSrc" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../buildSrc">
-      <excludeFolder url="file://$MODULE_DIR$/../../buildSrc/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../buildSrc/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/buildSrc_main.iml
--- a/.idea/modules/buildSrc_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,147 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="buildSrc:main" external.linked.project.path="$MODULE_DIR$/../../buildSrc" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.type="sourceSet" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../buildSrc/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../buildSrc/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.3/generated-gradle-jars/gradle-api-3.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.3-bin/64bhckfm0iuu9gap9hg3r7ev2/gradle-3.3/lib/groovy-all-2.4.7.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.3-bin/64bhckfm0iuu9gap9hg3r7ev2/gradle-3.3/lib/gradle-installation-beacon-3.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.maven.wagon:wagon-provider-api:2.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-provider-api/2.4/e40429d9dd849c5fe0bdf97062b1d9358d99826d/wagon-provider-api-2.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-provider-api/2.4/35d0c13b57bf1fb96e9a068149383d5c69ae8df9/wagon-provider-api-2.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.maven.wagon:wagon-file:2.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-file/2.4/eaf2ae22d0305939fc55e919138fa199c45075fe/wagon-file-2.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-file/2.4/9f928ba474a1ec297eae383e7c1df6b73f07a2da/wagon-file-2.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-container-default:1.5.5">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-container-default/1.5.5/265fa2851d31c2e2177859a518987595efe146b/plexus-container-default-1.5.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-container-default/1.5.5/5a8d85ede02b1a32f79f8b17f0fe2077d952de2d/plexus-container-default-1.5.5-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-utils:3.0.8">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-utils/3.0.8/faba5d28a07fcde50c8c26d3f002774acf11843e/plexus-utils-3.0.8.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-utils/3.0.8/3940d1ca998744cca98da76c3d01974c1c54149f/plexus-utils-3.0.8-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-classworlds:2.2.2">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-classworlds/2.2.2/3a2bad2b58c1ca765d3f471cea8c1655d70fdfd9/plexus-classworlds-2.2.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-classworlds/2.2.2/b5e33106279bbc09be9078890478112ebe3623ef/plexus-classworlds-2.2.2-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.xbean:xbean-reflect:3.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.xbean/xbean-reflect/3.4/26fd55dceb037f4789b399b22874d74f4d2db66f/xbean-reflect-3.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.xbean/xbean-reflect/3.4/77c8a006107cb5520096d629aedd0ff733e11fe1/xbean-reflect-3.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: com.google.collections:google-collections:1.0">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/com.google.collections/google-collections/1.0/9ffe71ac6dcab6bc03ea13f5c2e7b2804e69b357/google-collections-1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/com.google.collections/google-collections/1.0/8283dd0edd369f2cb594cd3f2433c498801bcb09/google-collections-1.0-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: junit:junit:3.8.2">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/junit/junit/3.8.2/7e4cde26b53a9a0e3fe5b00d1dbbc7cc1d46060/junit-3.8.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/junit/junit/3.8.2/aaa058540bf14ad600dd784de979c46c721ccbbe/junit-3.8.2-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: log4j:log4j:1.2.12">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/log4j/log4j/1.2.12/57b8740427ee6d7b0b60792751356cad17dc0d9/log4j-1.2.12.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: commons-logging:commons-logging-api:1.1">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/commons-logging/commons-logging-api/1.1/7d4cf5231d46c8524f9b9ed75bb2d1c69ab93322/commons-logging-api-1.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/buildSrc_test.iml
--- a/.idea/modules/buildSrc_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,149 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="buildSrc:test" external.linked.project.path="$MODULE_DIR$/../../buildSrc" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.type="sourceSet" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../buildSrc/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../buildSrc/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../buildSrc/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="buildSrc_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.3/generated-gradle-jars/gradle-api-3.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.3-bin/64bhckfm0iuu9gap9hg3r7ev2/gradle-3.3/lib/gradle-installation-beacon-3.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.3-bin/64bhckfm0iuu9gap9hg3r7ev2/gradle-3.3/lib/groovy-all-2.4.7.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.maven.wagon:wagon-provider-api:2.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-provider-api/2.4/e40429d9dd849c5fe0bdf97062b1d9358d99826d/wagon-provider-api-2.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-provider-api/2.4/35d0c13b57bf1fb96e9a068149383d5c69ae8df9/wagon-provider-api-2.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.maven.wagon:wagon-file:2.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-file/2.4/eaf2ae22d0305939fc55e919138fa199c45075fe/wagon-file-2.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.maven.wagon/wagon-file/2.4/9f928ba474a1ec297eae383e7c1df6b73f07a2da/wagon-file-2.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-container-default:1.5.5">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-container-default/1.5.5/265fa2851d31c2e2177859a518987595efe146b/plexus-container-default-1.5.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-container-default/1.5.5/5a8d85ede02b1a32f79f8b17f0fe2077d952de2d/plexus-container-default-1.5.5-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-utils:3.0.8">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-utils/3.0.8/faba5d28a07fcde50c8c26d3f002774acf11843e/plexus-utils-3.0.8.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-utils/3.0.8/3940d1ca998744cca98da76c3d01974c1c54149f/plexus-utils-3.0.8-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.codehaus.plexus:plexus-classworlds:2.2.2">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-classworlds/2.2.2/3a2bad2b58c1ca765d3f471cea8c1655d70fdfd9/plexus-classworlds-2.2.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.codehaus.plexus/plexus-classworlds/2.2.2/b5e33106279bbc09be9078890478112ebe3623ef/plexus-classworlds-2.2.2-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: org.apache.xbean:xbean-reflect:3.4">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.xbean/xbean-reflect/3.4/26fd55dceb037f4789b399b22874d74f4d2db66f/xbean-reflect-3.4.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/org.apache.xbean/xbean-reflect/3.4/77c8a006107cb5520096d629aedd0ff733e11fe1/xbean-reflect-3.4-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: com.google.collections:google-collections:1.0">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/com.google.collections/google-collections/1.0/9ffe71ac6dcab6bc03ea13f5c2e7b2804e69b357/google-collections-1.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/com.google.collections/google-collections/1.0/8283dd0edd369f2cb594cd3f2433c498801bcb09/google-collections-1.0-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: junit:junit:3.8.2">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/junit/junit/3.8.2/7e4cde26b53a9a0e3fe5b00d1dbbc7cc1d46060/junit-3.8.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/junit/junit/3.8.2/aaa058540bf14ad600dd784de979c46c721ccbbe/junit-3.8.2-sources.jar!/" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: log4j:log4j:1.2.12">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/log4j/log4j/1.2.12/57b8740427ee6d7b0b60792751356cad17dc0d9/log4j-1.2.12.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="Gradle: commons-logging:commons-logging-api:1.1">
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/modules-2/files-2.1/commons-logging/commons-logging-api/1.1/7d4cf5231d46c8524f9b9ed75bb2d1c69ab93322/commons-logging-api-1.1.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-  </component>
-  <component name="TestModuleProperties" production-module="buildSrc_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/credential-store/credential-store.iml
--- a/.idea/modules/credential-store/credential-store.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":credential-store" external.linked.project.path="$MODULE_DIR$/../../../credential-store" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../credential-store">
-      <excludeFolder url="file://$MODULE_DIR$/../../../credential-store/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../credential-store/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin.iml
--- a/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":custom-gradle-core-plugin" external.linked.project.path="$MODULE_DIR$/../../../custom-gradle-core-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_main.iml
--- a/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":custom-gradle-core-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../custom-gradle-core-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_test.iml
--- a/.idea/modules/custom-gradle-core-plugin/custom-gradle-core-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":custom-gradle-core-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../custom-gradle-core-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../custom-gradle-core-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="custom-gradle-core-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/devenv-plugin/devenv-plugin.iml
--- a/.idea/modules/devenv-plugin/devenv-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":devenv-plugin" external.linked.project.path="$MODULE_DIR$/../../../devenv-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../devenv-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../devenv-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../devenv-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/devenv-plugin/devenv-plugin_main.iml
--- a/.idea/modules/devenv-plugin/devenv-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":devenv-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../devenv-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../devenv-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../devenv-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="module" module-name="intrepid-plugin_main" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/devenv-plugin/devenv-plugin_test.iml
--- a/.idea/modules/devenv-plugin/devenv-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":devenv-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../devenv-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../devenv-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../devenv-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../devenv-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="intrepid-plugin_test" production-on-test="" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="devenv-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="module" module-name="intrepid-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="devenv-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/holy-gradle-plugins.iml
--- a/.idea/modules/holy-gradle-plugins.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="holy-gradle-plugins" external.linked.project.path="$MODULE_DIR$/../.." external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../..">
-      <excludeFolder url="file://$MODULE_DIR$/../../.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/holy-gradle-plugins_main.iml
--- a/.idea/modules/holy-gradle-plugins_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="holy-gradle-plugins:main" external.linked.project.path="$MODULE_DIR$/../.." external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/../../build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/holy-gradle-plugins_test.iml
--- a/.idea/modules/holy-gradle-plugins_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,16 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="holy-gradle-plugins:test" external.linked.project.path="$MODULE_DIR$/../.." external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
-    <output-test url="file://$MODULE_DIR$/../../build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="holy-gradle-plugins_main" />
-  </component>
-  <component name="TestModuleProperties" production-module="holy-gradle-plugins_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/integration/integration.iml
--- a/.idea/modules/integration/integration.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration" external.linked.project.path="$MODULE_DIR$/../../../integration" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../integration">
-      <excludeFolder url="file://$MODULE_DIR$/../../../integration/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../integration/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/integration/integration_main.iml
--- a/.idea/modules/integration/integration_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,66 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration:main" external.linked.project.path="$MODULE_DIR$/../../../integration" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../integration/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../integration/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/integration/integration_test.iml
--- a/.idea/modules/integration/integration_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,80 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration:test" external.linked.project.path="$MODULE_DIR$/../../../integration" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../integration/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../integration/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../integration/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="artifactory-manager-plugin_test" production-on-test="" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="intrepid-plugin_test" production-on-test="" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="unit-test-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="my-credentials-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="stamper-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="devenv-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="integration_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="integration_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/intrepid-plugin/intrepid-plugin.iml
--- a/.idea/modules/intrepid-plugin/intrepid-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":intrepid-plugin" external.linked.project.path="$MODULE_DIR$/../../../intrepid-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../intrepid-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/intrepid-plugin/intrepid-plugin_main.iml
--- a/.idea/modules/intrepid-plugin/intrepid-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,78 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":intrepid-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../intrepid-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../intrepid-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../intrepid-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/intrepid-plugin/intrepid-plugin_test.iml
--- a/.idea/modules/intrepid-plugin/intrepid-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":intrepid-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../intrepid-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../intrepid-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../intrepid-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../intrepid-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="intrepid-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="library" name="Gradle: net.lingala.zip4j:zip4j:1.3.2" level="project" />
-    <orderEntry type="library" name="Gradle: commons-io:commons-io:2.5" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="intrepid-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/my-credentials-plugin/my-credentials-plugin.iml
--- a/.idea/modules/my-credentials-plugin/my-credentials-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":my-credentials-plugin" external.linked.project.path="$MODULE_DIR$/../../../my-credentials-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../my-credentials-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/my-credentials-plugin/my-credentials-plugin_main.iml
--- a/.idea/modules/my-credentials-plugin/my-credentials-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":my-credentials-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../my-credentials-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../my-credentials-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/my-credentials-plugin/my-credentials-plugin_test.iml
--- a/.idea/modules/my-credentials-plugin/my-credentials-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":my-credentials-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../my-credentials-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../my-credentials-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../my-credentials-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="my-credentials-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="my-credentials-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/stamper-plugin/stamper-plugin.iml
--- a/.idea/modules/stamper-plugin/stamper-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":stamper-plugin" external.linked.project.path="$MODULE_DIR$/../../../stamper-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../stamper-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../stamper-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../stamper-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/stamper-plugin/stamper-plugin_main.iml
--- a/.idea/modules/stamper-plugin/stamper-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,54 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":stamper-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../stamper-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../stamper-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../stamper-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/stamper-plugin/stamper-plugin_test.iml
--- a/.idea/modules/stamper-plugin/stamper-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":stamper-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../stamper-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../stamper-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../stamper-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../stamper-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="stamper-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="stamper-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/unit-test-plugin/unit-test-plugin.iml
--- a/.idea/modules/unit-test-plugin/unit-test-plugin.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":unit-test-plugin" external.linked.project.path="$MODULE_DIR$/../../../unit-test-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../unit-test-plugin">
-      <excludeFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/unit-test-plugin/unit-test-plugin_main.iml
--- a/.idea/modules/unit-test-plugin/unit-test-plugin_main.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,80 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":unit-test-plugin:main" external.linked.project.path="$MODULE_DIR$/../../../unit-test-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output url="file://$MODULE_DIR$/../../../unit-test-plugin/build/classes/main" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../unit-test-plugin/src/main">
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/main/groovy" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/main/resources" type="java-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="module" module-name="intrepid-plugin_main" />
-    <orderEntry type="library" name="Gradle: commons-io:commons-io:2.5" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/modules/unit-test-plugin/unit-test-plugin_test.iml
--- a/.idea/modules/unit-test-plugin/unit-test-plugin_test.iml	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":unit-test-plugin:test" external.linked.project.path="$MODULE_DIR$/../../../unit-test-plugin" external.root.project.path="$MODULE_DIR$/../../.." external.system.id="GRADLE" external.system.module.group="holygradle" external.system.module.type="sourceSet" external.system.module.version="0.0-hughgSNAPSHOT-0" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7">
-    <output-test url="file://$MODULE_DIR$/../../../unit-test-plugin/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$/../../../unit-test-plugin/src/test">
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/test/groovy" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/../../../unit-test-plugin/src/test/resources" type="java-test-resource" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_test" production-on-test="" />
-    <orderEntry type="module" module-name="intrepid-plugin_test" production-on-test="" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/caches/3.5/generated-gradle-jars/gradle-api-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/groovy-all-2.4.10.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="unit-test-plugin_main" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="jar://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/lib/gradle-installation-beacon-3.5.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES>
-          <root url="file://$GRADLE_USER_HOME$/wrapper/dists/gradle-3.5-all/exhrs6ca08n232b14ue48lbye/gradle-3.5/src/installation-beacon" />
-        </SOURCES>
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../buildSrc/build/classes/main" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module" module-name="custom-gradle-core-plugin_main" />
-    <orderEntry type="module" module-name="intrepid-plugin_main" />
-    <orderEntry type="library" name="Gradle: commons-io:commons-io:2.5" level="project" />
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-library:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: junit:junit:4.12" level="project" />
-    <orderEntry type="library" name="Gradle: net.java.dev.jna:jna:3.2.7" level="project" />
-    <orderEntry type="library" name="Gradle: org.codehaus.groovy.modules.http-builder:http-builder:0.7.1" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.guava:guava:19.0" level="project" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../../credential-store/Release/credential-store.exe" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="Gradle: org.hamcrest:hamcrest-core:1.3" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpclient:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.json-lib:json-lib:jdk15:2.3" level="project" />
-    <orderEntry type="library" name="Gradle: net.sourceforge.nekohtml:nekohtml:1.9.16" level="project" />
-    <orderEntry type="library" name="Gradle: xml-resolver:xml-resolver:1.2" level="project" />
-    <orderEntry type="library" name="Gradle: org.apache.httpcomponents:httpcore:4.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-logging:commons-logging:1.1.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-codec:commons-codec:1.6" level="project" />
-    <orderEntry type="library" name="Gradle: commons-beanutils:commons-beanutils:1.8.0" level="project" />
-    <orderEntry type="library" name="Gradle: commons-collections:commons-collections:3.2.1" level="project" />
-    <orderEntry type="library" name="Gradle: commons-lang:commons-lang:2.4" level="project" />
-    <orderEntry type="library" name="Gradle: net.sf.ezmorph:ezmorph:1.0.6" level="project" />
-    <orderEntry type="library" name="Gradle: xerces:xercesImpl:2.9.1" level="project" />
-    <orderEntry type="library" name="Gradle: xml-apis:xml-apis:1.3.04" level="project" />
-  </component>
-  <component name="TestModuleProperties" production-module="unit-test-plugin_main" />
-</module>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d .idea/vcs.xml
--- a/.idea/vcs.xml	Sat Jun 10 22:29:31 2017 +0100
+++ b/.idea/vcs.xml	Fri May 03 13:55:15 2019 +0100
@@ -2,6 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="hg4idea" />
+    <mapping directory="$PROJECT_DIR$" vcs="hg4idea" />
   </component>
-</project>
-
+</project>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d build.gradle
--- a/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,13 +1,16 @@
 apply plugin: 'groovy'
 
-// Force-add a Mercurial client-side hook to avoid comitting anything with "banned" words.
-project.ext.HGRC = new File('.hg/hgrc')
-def ensureHgHook(String hookName, String hookText) {
+// Test comment
+
+// Force-add a Mercurial client-side hook to avoid committing anything with "banned" words.
+project.ext.HGRC = new File(project.rootDir, '.hg/hgrc')
+def ensureHgHook(String hookName, String hookComment, String hookText) {
     if (!HGRC.readLines().any { it.contains(hookName) }) {
         HGRC.withWriterAppend { BufferedWriter bw ->
             bw.withPrintWriter { PrintWriter pw ->
                 pw.println()
                 pw.println('[hooks]')
+                pw.println('# '+ hookComment)
                 pw.println(hookName + ' = ' + hookText)
             }
         }
@@ -17,6 +20,7 @@
     'if errorlevel 1 (exit /b 0) else (exit /b 1)'
 ensureHgHook(
     'pretxncommit.sanitise',
+    'If this fails, use "hg diff | ..." at the command line to find the problem; "export tip" is only right during commit.',
     'hg export tip | ' + findBannedWords
 )
 
@@ -39,6 +43,12 @@
             include "init.d/**"
         }
     }
+    copy {
+        into("${otherProjectDir}/gradle/wrapper")
+		from("${projectDir}/gradle/wrapper") {
+			include "gradle-wrapper.*"
+		}
+    }
 }
 
 // Force-copy LOCAL build bootstrap files to independent sub-projects, so they stay up to date.
@@ -48,7 +58,7 @@
 // task because they're not packed into the plugin, because they're site-local and private.
 ["https-setup-kit", "wrapper-starter-kit"].each {
     File otherProjectDir = new File(projectDir, it)
-    ["gradle/base-url-lookup.txt", "gradle/proxy-lookup.txt", "gradle/certs/**"].each { String copyPattern ->
+    ["gradle/wrapper/base-url-lookup.txt", "gradle/wrapper/proxy-lookup.txt", "gradle/wrapper/certs/**"].each { String copyPattern ->
         copy {
             into(otherProjectDir)
             from(projectDir) {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/build.gradle
--- a/buildSrc/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/buildSrc/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,19 +1,5 @@
 apply plugin: 'groovy'
 
-def javaVersion = System.getProperty('java.specification.version')
-if (javaVersion != '1.7') {
-    throw new RuntimeException(
-        "The Holy Gradle can only be built with JDK 1.7.  If you need to set JAVA_HOME to a different version, " +
-        "please set HOLY_GRADLE_JAVA_HOME to a 1.7 JDK."
-    )
-    /*
-        If you try to build with JDK 8, you'll get the following error, for which there is no solution.
-
-        > BUG! exception in phase 'semantic analysis' in source unit
-        '...\holy-gradle-plugins\buildSrc\src\main\groovy\holygradle\buildHelpers\LinkTextFiller.groovy' null
-    */
-}
-
 repositories {
     if (project.hasProperty('artifactoryServer')) {
         maven {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildHelpers/BuildContext.groovy
--- a/buildSrc/src/main/groovy/holygradle/buildHelpers/BuildContext.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,39 +0,0 @@
-package holygradle.buildHelpers
-
-import org.gradle.api.Project
-import org.gradle.api.logging.Logger
-
-/**
- * Helper class for logging and tracking failure state.
- */
-class BuildContext {
-    private final Logger logger
-    public final File baseDir
-    private boolean failed = false
-
-    public BuildContext(Project project, File baseDir) {
-        this.logger = project.logger
-        this.baseDir = baseDir
-    }
-
-    public void debug(String s) {
-        logger.debug(s)
-    }
-
-    public void info(String s) {
-        logger.info(s)
-    }
-
-    public void warn(String s) {
-        logger.warn(s)
-    }
-
-    public void error(String s) {
-        failed = true
-        logger.error(s)
-    }
-
-    public boolean isFailed() {
-        return failed
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildHelpers/LinkTextFiller.groovy
--- a/buildSrc/src/main/groovy/holygradle/buildHelpers/LinkTextFiller.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,204 +0,0 @@
-package holygradle.buildHelpers
-
-import holygradle.groovy.util.*
-
-import java.util.regex.Matcher
-
-/**
- * Replaces the text content of XHTML links in AsciiDoc-derived documents based on the content of the link target, if
- * the link is to the same document or a neighbouring local document.
- */
-public class LinkTextFiller {
-    class Link {
-        public final Node node
-        public final String target
-        public final String text
-        public final URI targetUri
-        private boolean gotTargetDoc = false
-        private XmlDoc targetDoc
-
-        private Link(Node node, String target, String text, URI targetUri) {
-            this.node = node
-            this.target = target
-            this.text = text
-            this.targetUri = targetUri
-        }
-
-        public XmlDoc getTargetDoc() {
-            if (!gotTargetDoc) {
-                final String linkTargetPath = targetUri.path
-                if (linkTargetPath == null || linkTargetPath.empty) {
-                    targetDoc = doc
-                } else {
-                    final File targetFile = new File(file.parentFile, linkTargetPath)
-                    if (!targetFile.name.endsWith('.html')) {
-                        targetDoc = null
-                    } else if (!targetFile.exists()) {
-                        buildContext.warn("${file}: Skipping non-existent link target file '${targetFile}'")
-                        targetDoc = null
-                    } else {
-                        targetDoc = documentSource.getXmlDocument(targetFile)
-                        if (targetDoc != null && !targetDoc.valid) {
-                            targetDoc = null
-                        }
-                    }
-                }
-                gotTargetDoc = true
-            }
-            return targetDoc
-        }
-
-        @Override
-        public String toString() {
-            return "Link{" +
-                "node=" + node +
-                ", -> target='" + target + '\'' +
-                ", text='" + text + '\'' +
-                '}';
-        }
-    }
-
-    private final BuildContext buildContext
-    private final XmlDocumentSource documentSource
-    private final File file
-    private XmlDoc doc
-    private Map<URI, String> fillText = new HashMap()
-
-    public LinkTextFiller(BuildContext buildContext, XmlDocumentSource documentSource, File file) {
-        this.buildContext = buildContext
-        this.documentSource = documentSource
-        this.file = file
-    }
-
-    // This is an entry point, so suppress "unused".
-    @SuppressWarnings("GroovyUnusedDeclaration")
-    public void fillAllLinkText() {
-        if (!doc) {
-            doc = documentSource.getXmlDocument(file)
-        }
-        if (!doc.valid) {
-            return
-        }
-        final List<Node> linkNodes = doc.links
-        for (Node linkNode in linkNodes) {
-            fillLinkText(linkNode)
-        }
-    }
-
-    private void fillLinkText(Node linkNode) {
-        // Get some info about the link to decide whether or not to fill it in.
-        Link link = makeLinkFromNode(linkNode)
-        if (link.targetUri == null) {
-            // It's a link with an empty href, so don't try to follow it.
-            return
-        }
-        if (link.targetUri.authority != null) {
-            // It's a link to another site, so don't try to follow it.
-            return
-        }
-        fillLink(link)
-    }
-
-    private Link makeLinkFromNode(Node linkNode) {
-        String linkText = null
-        final List<Node> children = linkNode.children()
-        if (children.size() == 1) {
-            Object firstChild = children[0]
-            if (firstChild instanceof String) {
-                linkText = (String)firstChild
-            }
-        }
-        String linkTarget = linkNode.@href
-        URI linkTargetUri = null
-        if (linkTarget != null) {
-            linkTargetUri = new URI(linkTarget)
-        }
-        return new Link(linkNode, linkTarget, linkText, linkTargetUri)
-    }
-
-    private void fillLink(Link link) {
-        if (!shouldFill(link)) {
-            return
-        }
-
-        String fillText = getFillText(link)
-        if (fillText != null) {
-            link.node.setValue(fillText.trim())
-        }
-    }
-
-    private String getFillText(Link link) {
-        // We cache the lookup because the same target may be linked to from several places.
-        if (!fillText.containsKey(link.targetUri)) {
-            fillText[link.targetUri] = makeFillText(link)
-        }
-        return fillText[link.targetUri]
-    }
-
-    private String makeFillText(Link link) {
-        XmlDoc targetDoc = link.targetDoc
-        if (link.targetDoc == null) {
-            return null
-        }
-        if (!shouldFill(link)) {
-            return null
-        }
-
-        final String fragment = link.targetUri.fragment
-        if (fragment == null) {
-            return targetDoc.node.head*.title*.text().join()
-        } else {
-            Node targetElement = targetDoc.getElementById(fragment)
-            if (targetElement == null) {
-                buildContext.warn("${file}: Failed to find target for ${fragment}")
-                return "MISSING TARGET"
-            } else {
-                if (targetElement.name().localPart ==~ /h[1-6]/) {
-                    // Strip numbers from link target text which comes from a heading.
-                    final Matcher headingMatch = (targetElement.text() =~ /([0-9.]+ +)?(.*)/)
-                    final List<String> matches = headingMatch[0] as List<String>
-                    return matches[2]
-                } else if (targetElement.name().localPart == "a") {
-                    return targetElement.parent().text()
-                } else {
-                    return targetElement.text()
-                }
-            }
-        }
-    }
-
-    private boolean shouldFill(Link link) {
-        // Fill empty links, or ones within the same document which have AsciiDoc default text.
-        return (
-            (link.text == null) ||
-            (link.targetDoc == doc && link.text == "[${link.targetUri.fragment}]") ||
-            (link.targetDoc != doc && link.text == "${link.targetUri}")
-        )
-    }
-
-    public void writeTo(File outputFile) {
-        // NOTE: We can't just use XmlUtil.serialize because it turns head/script into an empty tag, instead of
-        // start/end, which means Firefox won't load the script.  Some other browsers also refuse to handle empty
-        // tags for other elements.  Based on the XHTML 1 spec (https://www.w3.org/TR/xhtml1/#C_3) as linked from
-        // <http://stackoverflow.com/a/69984>, we add a complete list of elements which have an empty content
-        // model, so we can expand empty tags to a stard/end pair for all other elements.  Also, the default
-        // XmlNodePrinter adds extra whitespace, which the custom class avoids.
-        final XmlNodePrinter printer = new XhtmlNodePrinter(new PrintWriter(outputFile, "UTF-8"), "")
-        printer.expandEmptyElements = true
-        printer.keepEmptyElementsSet.addAll([
-            "area",
-            "base",
-            "basefont",
-            "br",
-            "col",
-            "img",
-            "input",
-            "isindex",
-            "link",
-            "meta",
-            "param",
-        ])
-        printer.preserveWhitespace = true // to avoid extra line breaks
-        printer.print(doc.node)
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildHelpers/WagonPublisher.groovy
--- a/buildSrc/src/main/groovy/holygradle/buildHelpers/WagonPublisher.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,55 +0,0 @@
-package holygradle.buildHelpers
-
-import org.apache.maven.wagon.Wagon
-import org.apache.maven.wagon.authentication.AuthenticationInfo
-import org.apache.maven.wagon.repository.Repository
-import org.codehaus.plexus.DefaultPlexusContainer
-import org.codehaus.plexus.PlexusContainer
-import org.gradle.api.file.FileCollection
-import org.gradle.api.logging.Logger
-
-/**
- * Wraps some other classes to support publishing the website using WebDAV.
- *
- * Written using https://bitbucket.org/davidmc24/gradle-site-plugin as a guide.
- */
-public class WagonPublisher {
-    private final Logger logger
-    private final String publishTargetUrl
-    private final AuthenticationInfo authenticationInfo
-
-    private PlexusContainer plexusContainer
-
-    public WagonPublisher(Logger logger, String publishTargetUrl, String username, String password) {
-        this.logger = logger
-        this.publishTargetUrl = publishTargetUrl
-        authenticationInfo = new AuthenticationInfo()
-        authenticationInfo.with {
-            it.userName = username
-            it.password = password
-        }
-    }
-
-    public void publish(FileCollection filesToPublish, File baseDir) {
-        Repository repository = new Repository("website", publishTargetUrl)
-        PlexusContainer plexusContainer = new DefaultPlexusContainer()
-        try {
-            Wagon wagon = (Wagon)plexusContainer.lookup(Wagon.ROLE, repository.protocol)
-            wagon.connect(repository, authenticationInfo)
-            try {
-                def basePath = baseDir.toPath()
-                for (File file in filesToPublish) {
-                    // Note: we replace '\' with '/' because we've got Windows paths but want valid URLs.
-                    String relativePath = basePath.relativize(file.toPath()).toString().replace('\\', '/')
-                    logger.info("Uploading ${file} to ${relativePath}")
-                    wagon.put(file, relativePath)
-                }
-                logger.info("Upload done")
-            } finally {
-                wagon.disconnect()
-            }
-        } finally {
-            plexusContainer.dispose()
-        }
-    }
-}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildHelpers/XmlDoc.groovy
--- a/buildSrc/src/main/groovy/holygradle/buildHelpers/XmlDoc.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,51 +0,0 @@
-package holygradle.buildHelpers
-
-/**
- * Simple class representing what we need to know about an XML document.
- */
-public class XmlDoc {
-    private final Node node
-    private List<Node> links
-    private Map<String, Node> elementsById
-
-    public XmlDoc(Node node) {
-        this.node = node
-    }
-
-    public boolean isValid() {
-        return node != null
-    }
-
-    private void assertValid() {
-        if (!valid) {
-            throw new RuntimeException("This XmlDoc is not valid")
-        }
-    }
-
-    public Node getNode() {
-        assertValid()
-        return node
-    }
-
-    public List<Node> getLinks() {
-        assertValid()
-        if (!links) {
-            links = node.depthFirst().findAll { Node it -> it.name().localPart == "a" } as List<Node>
-        }
-        return links
-    }
-
-    public Node getElementById(String id) {
-        assertValid()
-        if (!elementsById) {
-            elementsById = new HashMap()
-            for (Node n : node.depthFirst()) {
-                String nId = n.@id
-                if (nId != null) {
-                    elementsById[nId] = n
-                }
-            }
-        }
-        return elementsById[id]
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildHelpers/XmlDocumentSource.groovy
--- a/buildSrc/src/main/groovy/holygradle/buildHelpers/XmlDocumentSource.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,44 +0,0 @@
-package holygradle.buildHelpers
-
-import org.xml.sax.EntityResolver
-import org.xml.sax.InputSource
-
-/**
- * Caching source for XML documents: requesting the same one more than once won't re-parse it.
- */
-public class XmlDocumentSource {
-    private final BuildContext buildContext
-    private final Map<File, XmlDoc> documents = new HashMap()
-
-    XmlDocumentSource(BuildContext buildContext) {
-        this.buildContext = buildContext
-    }
-
-    // Private /
-    private EntityResolver getEntityResolver() {
-        return [
-            resolveEntity: { String publicId, String systemId ->
-                String dtd = "dtd/" + systemId.split("/").last()
-                final entityFile = new File(buildContext.baseDir, dtd)
-                buildContext.debug("Loading external entity '${publicId}' / '${systemId}' from ${entityFile}")
-                new InputSource(new FileReader(entityFile))
-            }
-        ] as EntityResolver
-    }
-
-    public XmlDoc getXmlDocument(File file) {
-        if (!documents.containsKey(file)) {
-            final XmlParser parser = new XmlParser()
-            // Use a custom entity resolver to get a local copy of the XHTML DTD, to save time and so that we don't
-            // have to worry about proxies etc.  This also means we can use HTML entities like "&copy;".
-            parser.setEntityResolver(getEntityResolver())
-            parser.trimWhitespace = false
-            final XmlDoc doc = new XmlDoc(parser.parse(file))
-            if (!doc.valid) {
-                buildContext.error("Failed to load XML from '${file}'")
-            }
-            documents[file] = doc
-        }
-        return documents[file]
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/BuildContext.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/BuildContext.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,39 @@
+package holygradle.buildSrc.buildHelpers
+
+import org.gradle.api.Project
+import org.gradle.api.logging.Logger
+
+/**
+ * Helper class for logging and tracking failure state.
+ */
+class BuildContext {
+    private final Logger logger
+    public final File baseDir
+    private boolean failed = false
+
+    public BuildContext(Project project, File baseDir) {
+        this.logger = project.logger
+        this.baseDir = baseDir
+    }
+
+    public void debug(String s) {
+        logger.debug(s)
+    }
+
+    public void info(String s) {
+        logger.info(s)
+    }
+
+    public void warn(String s) {
+        logger.warn(s)
+    }
+
+    public void error(String s) {
+        failed = true
+        logger.error(s)
+    }
+
+    public boolean isFailed() {
+        return failed
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/LinkTextFiller.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/LinkTextFiller.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,204 @@
+package holygradle.buildSrc.buildHelpers
+
+import holygradle.buildSrc.groovy.util.*
+
+import java.util.regex.Matcher
+
+/**
+ * Replaces the text content of XHTML links in AsciiDoc-derived documents based on the content of the link target, if
+ * the link is to the same document or a neighbouring local document.
+ */
+public class LinkTextFiller {
+    class Link {
+        public final Node node
+        public final String target
+        public final String text
+        public final URI targetUri
+        private boolean gotTargetDoc = false
+        private XmlDoc targetDoc
+
+        private Link(Node node, String target, String text, URI targetUri) {
+            this.node = node
+            this.target = target
+            this.text = text
+            this.targetUri = targetUri
+        }
+
+        public XmlDoc getTargetDoc() {
+            if (!gotTargetDoc) {
+                final String linkTargetPath = targetUri.path
+                if (linkTargetPath == null || linkTargetPath.empty) {
+                    targetDoc = doc
+                } else {
+                    final File targetFile = new File(file.parentFile, linkTargetPath)
+                    if (!targetFile.name.endsWith('.html')) {
+                        targetDoc = null
+                    } else if (!targetFile.exists()) {
+                        buildContext.warn("${file}: Skipping non-existent link target file '${targetFile}'")
+                        targetDoc = null
+                    } else {
+                        targetDoc = documentSource.getXmlDocument(targetFile)
+                        if (targetDoc != null && !targetDoc.valid) {
+                            targetDoc = null
+                        }
+                    }
+                }
+                gotTargetDoc = true
+            }
+            return targetDoc
+        }
+
+        @Override
+        public String toString() {
+            return "Link{" +
+                "node=" + node +
+                ", -> target='" + target + '\'' +
+                ", text='" + text + '\'' +
+                '}';
+        }
+    }
+
+    private final BuildContext buildContext
+    private final XmlDocumentSource documentSource
+    private final File file
+    private XmlDoc doc
+    private Map<URI, String> fillText = new HashMap()
+
+    public LinkTextFiller(BuildContext buildContext, XmlDocumentSource documentSource, File file) {
+        this.buildContext = buildContext
+        this.documentSource = documentSource
+        this.file = file
+    }
+
+    // This is an entry point, so suppress "unused".
+    @SuppressWarnings("GroovyUnusedDeclaration")
+    public void fillAllLinkText() {
+        if (!doc) {
+            doc = documentSource.getXmlDocument(file)
+        }
+        if (!doc.valid) {
+            return
+        }
+        final List<Node> linkNodes = doc.links
+        for (Node linkNode in linkNodes) {
+            fillLinkText(linkNode)
+        }
+    }
+
+    private void fillLinkText(Node linkNode) {
+        // Get some info about the link to decide whether or not to fill it in.
+        Link link = makeLinkFromNode(linkNode)
+        if (link.targetUri == null) {
+            // It's a link with an empty href, so don't try to follow it.
+            return
+        }
+        if (link.targetUri.authority != null) {
+            // It's a link to another site, so don't try to follow it.
+            return
+        }
+        fillLink(link)
+    }
+
+    private Link makeLinkFromNode(Node linkNode) {
+        String linkText = null
+        final List<Node> children = linkNode.children()
+        if (children.size() == 1) {
+            Object firstChild = children[0]
+            if (firstChild instanceof String) {
+                linkText = (String)firstChild
+            }
+        }
+        String linkTarget = linkNode.@href
+        URI linkTargetUri = null
+        if (linkTarget != null) {
+            linkTargetUri = new URI(linkTarget)
+        }
+        return new Link(linkNode, linkTarget, linkText, linkTargetUri)
+    }
+
+    private void fillLink(Link link) {
+        if (!shouldFill(link)) {
+            return
+        }
+
+        String fillText = getFillText(link)
+        if (fillText != null) {
+            link.node.setValue(fillText.trim())
+        }
+    }
+
+    private String getFillText(Link link) {
+        // We cache the lookup because the same target may be linked to from several places.
+        if (!fillText.containsKey(link.targetUri)) {
+            fillText[link.targetUri] = makeFillText(link)
+        }
+        return fillText[link.targetUri]
+    }
+
+    private String makeFillText(Link link) {
+        XmlDoc targetDoc = link.targetDoc
+        if (link.targetDoc == null) {
+            return null
+        }
+        if (!shouldFill(link)) {
+            return null
+        }
+
+        final String fragment = link.targetUri.fragment
+        if (fragment == null) {
+            return targetDoc.node.head*.title*.text().join()
+        } else {
+            Node targetElement = targetDoc.getElementById(fragment)
+            if (targetElement == null) {
+                buildContext.warn("${file}: Failed to find target for ${fragment}")
+                return "MISSING TARGET"
+            } else {
+                if (targetElement.name().localPart ==~ /h[1-6]/) {
+                    // Strip numbers from link target text which comes from a heading.
+                    final Matcher headingMatch = (targetElement.text() =~ /([0-9.]+ +)?(.*)/)
+                    final List<String> matches = headingMatch[0] as List<String>
+                    return matches[2]
+                } else if (targetElement.name().localPart == "a") {
+                    return targetElement.parent().text()
+                } else {
+                    return targetElement.text()
+                }
+            }
+        }
+    }
+
+    private boolean shouldFill(Link link) {
+        // Fill empty links, or ones within the same document which have AsciiDoc default text.
+        return (
+            (link.text == null) ||
+            (link.targetDoc == doc && link.text == "[${link.targetUri.fragment}]") ||
+            (link.targetDoc != doc && link.text == "${link.targetUri}")
+        )
+    }
+
+    public void writeTo(File outputFile) {
+        // NOTE: We can't just use XmlUtil.serialize because it turns head/script into an empty tag, instead of
+        // start/end, which means Firefox won't load the script.  Some other browsers also refuse to handle empty
+        // tags for other elements.  Based on the XHTML 1 spec (https://www.w3.org/TR/xhtml1/#C_3) as linked from
+        // <http://stackoverflow.com/a/69984>, we add a complete list of elements which have an empty content
+        // model, so we can expand empty tags to a stard/end pair for all other elements.  Also, the default
+        // XmlNodePrinter adds extra whitespace, which the custom class avoids.
+        final XmlNodePrinter printer = new XhtmlNodePrinter(new PrintWriter(outputFile, "UTF-8"), "")
+        printer.expandEmptyElements = true
+        printer.keepEmptyElementsSet.addAll([
+            "area",
+            "base",
+            "basefont",
+            "br",
+            "col",
+            "img",
+            "input",
+            "isindex",
+            "link",
+            "meta",
+            "param",
+        ])
+        printer.preserveWhitespace = true // to avoid extra line breaks
+        printer.print(doc.node)
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/WagonPublisher.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/WagonPublisher.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,55 @@
+package holygradle.buildSrc.buildHelpers
+
+import org.apache.maven.wagon.Wagon
+import org.apache.maven.wagon.authentication.AuthenticationInfo
+import org.apache.maven.wagon.repository.Repository
+import org.codehaus.plexus.DefaultPlexusContainer
+import org.codehaus.plexus.PlexusContainer
+import org.gradle.api.file.FileCollection
+import org.gradle.api.logging.Logger
+
+/**
+ * Wraps some other classes to support publishing the website using WebDAV.
+ *
+ * Written using https://bitbucket.org/davidmc24/gradle-site-plugin as a guide.
+ */
+public class WagonPublisher {
+    private final Logger logger
+    private final String publishTargetUrl
+    private final AuthenticationInfo authenticationInfo
+
+    private PlexusContainer plexusContainer
+
+    public WagonPublisher(Logger logger, String publishTargetUrl, String username, String password) {
+        this.logger = logger
+        this.publishTargetUrl = publishTargetUrl
+        authenticationInfo = new AuthenticationInfo()
+        authenticationInfo.with {
+            it.userName = username
+            it.password = password
+        }
+    }
+
+    public void publish(FileCollection filesToPublish, File baseDir) {
+        Repository repository = new Repository("website", publishTargetUrl)
+        PlexusContainer plexusContainer = new DefaultPlexusContainer()
+        try {
+            Wagon wagon = (Wagon)plexusContainer.lookup(Wagon.ROLE, repository.protocol)
+            wagon.connect(repository, authenticationInfo)
+            try {
+                def basePath = baseDir.toPath()
+                for (File file in filesToPublish) {
+                    // Note: we replace '\' with '/' because we've got Windows paths but want valid URLs.
+                    String relativePath = basePath.relativize(file.toPath()).toString().replace('\\', '/')
+                    logger.info("Uploading ${file} to ${relativePath}")
+                    wagon.put(file, relativePath)
+                }
+                logger.info("Upload done")
+            } finally {
+                wagon.disconnect()
+            }
+        } finally {
+            plexusContainer.dispose()
+        }
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/XmlDoc.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/XmlDoc.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,51 @@
+package holygradle.buildSrc.buildHelpers
+
+/**
+ * Simple class representing what we need to know about an XML document.
+ */
+public class XmlDoc {
+    private final Node node
+    private List<Node> links
+    private Map<String, Node> elementsById
+
+    public XmlDoc(Node node) {
+        this.node = node
+    }
+
+    public boolean isValid() {
+        return node != null
+    }
+
+    private void assertValid() {
+        if (!valid) {
+            throw new RuntimeException("This XmlDoc is not valid")
+        }
+    }
+
+    public Node getNode() {
+        assertValid()
+        return node
+    }
+
+    public List<Node> getLinks() {
+        assertValid()
+        if (!links) {
+            links = node.depthFirst().findAll { Node it -> it.name().localPart == "a" } as List<Node>
+        }
+        return links
+    }
+
+    public Node getElementById(String id) {
+        assertValid()
+        if (!elementsById) {
+            elementsById = new HashMap()
+            for (Node n : node.depthFirst()) {
+                String nId = n.@id
+                if (nId != null) {
+                    elementsById[nId] = n
+                }
+            }
+        }
+        return elementsById[id]
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/XmlDocumentSource.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/buildHelpers/XmlDocumentSource.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,44 @@
+package holygradle.buildSrc.buildHelpers
+
+import org.xml.sax.EntityResolver
+import org.xml.sax.InputSource
+
+/**
+ * Caching source for XML documents: requesting the same one more than once won't re-parse it.
+ */
+public class XmlDocumentSource {
+    private final BuildContext buildContext
+    private final Map<File, XmlDoc> documents = new HashMap()
+
+    XmlDocumentSource(BuildContext buildContext) {
+        this.buildContext = buildContext
+    }
+
+    // Private /
+    private EntityResolver getEntityResolver() {
+        return [
+            resolveEntity: { String publicId, String systemId ->
+                String dtd = "dtd/" + systemId.split("/").last()
+                final entityFile = new File(buildContext.baseDir, dtd)
+                buildContext.debug("Loading external entity '${publicId}' / '${systemId}' from ${entityFile}")
+                new InputSource(new FileReader(entityFile))
+            }
+        ] as EntityResolver
+    }
+
+    public XmlDoc getXmlDocument(File file) {
+        if (!documents.containsKey(file)) {
+            final XmlParser parser = new XmlParser()
+            // Use a custom entity resolver to get a local copy of the XHTML DTD, to save time and so that we don't
+            // have to worry about proxies etc.  This also means we can use HTML entities like "&copy;".
+            parser.setEntityResolver(getEntityResolver())
+            parser.trimWhitespace = false
+            final XmlDoc doc = new XmlDoc(parser.parse(file))
+            if (!doc.valid) {
+                buildContext.error("Failed to load XML from '${file}'")
+            }
+            documents[file] = doc
+        }
+        return documents[file]
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/LICENSE.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/LICENSE.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/NOTICE.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/NOTICE.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,13 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Groovy Language distribution.                 ==
+   =========================================================================
+
+   Groovy Language
+   Copyright 2003-2011 The respective authors and developers
+   Developers and Contributors are listed in the project POM file
+   and Gradle build file
+
+   This product includes software developed by
+   The Groovy community (http://groovy.codehaus.org/).
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/XhtmlNodePrinter.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/groovy/util/XhtmlNodePrinter.java	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,165 @@
+package holygradle.buildSrc.groovy.util;
+
+import groovy.util.*;
+import groovy.xml.*;
+
+import java.io.*;
+import java.util.*;
+
+/**
+ * Subclass of {@link XmlNodePrinter} tweaked to output XHTML correctly (in particular, no extra line breaks or other
+ * whitespace around text nodes).
+ *
+ * This class is substantially the same source as XmlNodePrinter so I regard it as a Derived Work under the Apache
+ * License 2.0 under which Groovy 1.8.6 is distributed.
+ */
+public class XhtmlNodePrinter extends XmlNodePrinter {
+    private static final QName XML_SPACE = new QName("http://www.w3.org/XML/1998/namespace", "space");
+
+    private Set<String> keepEmptyElementsSet = new HashSet<String>();
+
+    public XhtmlNodePrinter(PrintWriter out) {
+        super(out);
+    }
+
+    public XhtmlNodePrinter(PrintWriter out, String indent) {
+        super(out, indent);
+    }
+
+    public XhtmlNodePrinter(PrintWriter out, String indent, String quote) {
+        super(out, indent, quote);
+    }
+
+    public XhtmlNodePrinter(IndentPrinter out) {
+        super(out);
+    }
+
+    public XhtmlNodePrinter(IndentPrinter out, String quote) {
+        super(out, quote);
+    }
+
+    public XhtmlNodePrinter() {
+    }
+
+    @Override
+    protected void print(Node node, NamespaceContext ctx) {
+        // NOTE 2014-12-11 HughG: Hack: strip out "xml:space" attributes.
+        node.attributes().remove(XML_SPACE);
+
+        /*
+         * Handle empty elements like '<br/>', '<img/> or '<hr noshade="noshade"/>.
+         */
+        if (isEmptyElement(node)) {
+            printLineBegin();
+            out.print("<");
+            final String nodeName = getName(node);
+            out.print(nodeName);
+            if (ctx != null) {
+                printNamespace(node, ctx);
+            }
+
+            printNameAttributes(node.attributes(), ctx);
+            if (isExpandEmptyElements() && !keepEmptyElementsSet.contains(nodeName)) {
+                out.print("></");
+                out.print(nodeName);
+                out.print(">");
+            } else {
+                out.print("/>");
+            }
+            printLineEnd();
+            out.flush();
+            return;
+        }
+
+        /*
+         * Hook for extra processing, e.g. GSP tag element!
+         */
+        if (printSpecialNode(node)) {
+            out.flush();
+            return;
+        }
+
+        /*
+         * Handle normal element like <html> ... </html>.
+         */
+        Object value = node.value();
+        if (value instanceof List) {
+            printName(node, ctx, true, firstChildIsSimple((List) value));
+            printList((List) value, ctx);
+            printName(node, ctx, false, firstChildIsSimple((List) value));
+            out.flush();
+            return;
+        }
+
+        // treat as simple type - probably a String
+        printName(node, ctx, true, isPreserveWhitespace());
+        printSimpleItemWithIndent(value);
+        printName(node, ctx, false, isPreserveWhitespace());
+        out.flush();
+    }
+
+    private boolean firstChildIsSimple(List value) {
+        return !(value.get(0) instanceof Node) && isPreserveWhitespace();
+    }
+
+    @Override
+    protected void printName(Node node, NamespaceContext ctx, boolean begin, boolean preserve) {
+        if (node == null) {
+            throw new NullPointerException("Node must not be null.");
+        }
+        Object name = node.name();
+        if (name == null) {
+            throw new NullPointerException("Name must not be null.");
+        }
+        if (!preserve && begin) printLineBegin();
+        out.print("<");
+        if (!begin) {
+            out.print("/");
+        }
+        out.print(getName(node));
+        if (ctx != null) {
+            printNamespace(node, ctx);
+        }
+        if (begin) {
+            printNameAttributes(node.attributes(), ctx);
+        }
+        out.print(">");
+        if (!preserve && !begin) printLineEnd();
+    }
+
+    private boolean isEmptyElement(Node node) {
+        if (node == null) {
+            throw new IllegalArgumentException("Node must not be null!");
+        }
+        if (!node.children().isEmpty()) {
+            return false;
+        }
+        return node.text().length() == 0;
+    }
+
+    private String getName(Object object) {
+        if (object instanceof String) {
+            return (String) object;
+        } else if (object instanceof QName) {
+            QName qname = (QName) object;
+            if (!isNamespaceAware()) {
+                return qname.getLocalPart();
+            }
+            return qname.getQualifiedName();
+        } else if (object instanceof Node) {
+            Object name = ((Node) object).name();
+            return getName(name);
+        }
+        return object.toString();
+    }
+
+    private void printSimpleItemWithIndent(Object value) {
+        if (!isPreserveWhitespace()) out.incrementIndent();
+        printSimpleItem(value);
+        if (!isPreserveWhitespace()) out.decrementIndent();
+    }
+
+    public Set<String> getKeepEmptyElementsSet() {
+        return keepEmptyElementsSet;
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/buildSrc/process/ExecHelper.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/buildSrc/src/main/groovy/holygradle/buildSrc/process/ExecHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,55 @@
+package holygradle.buildSrc.process
+
+import org.gradle.api.logging.LogLevel
+import org.gradle.api.logging.Logger
+import org.gradle.process.ExecResult
+import org.gradle.process.ExecSpec
+
+/**
+ * Utility methods related to executing processes.
+ */
+class ExecHelper {
+    public static executeAndReturnResultAsString(
+        Logger logger,
+        Closure<ExecResult> execMethod,
+        Closure throwForExitValue,
+        Closure configureSpec
+    ) {
+        String commandLine = null
+
+        OutputStream stdout = new ByteArrayOutputStream()
+        OutputStream stderr = new ByteArrayOutputStream()
+        ExecResult execResult = execMethod { ExecSpec spec ->
+            configureSpec(spec)
+            spec.setStandardOutput stdout
+            spec.setErrorOutput stderr
+            spec.setIgnoreExitValue true
+
+            commandLine = spec.commandLine
+        }
+        int exitValue = execResult.getExitValue()
+        def shouldThrow = throwForExitValue(exitValue)
+
+        if (exitValue != 0) {
+            LogLevel logLevel = (shouldThrow ? LogLevel.ERROR : LogLevel.INFO)
+            logger.info "Will ${shouldThrow ? '' : 'not '}throw for exitValue ${exitValue} from commandLine ${commandLine}."
+            if (shouldThrow) {
+                logger.error "Failed with exitValue ${exitValue} from commandLine ${commandLine}."
+            }
+            [
+                "Standard": stdout,
+                "Error": stderr
+            ].each { name, stream ->
+                logger.log logLevel, "${name} output stream follows. >>>"
+                stream.toString().eachLine { logger.log logLevel, it }
+                logger.log logLevel, "<<< ${name} output stream ends."
+
+            }
+
+            if (shouldThrow) {
+                execResult.assertNormalExitValue()
+            }
+        }
+        stdout.toString().trim()
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/groovy/util/LICENSE.txt
--- a/buildSrc/src/main/groovy/holygradle/groovy/util/LICENSE.txt	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,15 +0,0 @@
-/*
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
- 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/groovy/util/NOTICE.txt
--- a/buildSrc/src/main/groovy/holygradle/groovy/util/NOTICE.txt	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,13 +0,0 @@
-   =========================================================================
-   ==  NOTICE file corresponding to the section 4 d of                    ==
-   ==  the Apache License, Version 2.0,                                   ==
-   ==  in this case for the Groovy Language distribution.                 ==
-   =========================================================================
-
-   Groovy Language
-   Copyright 2003-2011 The respective authors and developers
-   Developers and Contributors are listed in the project POM file
-   and Gradle build file
-
-   This product includes software developed by
-   The Groovy community (http://groovy.codehaus.org/).
diff -r 9b75eaff9e23 -r 48a0dd8dac1d buildSrc/src/main/groovy/holygradle/groovy/util/XhtmlNodePrinter.java
--- a/buildSrc/src/main/groovy/holygradle/groovy/util/XhtmlNodePrinter.java	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,165 +0,0 @@
-package holygradle.groovy.util;
-
-import groovy.util.*;
-import groovy.xml.*;
-
-import java.io.*;
-import java.util.*;
-
-/**
- * Subclass of {@link XmlNodePrinter} tweaked to output XHTML correctly (in particular, no extra line breaks or other
- * whitespace around text nodes).
- *
- * This class is substantially the same source as XmlNodePrinter so I regard it as a Derived Work under the Apache
- * License 2.0 under which Groovy 1.8.6 is distributed.
- */
-public class XhtmlNodePrinter extends XmlNodePrinter {
-    private static final QName XML_SPACE = new QName("http://www.w3.org/XML/1998/namespace", "space");
-
-    private Set<String> keepEmptyElementsSet = new HashSet<String>();
-
-    public XhtmlNodePrinter(PrintWriter out) {
-        super(out);
-    }
-
-    public XhtmlNodePrinter(PrintWriter out, String indent) {
-        super(out, indent);
-    }
-
-    public XhtmlNodePrinter(PrintWriter out, String indent, String quote) {
-        super(out, indent, quote);
-    }
-
-    public XhtmlNodePrinter(IndentPrinter out) {
-        super(out);
-    }
-
-    public XhtmlNodePrinter(IndentPrinter out, String quote) {
-        super(out, quote);
-    }
-
-    public XhtmlNodePrinter() {
-    }
-
-    @Override
-    protected void print(Node node, NamespaceContext ctx) {
-        // NOTE 2014-12-11 HughG: Hack: strip out "xml:space" attributes.
-        node.attributes().remove(XML_SPACE);
-
-        /*
-         * Handle empty elements like '<br/>', '<img/> or '<hr noshade="noshade"/>.
-         */
-        if (isEmptyElement(node)) {
-            printLineBegin();
-            out.print("<");
-            final String nodeName = getName(node);
-            out.print(nodeName);
-            if (ctx != null) {
-                printNamespace(node, ctx);
-            }
-
-            printNameAttributes(node.attributes(), ctx);
-            if (isExpandEmptyElements() && !keepEmptyElementsSet.contains(nodeName)) {
-                out.print("></");
-                out.print(nodeName);
-                out.print(">");
-            } else {
-                out.print("/>");
-            }
-            printLineEnd();
-            out.flush();
-            return;
-        }
-
-        /*
-         * Hook for extra processing, e.g. GSP tag element!
-         */
-        if (printSpecialNode(node)) {
-            out.flush();
-            return;
-        }
-
-        /*
-         * Handle normal element like <html> ... </html>.
-         */
-        Object value = node.value();
-        if (value instanceof List) {
-            printName(node, ctx, true, firstChildIsSimple((List) value));
-            printList((List) value, ctx);
-            printName(node, ctx, false, firstChildIsSimple((List) value));
-            out.flush();
-            return;
-        }
-
-        // treat as simple type - probably a String
-        printName(node, ctx, true, isPreserveWhitespace());
-        printSimpleItemWithIndent(value);
-        printName(node, ctx, false, isPreserveWhitespace());
-        out.flush();
-    }
-
-    private boolean firstChildIsSimple(List value) {
-        return !(value.get(0) instanceof Node) && isPreserveWhitespace();
-    }
-
-    @Override
-    protected void printName(Node node, NamespaceContext ctx, boolean begin, boolean preserve) {
-        if (node == null) {
-            throw new NullPointerException("Node must not be null.");
-        }
-        Object name = node.name();
-        if (name == null) {
-            throw new NullPointerException("Name must not be null.");
-        }
-        if (!preserve && begin) printLineBegin();
-        out.print("<");
-        if (!begin) {
-            out.print("/");
-        }
-        out.print(getName(node));
-        if (ctx != null) {
-            printNamespace(node, ctx);
-        }
-        if (begin) {
-            printNameAttributes(node.attributes(), ctx);
-        }
-        out.print(">");
-        if (!preserve && !begin) printLineEnd();
-    }
-
-    private boolean isEmptyElement(Node node) {
-        if (node == null) {
-            throw new IllegalArgumentException("Node must not be null!");
-        }
-        if (!node.children().isEmpty()) {
-            return false;
-        }
-        return node.text().length() == 0;
-    }
-
-    private String getName(Object object) {
-        if (object instanceof String) {
-            return (String) object;
-        } else if (object instanceof QName) {
-            QName qname = (QName) object;
-            if (!isNamespaceAware()) {
-                return qname.getLocalPart();
-            }
-            return qname.getQualifiedName();
-        } else if (object instanceof Node) {
-            Object name = ((Node) object).name();
-            return getName(name);
-        }
-        return object.toString();
-    }
-
-    private void printSimpleItemWithIndent(Object value) {
-        if (!isPreserveWhitespace()) out.incrementIndent();
-        printSimpleItem(value);
-        if (!isPreserveWhitespace()) out.decrementIndent();
-    }
-
-    public Set<String> getKeepEmptyElementsSet() {
-        return keepEmptyElementsSet;
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d credential-store/build.gradle
--- a/credential-store/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/credential-store/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,20 +1,114 @@
-public File getDevEnvPath() {
-    if (!project.hasProperty('chosenDevEnvVersion')) {
-        throw new RuntimeException(
-            'Cannot configure ${project.name} to build because property chosenDevEnvVersion is not set. ' +
-            'The value should be something like "VS120".'
-        )
+import java.util.regex.Pattern
+import java.util.regex.Matcher
+
+import holygradle.buildSrc.process.ExecHelper
+
+class VSVersion {
+    private static final Pattern VERSION_PATTERN =
+            Pattern.compile(
+                /VS([0-9]+)(0)|/ + // "VSnnnCOMNTOOLS" environment variable
+                /([0-9]+)\.([0-9]+|\+)/, // "nn.n" vswhere version string, also allowing "nn.+"
+                Pattern.CASE_INSENSITIVE
+            )
+
+    private final String asString
+
+    public final String major
+    public final String minor
+    public final String rangeStart
+    public final String rangeEnd
+    public final String envVarName
+
+    public VSVersion(final String version) {
+        asString = version
+        Matcher versionMatcher = match(version)
+        if (versionMatcher.group(1) != null) {
+            // Matched "VSnnn"
+            major = versionMatcher.group(1)
+            minor = versionMatcher.group(2)
+        } else {
+            // Matched "nn.x"
+            major = versionMatcher.group(3)
+            minor = versionMatcher.group(4)
+        }
+
+        final char firstChar = version.charAt(0)
+        final boolean isEnvVarStyle = (Character.toLowerCase(firstChar) == ('v' as char))
+        final boolean isWildcardMinorVersion = isEnvVarStyle || (this.minor == '+')
+        envVarName = "VS${major}0COMNTOOLS"
+        if (isWildcardMinorVersion) {
+            rangeStart = "${major}.0"
+            rangeEnd = "${major.toInteger() + 1}.0"
+        } else {
+            rangeStart = "${major}.${this.minor}"
+            rangeEnd = "${major}.${minor.toInteger() + 1}"
+        }
     }
+
+    // Pulled out as a static method because IntelliJ gives "field may be uninitialised" warnings otherwise.
+    private static Matcher match(String version) {
+        final Matcher versionMatcher = VERSION_PATTERN.matcher(version)
+        if (!versionMatcher.find()) {
+            throw new RuntimeException("Failed to parse chosenDevEnvVersion '${version}'")
+        }
+        return versionMatcher
+    }
+
+    @Override
+    public String toString() {
+        return asString
+    }
+}
+
+public File getCommonToolsPathFromVSWhere(String vswhereLocation) {
+    VSVersion version = new VSVersion(chosenDevEnvVersion)
+    final String versionRange = "[${version.rangeStart},${version.rangeEnd})"
+    final String installPath = ExecHelper.executeAndReturnResultAsString(
+        project.logger,
+        project.&exec,
+        { return true },
+        { ExecSpec spec ->
+            spec.commandLine vswhereLocation,
+                            "-property", "installationPath",
+                            "-legacy",
+                            "-format", "value",
+                            "-version", versionRange
+        }
+    )
+    if (installPath == null || installPath.trim().empty) {
+        throw new RuntimeException("vswhere.exe could not find a Visual Studio version in range ${versionRange}")
+    }
+    return new File(installPath, "Common7/Tools")
+}
+
+public File getCommonToolsPathFromEnvironment() {
     String envVarComnTools = System.getenv("${chosenDevEnvVersion}COMNTOOLS")
     if (envVarComnTools == null || envVarComnTools == "") {
-        throw new RuntimeException("'chosenDevEnvVersion' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
+        throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
     }
-    File comnToolsPath = new File(envVarComnTools)
-    File devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
+    return new File(envVarComnTools)
+}
+
+public File getCommonToolsPath() {
+    // Check for the existence of vswhere.exe
+    final String vswhereLocation = ["ProgramFiles", "ProgramFiles(x86)"] // look at 64-bit then 32-bit environment variables
+        .findResults { System.getenv(it) } // collect all non-null environment variable values
+        .collect { "${it}\\Microsoft Visual Studio\\Installer\\vswhere.exe" } // map to filenames
+        .find { new File(it).exists() } // return the first filename for which a file exists
+    if (vswhereLocation != null) {
+        return getCommonToolsPathFromVSWhere(vswhereLocation)
+    } else {
+        return getCommonToolsPathFromEnvironment()
+    }
+}
+
+public File getDevEnvPath() {
+    File commonToolsPath = getCommonToolsPath()
+    File devEnvPath = new File(commonToolsPath, "../IDE/devenv.com")
     if (!devEnvPath.exists()) {
         throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
     }
-    devEnvPath
+    return devEnvPath
 }
 
 String releaseVersionInfoFileName = 'release_version_info.h'
diff -r 9b75eaff9e23 -r 48a0dd8dac1d credential-store/credential-store.cpp
--- a/credential-store/credential-store.cpp	Sat Jun 10 22:29:31 2017 +0100
+++ b/credential-store/credential-store.cpp	Fri May 03 13:55:15 2019 +0100
@@ -2,39 +2,65 @@
 
 #include <windows.h>
 #include <wincred.h>
+#include <lmcons.h>
 #include <tchar.h>
 #include <locale>
 #include <iostream>
+#include <sstream>
+#include <fstream>
 #include <string>
+#include <map>
+#include <list>
 #include <algorithm>
+#include <functional>
+#include <cctype>
+
 #pragma hdrstop
 
+#define INPUT_LENGTH_LIMIT 256
+#define GRADLE_USER_HOME_ENV_VAR_NAME L"GRADLE_USER_HOME"
+#define USERPROFILE_ENV_VAR_NAME L"USERPROFILE"
+#define HOLY_GRADLE_DIR_NAME L"holygradle"
+#define CREDENTIAL_BASIS_FILE_NAME L"credential-bases.txt"
+#define HOLY_GRADLE_CREDENTIAL_PREFIX L"Intrepid - "
+
 using namespace std;
 
-BOOL StoreCredential(wstring& target_address, wstring& target_password, wstring& target_user) {
+void echo(bool on) {
+    DWORD  mode;
+    HANDLE hConIn = ::GetStdHandle(STD_INPUT_HANDLE);
+    ::GetConsoleMode(hConIn, &mode);
+    mode = on
+        ? (mode | ENABLE_ECHO_INPUT)
+        : (mode & ~(ENABLE_ECHO_INPUT));
+    ::SetConsoleMode(hConIn, mode);
+}
+
+// Trim whitespace from both ends of the string.  This function intentionally copies its input because it
+// internally erases characters in place.  Based on http://stackoverflow.com/a/217605.
+wstring trim(wstring s) {
+    s.erase(s.begin(), find_if(s.begin(), s.end(),
+        not1(ptr_fun<int, int>(isspace))));
+    s.erase(find_if(s.rbegin(), s.rend(),
+        not1(ptr_fun<int, int>(isspace))).base(), s.end());
+    return s;
+}
+
+void StoreCredential(wstring& target_address, wstring& target_user, wstring& target_password) {
     CREDENTIALW cred = {0};
     cred.Type = CRED_TYPE_GENERIC;
     cred.TargetName = (LPWSTR)target_address.c_str();
     cred.CredentialBlobSize = (DWORD) (target_password.size()*2);
     cred.CredentialBlob = (LPBYTE) target_password.c_str();
-    cred.Persist = CRED_PERSIST_LOCAL_MACHINE;
+    cred.Persist = CRED_PERSIST_ENTERPRISE;
     cred.UserName = (LPWSTR)target_user.c_str();
 
-    return ::CredWriteW(&cred, 0);
-}
-
-BOOL DeleteCredential(LPWSTR target_address) {
-    return ::CredDelete(target_address, CRED_TYPE_GENERIC, 0);
-}
-
-void echo(bool on = true) {
-    DWORD  mode;
-    HANDLE hConIn = GetStdHandle( STD_INPUT_HANDLE );
-    GetConsoleMode( hConIn, &mode );
-    mode = on
-        ? (mode |   ENABLE_ECHO_INPUT )
-        : (mode & ~(ENABLE_ECHO_INPUT));
-    SetConsoleMode( hConIn, mode );
+    bool result = (::CredWriteW(&cred, 0) != FALSE);
+    if (result) {
+        wcout << "Updated: " << target_address << endl;
+    } else {
+        wcout << "ERROR: Failed to update: " << target_address << endl;
+    }
 }
 
 void PrintCredential(PCREDENTIAL pCredential) {
@@ -64,7 +90,7 @@
     //Write the credential's data as Hex Dump.
     for (dwByte = 0; dwByte < pCredential->CredentialBlobSize; dwByte++) {
         BYTE byte1 = pCredential->CredentialBlob[dwByte];
-        sprintf(szHex, "%2.2X ", byte1);
+        sprintf_s(szHex, 16, "%2.2X ", byte1);
         szAscii[1] = '\0';
 
         if (byte1 >= 32 && byte1 < 128)
@@ -72,8 +98,8 @@
         else
             szAscii[0] = ' ';
 
-        strcat(szHexBuffer, szHex);
-        strcat(szAsciiBuffer, szAscii);
+        strcat_s(szHexBuffer, 256, szHex);
+        strcat_s(szAsciiBuffer, 256, szAscii);
 
         if (dwByte == pCredential->CredentialBlobSize - 1 
             || dwByte % 16 == 15)
@@ -87,124 +113,260 @@
     wcout << "*********************************************" << endl << endl << endl;
 }
 
-void ReadAndPrintCredential(wstring& target_key) {
+void ReadAndPrintCredential(const wstring& target_key) {
+    PCREDENTIALW pcred;
+    BOOL ok = ::CredReadW(target_key.c_str(), CRED_TYPE_GENERIC, 0, &pcred);
+    if (!ok) {
+        wcout << "CredRead() - errno " << (ok ? 0 : ::GetLastError()) << endl;
+        exit(1);
+    }
+    wcout << pcred->UserName << "&&&" << wstring((LPWSTR)pcred->CredentialBlob, pcred->CredentialBlobSize / 2);
+
+    // must free memory allocated by CredRead()!
+    ::CredFree(pcred);
+}
+
+wstring GetCredentialUsername(const wstring& target_key) {
     PCREDENTIALW pcred;
     BOOL ok = ::CredReadW(target_key.c_str(), CRED_TYPE_GENERIC, 0, &pcred);
     if (!ok) {
         wcout << "CredRead() - errno " << (ok ? 0 : ::GetLastError()) << endl;
         exit(1);
     }
-    wcout << pcred->UserName << "&&&" << wstring((LPWSTR)pcred->CredentialBlob, pcred->CredentialBlobSize/2);
+    wstring result(pcred->UserName);
 
-    // must free memory allocated by CredRead()!
-    ::CredFree (pcred);
+    // Must free memory allocated by CredRead()!
+    ::CredFree(pcred);
+
+    return result;
 }
 
 // templated version of my_equal so it could work with both char and wchar_t
 template<typename charT>
 struct my_equal {
-    my_equal( const std::locale& loc ) : loc_(loc) {}
+    my_equal( const locale& loc ) : loc_(loc) {}
     bool operator()(charT ch1, charT ch2) {
-        return std::toupper(ch1, loc_) == std::toupper(ch2, loc_);
+        return toupper(ch1, loc_) == toupper(ch2, loc_);
     }
 private:
-    const std::locale& loc_;
+    const locale& loc_;
 };
 
 // find substring (case insensitive)
 template<typename T>
-int ci_find_substr( const T& str1, const T& str2, const std::locale& loc = std::locale() )
+int ci_find_substr( const T& str1, const T& str2, const locale& loc = locale() )
 {
-    T::const_iterator it = std::search( str1.begin(), str1.end(), 
+    T::const_iterator it = search( str1.begin(), str1.end(), 
         str2.begin(), str2.end(), my_equal<T::value_type>(loc) );
     if ( it != str1.end() ) return it - str1.begin();
     else return -1; // not found
 }
 
-BOOL IsMercurialCredential(const wstring& target_name, const wstring& username) {
-    BOOL is_mercurial = FALSE;
-    if (target_name.size() > username.size() &&
-        ci_find_substr(target_name, username) == 0 &&
-        target_name.find(L"@@") == username.size() &&
-        target_name.find(L"@Mercurial") == target_name.size() - 10
-    ) {
-        // A Mercurial credential should:
-        //  begin with username
-        //  be followed by "@@"
-        //  end with "@Mercurial"
-        is_mercurial = true;
+bool IsMercurialCredential(const wstring& target_name, const wstring& username) {
+    // A Mercurial credential name should have the following components in order:
+    //  a non-zero-length username
+    //  "@@"
+    //  a non-zero-length repo URL
+    //  "@Mercurial"
+    //
+    // Mercurial accepts, and older versions store, the username data in the credential as just the username,
+    // whereas newer versions store it as "<username>@@<repo_url>" (without a trailing "@Mercurial").
+
+    size_t double_at_pos = target_name.find(L"@@");
+    size_t at_mercurial_pos = target_name.find(L"@Mercurial");
+    bool matches_format = (
+        double_at_pos > 0 &&
+        double_at_pos <= (at_mercurial_pos - 3) &&
+        at_mercurial_pos == target_name.size() - 10
+    );
+    // Need to check matches_format is true before calling GetCredentialUsername or we may get
+    // ERROR_NOT_FOUND from CredRead, if the target_name is not for a CRED_TYPE_GENERIC credential.
+
+
+    return matches_format &&
+        (_wcsnicmp(GetCredentialUsername(target_name).c_str(), username.c_str(), double_at_pos) == 0);
+}
+
+bool IsGitCredential(const wstring& target_name, const wstring& username) {
+    // git://<scheme>://<username>@<hostname> or git:<scheme>://<hostname> 
+    return (target_name.find(L"git:") == 0) && (_wcsnicmp(GetCredentialUsername(target_name).c_str() ,username.c_str(), username.size()) == 0);
+
+}
+
+bool IsIntrepidCredential(const wstring& target_name, const wstring& username) {
+    return (target_name.find(HOLY_GRADLE_CREDENTIAL_PREFIX) == 0) && (_wcsnicmp(GetCredentialUsername(target_name).c_str(), username.c_str(), username.size()) == 0);
+}
+
+wstring GetIntrepidCredentialName(const wstring& target_name) {
+    return target_name.substr(11);
+}
+
+bool HasBasis(const map<wstring, list<wstring>>& bases, wstring credential_name) {
+    for (auto b = bases.begin(); b != bases.end(); ++b) {
+        auto basis_credentials = b->second;
+        auto found_credential_it = find(basis_credentials.begin(), basis_credentials.end(), credential_name);
+        if (found_credential_it != basis_credentials.end()) {
+            return true;
+        }
     }
-    return is_mercurial;
+    return false;
+}
+
+wstring GetUserName()
+{
+    DWORD usernameLen = UNLEN;
+    wchar_t usernameBuffer[UNLEN];
+    if (GetUserName(usernameBuffer, &usernameLen)) {
+        return usernameBuffer;
+    } else {
+        return L"";
+    }
+}
+
+void RequestUsernameAndPassword(wstring& username, wstring& password)
+{
+    wstring usernameDefault(GetUserName());
+    wcout << L"Username [ENTER to accept default '" << usernameDefault << L"']: ";
+    getline(wcin, username);
+    if (username.empty()) {
+        username = usernameDefault;
+    }
+    if (username.empty()) {
+        wcerr << L"ERROR: Empty username" << endl;
+        exit(1);
+    }
+
+    cout << "Password: ";
+    echo(false);
+    getline(wcin, password);
+    echo(true);
+    wcout << endl;
+    if (password.empty()) {
+        wcerr << L"ERROR: Empty password" << endl;
+        exit(1);
+    }
 }
 
-BOOL IsGitCredential(const wstring& target_name, const wstring& username) {
-    // git://<scheme>://<username>@<hostname>
-    if (target_name.find(L"git://") != 0) { // Starts with "git://"
-        return FALSE;
-    }
-    
-    size_t username_pos = target_name.find(username);
-    if (username_pos == wstring::npos) { // Contains username
-        return FALSE;
-    }
-    if (target_name.substr(username_pos - 3, 3) != L"://") { // Username preceded by "://"
-        return FALSE;
+bool GetPathFromEnv(const wstring& name, wstring& value) {
+    wchar_t raw_value[MAX_PATH];
+    DWORD length = ::GetEnvironmentVariable(name.c_str(), raw_value, MAX_PATH);
+    bool ok = !(length == 0 || length > MAX_PATH);
+    if (ok) {
+        value.assign(raw_value, length);
     }
-    if (username_pos - 3 <= 10) { // "://<username>" is preceded by at least one character
-        return FALSE;
+    return ok;
+}
+
+bool GetGradleUserHome(wstring& home) {
+    bool found_home = false;
+    if (GetPathFromEnv(L"GRADLE_USER_HOME", home)) {
+        found_home = (home.size() > 0);
+    } else {
+        if (GetPathFromEnv(L"USERPROFILE", home)) {
+            auto size = home.size();
+            if (size > 0) {
+                if (home[size - 1] != L'\\') {
+                    home += L'\\';
+                }
+                home += L".gradle";
+                found_home = true;
+            }
+        }
     }
-    
-    if (target_name.find(L"@") != (username_pos + username.size())) { // Username followed by "@"
-        return FALSE;
-    }
-    if (target_name.size() <= (username_pos + username.size() + 1)) { // Text follows the "@"
-        return FALSE;
-    }
-    
-    return TRUE;
+    return found_home;
 }
 
-BOOL IsIntrepidCredential(const wstring& target_name) {
-    return target_name.find(L"Intrepid - ") == 0;
+wstring GetCredentialBasisFileName() {
+    // Statically cache the result, because this function may be called multiple times and it won't change.
+    static wstring basis_file_name;
+    if (basis_file_name.size() > 0) {
+        return basis_file_name;
+    }
+
+    wstring home;
+    if (GetGradleUserHome(home)) {
+        wstringstream basis_file_name_stream;
+        basis_file_name_stream << home;
+        wchar_t last_char = home[home.size() - 1];
+        if (!(last_char == L'/' || last_char == L'\\')) {
+            basis_file_name_stream << L'\\';
+        }
+        basis_file_name_stream << HOLY_GRADLE_DIR_NAME << L'\\' << CREDENTIAL_BASIS_FILE_NAME;
+        basis_file_name = basis_file_name_stream.str();
+    } else {
+        wcerr << L"ERROR: Failed to read environment variable " GRADLE_USER_HOME_ENV_VAR_NAME L" or "
+            USERPROFILE_ENV_VAR_NAME L"." << endl;
+        wcerr << L"One of these must be set to locate the credential basis file." << endl;
+        basis_file_name = L"???";
+    }
+
+    return basis_file_name;
 }
 
-int UpdateAllCredentials(wstring& username, wstring& password) {
+map<wstring, list<wstring>> ReadBases(const wstring& credentialBasisFileName) {
+    map<wstring, list<wstring>> bases;
+    wifstream in(credentialBasisFileName);
+    wstring current_basis;
+    wstring line;
+    unsigned long line_index = 0;
+    while (getline(in, line)) {
+        ++line_index;
+        wstring trimmed_line(trim(line));
+        if (trimmed_line.empty() || line[0] == L'#') {
+            // Ignore blank and comment lines.
+            continue;
+        } else if (isspace(line[0])) {
+            if (current_basis.empty()) {
+                wcerr << L"WARNING: Ignoring entry '" << trimmed_line
+                    << L"' on line " << to_wstring(line_index) << L" of " << credentialBasisFileName
+                    << L" because no basis line has been encountered yet." << endl;
+            } else {
+                bases[current_basis].push_back(trimmed_line);
+            }
+        } else {
+            // Warn the user if we haven't seen any entries under the current basis, before we set the next.
+            if (!current_basis.empty() && bases[current_basis].empty()) {
+                wcerr << L"WARNING: Basis credential " << current_basis << L" in " << credentialBasisFileName
+                    << L" has no credentials listed under it." << endl;
+            }
+            current_basis = line;
+            bases[current_basis]; // Access the key to create the value.
+        }
+    }
+
+    // Warn the user if we haven't seen any entries under the last basis.
+    if (!current_basis.empty() && bases[current_basis].empty()) {
+        wcerr << L"WARNING: Basis credential " << current_basis << L" in " << credentialBasisFileName
+            << L" has no credentials listed under it." << endl;
+    }
+
+    return bases;
+}
+
+list<wstring> GetDefaultCredentials(const wstring& username) {
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto bases = ReadBases(credentialBasisFileName);
+    list<wstring> defaultCredentials;
+
     PCREDENTIAL *pCredArray = NULL;
     DWORD dwCount = 0;
 
-    DeleteCredential(L"Mercurial");
-
-    int update_count = 0;
-
-    //Load all credentials into array.
     if (::CredEnumerate(NULL, 0, &dwCount, &pCredArray)) {
         for (DWORD dwIndex = 0; dwIndex < dwCount; dwIndex++) {
             PCREDENTIAL pCredential = pCredArray[dwIndex];
 
             wstring target_name(pCredential->TargetName);
 
-            //PrintCredential(pCredential);
-
             if (IsMercurialCredential(target_name, username) ||
                 IsGitCredential(target_name, username)
             ) {
-                wcout << "Updated: " << target_name << endl;
-
-                StoreCredential(target_name, password, wstring(pCredential->UserName));
-                update_count++;
-            } else if (IsIntrepidCredential(target_name)) {
-                // An Intrepid credential starts with "Intrepid - "
-
-                // Ask user for password
-                wcout << "Update '" << target_name << "' with the password you supplied? If so, type 'y': ";
-                string confirm;
-                std::getline(std::cin, confirm);
-                if (confirm[0] == 'y' || confirm[0] == 'Y') {
-                    wcout << "Updated: " << target_name << endl;
-                    StoreCredential(target_name, password, wstring(pCredential->UserName));
-                    update_count++;
-                } else {
-                    wcout << "Skipped: " << target_name << endl;
+                if (!HasBasis(bases, target_name)) {
+                    defaultCredentials.push_back(target_name);
+                }
+            } else if (IsIntrepidCredential(target_name, username)) {
+                wstring credential_name = GetIntrepidCredentialName(target_name);
+                if (bases.find(credential_name) == bases.end()) {
+                    defaultCredentials.push_back(target_name);
                 }
             }
         }
@@ -213,48 +375,167 @@
         ::CredFree(pCredArray);
     }
 
-    return update_count;
+    return defaultCredentials;
+}
+
+/*
+    Update the username & password for all non-basis credentials for the given username.
+*/
+void UpdateCredentialsFromDefault()
+{
+    wstring username;
+    wstring password;
+    RequestUsernameAndPassword(username, password);
+
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto defaultCredentials = GetDefaultCredentials(username);
+    if (defaultCredentials.empty()) {
+        wcout << L"ERROR: There are no default credentials listed in " << endl
+            << credentialBasisFileName << L"." << endl;
+        exit(1);
+    }
+
+    for (auto it = defaultCredentials.begin(); it != defaultCredentials.end(); ++it) {
+        StoreCredential(*it, username, password);
+    }
+}
+
+/*
+    Update the username & password for the basis credential and for all credentials listed under it
+    in the credential-bases.txt file.
+*/
+void UpdateCredentialsFromBasis(const wstring& basis)
+{
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto bases = ReadBases(credentialBasisFileName);
+    auto basisCredentials = bases[basis];
+    if (basisCredentials.empty()) {
+        wcout << L"ERROR: There are no credentials for basis '" << basis << L"' listed in " << endl
+            << credentialBasisFileName << L"." << endl;
+        exit(1);
+    }
+
+    wstring username;
+    wstring password;
+    RequestUsernameAndPassword(username, password);
+
+    auto credentialName = HOLY_GRADLE_CREDENTIAL_PREFIX + basis;
+    StoreCredential(credentialName, username, password);
+    for (auto it = basisCredentials.begin(); it != basisCredentials.end(); ++it) {
+        StoreCredential(*it, username, password);
+    }
+}
+
+void ListBases() {
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto bases = ReadBases(credentialBasisFileName);
+    wcout << L"The following basis credentials exist in " << credentialBasisFileName << L":" << endl << endl;
+    for (auto it = bases.begin(); it != bases.end(); ++it) {
+        wcout << it->first << endl;
+    }
 }
 
-int _tmain(int argc, _TCHAR* argv[]) {
+void ListBasis(const wstring& basis) {
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto bases = ReadBases(credentialBasisFileName);
+    auto basisCredentials = bases[basis];
+    if (basisCredentials.empty()) {
+        wcout << L"There are no Git, or Mercurial credentials listed for " << basis << L" in " << endl
+            << credentialBasisFileName << L"." << endl;
+    } else {
+        wcout << L"The following Git or Mercurial credentials are listed for " << basis << L" in " << endl
+            << credentialBasisFileName << L":" << endl << endl;
+        for (auto it = basisCredentials.begin(); it != basisCredentials.end(); ++it) {
+            wcout << *it << endl;
+        }
+    }
+}
+
+void ListDefaults(const wstring& username) {
+    wstring credentialBasisFileName = GetCredentialBasisFileName();
+    auto defaultCredentials = GetDefaultCredentials(username);
+    if (defaultCredentials.empty()) {
+        wcout << L"There are no Git, Mercurial, and Holy Gradle credentials listed in " << endl
+            << credentialBasisFileName << L"." << endl;
+    } else {
+        wcout << L"The following Git, Mercurial, and Holy Gradle credentials are not listed in " << endl
+            << credentialBasisFileName << L":" << endl << endl;
+        for (auto it = defaultCredentials.begin(); it != defaultCredentials.end(); ++it) {
+            wcout << *it << endl;
+        }
+    }
+}
+
+void ShowUsage(wchar_t* program_name) {
+    wcout << L"Usage: " << program_name << L" <command> <arguments>" << endl;
+    wcout << endl;
+    wcout << L"Main commands:" << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" for-defaults" << endl;
+    wcout << L"    Prompts for a username and password, then sets them as the content of" << endl;
+    wcout << L"    credential \"" << HOLY_GRADLE_CREDENTIAL_PREFIX L"Domain Credentials\"," << endl;
+    wcout << L"    all Git and Mercurial credentials not listed under any name in" << endl;
+    wcout << L"    " << GetCredentialBasisFileName() << L", and" << endl;
+    wcout << L"    all \"" << HOLY_GRADLE_CREDENTIAL_PREFIX << L"*\" credentials not listed as bases there." << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" for-basis <basis_name>" << endl;
+    wcout << L"    Prompts for a username and password, then sets them as the content of" << endl;
+    wcout << L"    credential \"" << HOLY_GRADLE_CREDENTIAL_PREFIX << L"<basis_name>\", and" << endl;
+    wcout << L"    all credentials listed under <basis_name> in" << endl;
+    wcout << L"    " << GetCredentialBasisFileName() << endl;
+    wcout << endl;
+    wcout << L"Other commands:" << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" list-defaults [<username>]" << endl;
+    wcout << L"    Lists all the credentials which would be updated by the 'for-default' command" << endl;
+    wcout << L"    for the given <username> (default: '" << GetUserName() << "')." << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" list-bases" << endl;
+    wcout << L"    Lists all the <basis_name> values in" << endl;
+    wcout << L"    " << GetCredentialBasisFileName() << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" list-basis <basis_name>" << endl;
+    wcout << L"    Lists all the credentials which would be updated by the 'for-basis <basis_name>' command" << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" get <credential_name>" << endl;
+    wcout << L"    Outputs the content of the named credential; normally \"<username>&&&<password>\"." << endl;
+    wcout << endl;
+    wcout << L"  " << program_name << L" set <credential_name> <username> <password>" << endl;
+    wcout << L"    Sets the content of the named credential to \"<username>&&&<password>\"." << endl;
+    wcout << endl;
+}
+
+int _tmain(int argc, wchar_t* argv[]) {
 
     if (argc == 1) {
-        cout << "This program will update all of your Mercurial and Intrepid credentials ";
-        cout << "in the Windows Credential Manager. You will be prompted to confirm ";
-        cout << "updating any Intrepid credentials." << endl << endl;
-        cout << "Usage for storing: <key> <username> <value>" << endl;
-        cout << "Usage for retrieving: <key>" << endl << endl;
+        ShowUsage(argv[0]);
+        exit(1);
+    }
 
-        DWORD usernameLen = 100;
-        TCHAR usernameBuffer[100];
-        GetUserName(usernameBuffer, &usernameLen);
-        wstring username(usernameBuffer);
-        wcout << "Using username: " << username << endl;
+    const size_t command_length = wcsnlen_s(argv[1], INPUT_LENGTH_LIMIT);
 
-        wstring password;
-        while (password.size() == 0) {
-            cout << "Enter your password: ";
-            string pw;
-            echo(false);
-            std::getline(std::cin, pw);
-            echo(true);
-            wcout << endl;
-            password = wstring(pw.begin(), pw.end());
-        }
-
-        int update_count = UpdateAllCredentials(username, password);
-        wcout << "---------------------------------------------------------\n";
-        wcout << "Update complete - " << update_count << " credentials modified. Press enter...";
-        cin.get();
-    } else if (argc == 2) {
-        wstring readKey(argv[1]);
+    if (_wcsnicmp(argv[1], L"get", command_length) == 0 && argc == 3) {
+        wstring readKey(argv[2]);
         ReadAndPrintCredential(readKey);
-    } else if (argc == 4) {
-        wstring writeKey(argv[1]);
-        wstring username(argv[2]);
-        wstring password(argv[3]);
-        StoreCredential(writeKey, password, username);
+    } else if (_wcsnicmp(argv[1], L"set", command_length) == 0 && argc == 5) {
+        wstring writeKey(argv[2]);
+        wstring username(argv[3]);
+        wstring password(argv[4]);
+        StoreCredential(writeKey, username, password);
+    } else if (_wcsnicmp(argv[1], L"for-basis", command_length) == 0 && argc == 3) {
+        UpdateCredentialsFromBasis(argv[2]);
+    } else if (_wcsnicmp(argv[1], L"for-defaults", command_length) == 0 && argc == 2) {
+        UpdateCredentialsFromDefault();
+    } else if (_wcsnicmp(argv[1], L"list-bases", command_length) == 0 && argc == 2) {
+        ListBases();
+    } else if (_wcsnicmp(argv[1], L"list-basis", command_length) == 0 && argc == 3) {
+        ListBasis(argv[2]);
+    } else if (_wcsnicmp(argv[1], L"list-defaults", command_length) == 0 && argc == 2) {
+        ListDefaults(GetUserName());
+    } else if (_wcsnicmp(argv[1], L"list-defaults", command_length) == 0 && argc == 3) {
+        ListDefaults(argv[2]);
     } else {
+        ShowUsage(argv[0]);
         exit(1);
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d credential-store/credential-store.rc
Binary file credential-store/credential-store.rc has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d credential-store/credential-store.vcxproj
--- a/credential-store/credential-store.vcxproj	Sat Jun 10 22:29:31 2017 +0100
+++ b/credential-store/credential-store.vcxproj	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -22,7 +22,7 @@
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>Unicode</CharacterSet>
     <UseOfAtl>Static</UseOfAtl>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
@@ -30,7 +30,7 @@
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>Unicode</CharacterSet>
     <UseOfAtl>Static</UseOfAtl>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/BuildHelper.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/BuildHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,17 @@
+package holygradle.custom_gradle
+
+import org.gradle.BuildResult
+
+public class BuildHelper {
+    public static boolean buildFailedDueToVersionConflict(BuildResult result) {
+        Throwable e = result.failure
+        while (e != null) {
+            final String message = e.message
+            if (message != null && message.startsWith("A conflict was found between the following modules:")) {
+                return true
+            }
+            e = e.cause
+        }
+        return false
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/CustomGradleCorePlugin.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/CustomGradleCorePlugin.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/CustomGradleCorePlugin.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,11 +2,15 @@
 
 import holygradle.custom_gradle.util.ProfilingHelper
 import holygradle.custom_gradle.util.VersionNumber
+import org.gradle.BuildListener
+import org.gradle.BuildResult
 import holygradle.io.FileHelper
 import org.gradle.api.DefaultTask
 import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.artifacts.ModuleVersionIdentifier
+import org.gradle.api.initialization.Settings
+import org.gradle.api.invocation.Gradle
 import org.gradle.api.tasks.Exec
 import org.gradle.api.tasks.wrapper.Wrapper
 import org.gradle.process.ExecSpec
@@ -81,22 +85,6 @@
                 holyGradleInitScriptFile.withOutputStream { os ->
                     os << CustomGradleCorePlugin.class.getResourceAsStream("/holygradle/init.d/holy-gradle-init.gradle")
                 }
-
-                // We move the default ".properties" file to ".properties.in", removing the "distributionUrl=" line.
-                // The "gradlew.bat" script will concatenate it with the distribution server URL (from the
-                // HOLY_GRADLE_REPOSITORY_BASE_URL environment variable) and the rest of the distribution path (which
-                // we write to a text file below).  This allows the same custom wrapper to be used from multiple sites
-                // which don't share a single server for the distribution.
-                final File propertiesInputFile = new File(wrapper.propertiesFile.toString() + ".in")
-                propertiesInputFile.withWriter { w ->
-                    wrapper.propertiesFile.withInputStream { is ->
-                        is.filterLine(w) { String line -> !line.startsWith("distributionUrl") }
-                    }
-                }
-                Files.delete(wrapper.propertiesFile.toPath())
-
-                File distributionPathFile = new File(project.projectDir, "/gradle/wrapper/distributionPath.txt")
-                distributionPathFile.text = "gradle-${project.gradle.gradleVersion}-bin.zip"
             }
         }
     
@@ -144,7 +132,8 @@
                     println "Gradle properties location: "
                     println "  ${gradlePropsFile.path}\n"
                     int pad = 35
-                    print "Custom distribution version: ".padRight(pad)
+                    print "Gradle version: ".padRight(pad)
+                    println project.gradle.gradleVersion
                     String latestCustomGradle = VersionNumber.getLatestUsingBuildscriptRepositories(project, "holygradle", "custom-gradle")
                     println versionInfoExtension.getVersion("custom-gradle") + " (latest: $latestCustomGradle)"
                     println "Init script version: ".padRight(pad) + project.holyGradleInitScriptVersion
@@ -207,6 +196,39 @@
                     }
                 }
             }
+
+            project.gradle.addBuildListener(new BuildListener() {
+                void buildFinished(BuildResult result) {
+                    if (BuildHelper.buildFailedDueToVersionConflict(result)) {
+//2345678901234567890123456789012345678901234567890123456789012345678901234567890 <-- 80-column ruler
+                        project.logger.error("""
+
+Run the 'dependencies' task to see a tree of dependencies for each configuration
+in your project(s).  Any dependency which has two versions separated by an arrow
+("group:name:version1 -> version2") will cause a conflict.  The error message
+for this build will only report one version conflict but your project may have
+more, so check for any such arrows.
+
+There are two main ways to resolve such a conflict.
+
+1. Change the versions of some dependencies so that there is no conflict.  You
+may have to do this by changing the versions of other dependencies nearer the
+root of the dependency graph.
+
+2. Move one conflicting dependency version to a different configuration.  You
+may have to do this by changing the configurations of other dependencies nearer
+the root of the dependency graph.  In that case you may also need to change the
+target folder of that dependency, so that you are not trying to put two
+different versions in the same location.
+
+""")
+                    }
+                }
+                void buildStarted(Gradle gradle) {}
+                void projectsEvaluated(Gradle gradle) {}
+                void projectsLoaded(Gradle gradle) {}
+                void settingsEvaluated(Settings settings) {}
+            })
         }
 
         timer.endBlock()
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/VersionInfo.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/VersionInfo.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/VersionInfo.groovy	Fri May 03 13:55:15 2019 +0100
@@ -26,9 +26,8 @@
         this.project = project
         
         specify("gradle", project.gradle.gradleVersion)
-        specify("custom-gradle", project.gradle.gradleHomeDir.parentFile.parentFile.name.split("-")[-1])
         if (project.hasProperty("holyGradleInitScriptVersion")) {
-            specify("custom-gradle (init script)", project.holyGradleInitScriptVersion as String)
+            specify("custom Gradle init script", project.holyGradleInitScriptVersion as String)
         }
     }
     
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/CredentialSource.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/CredentialSource.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/CredentialSource.groovy	Fri May 03 13:55:15 2019 +0100
@@ -4,6 +4,10 @@
  * An interface for plugins which can supply a username and password for authentication.
  */
 public interface CredentialSource {
+    public static final String DEFAULT_CREDENTIAL_TYPE = "Domain Credentials"
+
+    CredentialStore getCredentialStore()
+
     /**
      * Returns a username for authentication.
      * @return A username for authentication.
@@ -15,4 +19,16 @@
      * @return A password for authentication.
      */
     String getPassword()
+
+    /**
+     * Returns the username stored in a particular "Intrepid - <credentialType>" credential.
+     * @return The username stored in a particular "Intrepid - <credentialType>" credential.
+     */
+    String username(String credentialType)
+
+    /**
+     * Returns the password stored in a particular "Intrepid - <credentialType>" credential.
+     * @return The password stored in a particular "Intrepid - <credentialType>" credential.
+     */
+    String password(String credentialType)
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/CredentialStore.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/CredentialStore.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,6 @@
+package holygradle.custom_gradle.plugin_apis
+
+interface CredentialStore {
+    Credentials readCredential(String key)
+    Credentials writeCredential(String key, Credentials credentials)
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/Credentials.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/custom_gradle/plugin_apis/Credentials.java	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,43 @@
+package holygradle.custom_gradle.plugin_apis;
+
+/**
+ * Simple holder class for username and password.
+ */
+public final class Credentials {
+    public final String userName;
+    public final String password;
+
+    public Credentials(String userName, String password) {
+        this.userName = userName;
+        this.password = password;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Credentials that = (Credentials) o;
+
+        if (password != null ? !password.equals(that.password) : that.password != null) return false;
+        //noinspection RedundantIfStatement
+        if (userName != null ? !userName.equals(that.userName) : that.userName != null) return false;
+
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = userName != null ? userName.hashCode() : 0;
+        result = 31 * result + (password != null ? password.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "Credentials{" +
+                "userName='" + userName + '\'' +
+                ", password='********'" +
+                '}';
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/io/FileHelper.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/io/FileHelper.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/io/FileHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -9,6 +9,10 @@
  * Utility methods related to files.
  */
 class FileHelper {
+    public static boolean isEmptyDirectory(File file) {
+        return file.isDirectory() && file.list().length == 0
+    }
+
     public static void ensureDeleteFile(File file, String purpose = null) {
         if (!file.exists()) {
             return
@@ -22,6 +26,7 @@
         } catch (IOException e) {
             throw new IOException("Failed to delete ${file}${formatPurpose(purpose)}", e)
         }
+        ensureDeleted(file, purpose)
     }
 
     public static void ensureDeleteDirRecursive(File dir, String purpose = null) {
@@ -48,13 +53,25 @@
             ) { File f ->
                 if (Link.isLink(f) || !f.isDirectory()) {
                     f.writable = true
-                    Files.delete(f.toPath())
+                    RetryHelper.retry(10, 1000, null, "delete ${dir}${formatPurpose(purpose)}") {
+                        Files.delete(f.toPath())
+                    }
                 }
                 return FileVisitResult.CONTINUE
             }
         } catch (IOException e) {
             throw new IOException("Failed to delete ${dir}${formatPurpose(purpose)}", e)
         }
+        ensureDeleted(dir, purpose)
+    }
+
+    // Try to wait until the file is really deleted, because sometimes there's an asynchronous delay.
+    private static void ensureDeleted(File file, String purpose) {
+        RetryHelper.retry(10, 1000, null, "delete ${file}${formatPurpose(purpose)}") {
+            if (file.exists()) {
+                throw new IOException("Failed to delete ${file}${formatPurpose(purpose)}")
+            }
+        }
     }
 
     public static void ensureMkdir(File dir, String purpose = null) {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/io/Junction.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Junction.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Junction.groovy	Fri May 03 13:55:15 2019 +0100
@@ -54,39 +54,35 @@
     }
 
     /**
-     * Throws an exception if {@code link} exists and is not a directory junction.
-     * @param link The potential link to check.
-     */
-    public static void checkIsJunctionOrMissing(File link) {
-        // For simplicity in any error reporting, use canonical path for the link.
-        link = link.canonicalFile
-
-        if (link.exists() && !isJunction(link)) {
-            throw new RuntimeException(
-                "Cannot not delete or create a directory junction at '${link.path}' " +
-                "because a folder or file already exists there and is not a directory junction."
-            )
-        }
-    }
-
-    /**
      * Deletes the {@code link} if it exists and is a directory junction, then also deletes the underlying directory if
      * it is empty.  Does nothing if the {@code link} does not exist or is not a directory junction.
      * @param link The directory junction to delete
      */
     public static void delete(File link) {
         // For simplicity in any error reporting, use canonical path for the link.
-        link = link.canonicalFile
-
-        checkIsJunctionOrMissing(link)
+        File canonicalLink = link.canonicalFile
 
-        if (isJunction(link)) {
-            removeMountPoint(link.canonicalPath)
-
-            // Delete the mount point if the directory is empty
-            if (link.isDirectory() && link.list().length == 0) {
-                link.delete()
+        if (FileHelper.isEmptyDirectory(canonicalLink)) {
+            // Delete the existing "link" if it's actually an empty directory, because it may be a left-over from a
+            // previous failed attempt to delete a directory junction.  This has been observed occasionally and we
+            // suspect it's due to some background process temporarily having a lock on the folder -- for example, a
+            // virus scanner, or the Windows Indexing Service.
+            canonicalLink.delete()
+        } else if (isJunction(canonicalLink)) {
+            try {
+                removeMountPoint(canonicalLink.path)
+            } finally {
+                // Delete the mount point if the directory is empty.  We do this even if the mount point removal throws
+                // an exception, in case it sort-of worked.
+                if (FileHelper.isEmptyDirectory(canonicalLink)) {
+                    canonicalLink.delete()
+                }
             }
+        } else if (canonicalLink.exists()) {
+            throw new RuntimeException(
+                "Cannot not delete or create a directory junction at '${canonicalLink.path}' " +
+                "because a folder or file already exists there and is not a directory junction or an empty folder."
+            )
         }
     }
 
@@ -100,30 +96,37 @@
     public static void rebuild(File link, File target) {
         // For simplicity in any error reporting, use canonical paths for the link and target.
         // Also, directory junction targets must be absolute paths.
-        link = link.canonicalFile
-        target = getCanonicalTarget(link, target)
+        File canonicalLink = link.canonicalFile
 
-        checkIsJunctionOrMissing(link)
+        delete(canonicalLink)
 
+        target = getCanonicalTarget(canonicalLink, target)
         // Directory junctions can be created to non-existent targets but it breaks stuff so disallow it
         if (!target.exists()) {
-            throw new IOException("Cannot create link to non-existent target: from '${link}' to '${target}'")
+            throw new IOException("Cannot create link to non-existent target: from '${canonicalLink}' to '${target}'")
         }
 
-        FileHelper.ensureMkdirs(link, "for directory junction to '${target}'")
-
-        createMountPoint(link.path, target.path)
+        FileHelper.ensureMkdirs(canonicalLink, "for directory junction to '${target}'")
 
-        // createMountPoint will blindly create links to stuff that won't work, like network shares or non-existent
-        // targets. The only way I can see to detect this is to check if the resulting file exists. This will return
-        // false if the target is invalid even if the link has been successfully created.
-        if (!link.exists()) {
+        try {
+            createMountPoint(canonicalLink.path, target.path)
+        } catch (Win32Exception e) {
+            // If we failed to create the mount point, we should delete the folder we just created, so that we can fall
+            // back to symlink creation.  If we leave the folder, we'll fail to create a symlink from that location.
+            delete(canonicalLink)
+            throw e
+        }
+
+        // Even if createMountPoint doesn't throw, it will blindly create links to stuff that won't work, like network
+        // shares or non-existent targets. The only way I can see to detect this is to check if the resulting file
+        // exists. This will return false if the target is invalid even if the link has been successfully created.
+        if (!canonicalLink.exists()) {
             // Remove the link before continuing.
-            delete(link)
+            delete(canonicalLink)
             // This will be immediately caught by the outer "catch" block.  Junction.rebuild might also throw for
             // other reasons, which is why we don't just factor this out to another method returning "false" or
             // something.
-            throw new IOException("Failed to create directory junction from '${link}' to '${target}'.")
+            throw new IOException("Failed to create directory junction from '${canonicalLink}' to '${target}'.")
         }
     }
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/io/Link.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Link.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Link.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,7 @@
 package holygradle.io
 
+import holygradle.custom_gradle.util.RetryHelper
+
 import java.nio.file.Files
 import org.gradle.api.logging.Logging
 import org.gradle.api.logging.Logger
@@ -16,24 +18,35 @@
     }
 
     public static void delete(File link) {
-        if (link.exists()) {
-            linkTypeHelper(link, Symlink.&delete, Junction.&delete)
+        RetryHelper.retry(10, 1000, LOGGER, "delete link at ${link}") {
+            if (link.exists()) {
+                LOGGER.debug("Deleting link at ${link}")
+                linkTypeHelper(link, Symlink.&delete, Junction.&delete)
+            } else {
+                LOGGER.debug("Skipping delete link because there is no file at ${link}")
+            }
         }
     }
 
     public static void rebuild(File link, File target) {
-        // Delete the link first in case it already exists as the wrong type.  The Junction.rebuild and Symlink.rebuild
-        // methods will also do this check themselves in case they are called directly, but we need to do it here also
-        // in case we are deleting a symlink to replace it with a directory junction, or vice versa.
-        if (isLink(link)) {
-            delete(link)
-        }
+        RetryHelper.retry(10, 1000, LOGGER, "rebuild link at ${link}") {
+            // Delete the link first in case it already exists as the wrong type.  The Junction.rebuild and Symlink.rebuild
+            // methods will also do this check themselves in case they are called directly, but we need to do it here also
+            // in case we are deleting a symlink to replace it with a directory junction, or vice versa.
+            if (isLink(link)) {
+                delete(link)
+            }
 
-        try {
-            Junction.rebuild(link, target)
-        } catch (Exception e) {
-            LOGGER.debug("Failed to create a directory junction from '${link}' to '${target}'. Falling back to symlinks.", e)
-            rebuildAsSymlink(link, target)
+            try {
+                LOGGER.debug("Creating link from ${link} to ${target}")
+                Junction.rebuild(link, target)
+            } catch (Exception e) {
+                LOGGER.debug(
+                    "Failed to create a directory junction from '${link}' to '${target}'. Falling back to symlinks.",
+                    e
+                )
+                rebuildAsSymlink(link, target)
+            }
         }
     }
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/io/Symlink.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Symlink.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/io/Symlink.groovy	Fri May 03 13:55:15 2019 +0100
@@ -9,16 +9,27 @@
     }
 
     public static void delete(File link) {
-        checkIsSymlinkOrMissing(link)
+        // For simplicity in any error reporting, use canonical path for the link.
+        File canonicalLink = link.canonicalFile
 
-        if (isSymlink(link)) {
-            link.delete()
+        if (FileHelper.isEmptyDirectory(canonicalLink)) {
+            // Delete the existing "link" if it's actually an empty directory, because it may be a left-over from a
+            // previous failed attempt to delete a directory junction.  This has been observed occasionally and we
+            // suspect it's due to some background process temporarily having a lock on the folder -- for example, a
+            // virus scanner, or the Windows Indexing Service.
+            canonicalLink.delete()
+        } else if (isSymlink(canonicalLink)) {
+            canonicalLink.delete()
+        } else if (canonicalLink.exists()) {
+            throw new RuntimeException(
+                "Cannot not delete or create a symlink at '${canonicalLink.path}' " +
+                "because a folder or file already exists there and is not a symlink or an empty folder."
+            )
         }
     }
     
     public static void rebuild(File link, File target) {
-        checkIsSymlinkOrMissing(link)
-
+        // For simplicity in any error reporting, use canonical path for the link.
         File canonicalLink = link.canonicalFile
 
         // Delete the symlink if it exists
@@ -57,19 +68,6 @@
         }
     }
 
-    /**
-     * Throws an exception if {@code link} exists and is not a symlink.
-     * @param link The potential link to check.
-     */
-    public static void checkIsSymlinkOrMissing(File link) {
-        if (link.exists() && !isSymlink(link)) {
-            throw new RuntimeException(
-                "Cannot not delete or create a symlink at '${link.path}' " +
-                "because a folder or file already exists there and is not a symlink."
-            )
-        }
-    }
-
     public static File getTarget(File link) {
         return Files.readSymbolicLink(link.toPath()).toFile()
     }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/groovy/holygradle/process/ExecHelper.groovy
--- a/custom-gradle-core-plugin/src/main/groovy/holygradle/process/ExecHelper.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/main/groovy/holygradle/process/ExecHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,7 @@
 package holygradle.process
 
+import org.gradle.api.logging.LogLevel
+import org.gradle.api.logging.Logger
 import org.gradle.process.ExecResult
 import org.gradle.process.ExecSpec
 
@@ -7,11 +9,40 @@
  * Utility methods related to executing processes.
  */
 class ExecHelper {
-    public static executeAndReturnResultAsString(
+    public static String executeAndReturnResultAsString(
+        Logger logger,
+        Closure<ExecResult> execMethod,
+        Closure configureSpec
+    ) {
+        return executeAndReturnResultAsString(logger, execMethod, { return true }, configureSpec)
+    }
+
+    public static String executeAndReturnResultAsString(
+        Logger logger,
         Closure<ExecResult> execMethod,
-        Closure configureSpec,
-        Closure throwOnError
+        Closure throwForExitValue,
+        Closure configureSpec
+    ) {
+        def streams = execute(logger, execMethod, throwForExitValue, configureSpec)
+        return streams.stdout.toString().trim()
+    }
+
+    public static Map<String, OutputStream> execute(
+        Logger logger,
+        Closure<ExecResult> execMethod,
+        Closure configureSpec
     ) {
+        return execute(logger, execMethod, { return true }, configureSpec)
+    }
+
+    public static Map<String, OutputStream> execute(
+        Logger logger,
+        Closure<ExecResult> execMethod,
+        Closure throwForExitValue,
+        Closure configureSpec
+    ) {
+        String commandLine = null
+
         OutputStream stdout = new ByteArrayOutputStream()
         OutputStream stderr = new ByteArrayOutputStream()
         ExecResult execResult = execMethod { ExecSpec spec ->
@@ -19,11 +50,35 @@
             spec.setStandardOutput stdout
             spec.setErrorOutput stderr
             spec.setIgnoreExitValue true
+
+            commandLine = spec.commandLine
         }
-        int exit_value = execResult.getExitValue()
-        if ((exit_value != 0) && throwOnError(exit_value)) {
-            execResult.rethrowFailure()
+        int exitValue = execResult.getExitValue()
+        def shouldThrow = throwForExitValue(exitValue)
+
+        if (exitValue != 0) {
+            LogLevel logLevel = (shouldThrow ? LogLevel.ERROR : LogLevel.INFO)
+            logger.info "Will ${shouldThrow ? '' : 'not '}throw for exitValue ${exitValue} from commandLine ${commandLine}."
+            if (shouldThrow) {
+                logger.error "Failed with exitValue ${exitValue} from commandLine ${commandLine}."
+            }
+            [
+                "Standard": stdout,
+                "Error": stderr
+            ].each { name, stream ->
+                logger.log logLevel, "${name} output stream follows. >>>"
+                stream.toString().eachLine { logger.log logLevel, it }
+                logger.log logLevel, "<<< ${name} output stream ends."
+
+            }
+
+            if (shouldThrow) {
+                execResult.assertNormalExitValue()
+            }
         }
-        stdout.toString().trim();
+        return [
+            "stdout": stdout,
+            "stderr": stderr
+        ]
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/java/holygradle/jna/platform/win32/WinCred.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/main/java/holygradle/jna/platform/win32/WinCred.java	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,114 @@
+package holygradle.jna.platform.win32;
+
+import com.sun.jna.*;
+import com.sun.jna.ptr.*;
+import com.sun.jna.win32.*;
+
+import java.util.*;
+
+import static holygradle.jna.platform.win32.WinBase.*;
+
+/**
+ * Based on http://stackoverflow.com/questions/38404517/how-to-map-windows-api-credwrite-credread-in-jna.
+ */
+public interface WinCred extends StdCallLibrary {
+    WinCred INSTANCE = (WinCred) Native.loadLibrary("Advapi32", WinCred.class, W32APIOptions.UNICODE_OPTIONS);
+
+    int CRED_TYPE_GENERIC = 1;
+
+    int CRED_PERSIST_NONE = 0;
+    int CRED_PERSIST_SESSION = 1;
+    int CRED_PERSIST_LOCAL_MACHINE = 2;
+    int CRED_PERSIST_ENTERPRISE = 3;
+
+    boolean CredWrite(
+            CREDENTIAL.ByReference Credential,
+            int Flags
+    );
+
+    boolean CredRead(
+            String TargetName,
+            int Type,
+            int Flags,
+            PointerByReference Credential
+    );
+
+    void CredFree(Pointer cred);
+
+    class CREDENTIAL extends Structure implements AutoCloseable {
+        public int Flags;
+        public int Type;
+        public WString TargetName;
+        public WString Comment;
+        public FILETIME LastWritten;
+        public int CredentialBlobSize;
+        public Pointer CredentialBlob;
+        public int Persist;
+        public int AttributeCount;
+        public Pointer Attributes;
+        public WString TargetAlias;
+        public WString UserName;
+        private Pointer RawMemBlock;
+
+        public static class ByReference extends CREDENTIAL implements Structure.ByReference {
+            public ByReference() {
+            }
+
+            public ByReference(Pointer memory) {
+                super(memory);
+            }
+        }
+
+        public CREDENTIAL() { }
+
+        public CREDENTIAL(Pointer ptr) {
+            // initialize from the raw memory block returned to us by ADVAPI32
+            super(ptr) ;
+            RawMemBlock = ptr;
+            read() ;
+        }
+
+        @Override
+        protected List<String> getFieldOrder() {
+            return Arrays.asList(
+                    "Flags",
+                    "Type",
+                    "TargetName",
+                    "Comment",
+                    "LastWritten",
+                    "CredentialBlobSize",
+                    "CredentialBlob",
+                    "Persist",
+                    "AttributeCount",
+                    "Attributes",
+                    "TargetAlias",
+                    "UserName"
+            );
+        }
+
+        @Override
+        public void close() throws Exception {
+            WinCred.INSTANCE.CredFree(RawMemBlock);
+        }
+    }
+
+//    public static class CREDENTIAL_ATTRIBUTE extends Structure {
+//        public String Keyword;
+//        public int Flags;
+//        public int ValueSize;
+//        public byte[] Value = new byte[128];
+//
+//        public static class ByReference extends CREDENTIAL_ATTRIBUTE implements Structure.ByReference {
+//        }
+//
+//        @Override
+//        protected List<String> getFieldOrder() {
+//            return Arrays.asList(
+//                    "Keyword",
+//                    "Flags",
+//                    "ValueSize",
+//                    "Value"
+//            );
+//        }
+//    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/main/java/holygradle/jna/platform/win32/WinCredUtil.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/main/java/holygradle/jna/platform/win32/WinCredUtil.java	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,59 @@
+package holygradle.jna.platform.win32;
+
+import com.sun.jna.*;
+import com.sun.jna.ptr.*;
+
+import java.io.*;
+
+import static holygradle.jna.platform.win32.WinCred.*;
+
+public abstract class WinCredUtil {
+    public static Credential readCredential(String target) throws Exception {
+        PointerByReference pptr = new PointerByReference() ;
+        if (!WinCred.INSTANCE.CredRead(target, CRED_TYPE_GENERIC, 0, pptr)) {
+            throw new Win32Exception(Native.getLastError());
+        }
+        try (CREDENTIAL cred = new CREDENTIAL(pptr.getValue())) {
+            String username = cred.UserName.toString();
+            String password = new String(cred.CredentialBlob.getByteArray(0,cred.CredentialBlobSize), "UTF-16LE");
+            return new Credential(username, password);
+        }
+    }
+
+    public static void writeCredential(
+        String target,
+        String username,
+        String password,
+        int persistence
+    ) throws UnsupportedEncodingException {
+        // prepare the credential blob
+        byte[] credBlob = password.getBytes("UTF-16LE");
+        Memory credBlobMem = new Memory(credBlob.length);
+        credBlobMem.write(0 , credBlob , 0 , credBlob.length);
+
+        // Create the credential.  Note that we don't wrap this in a try-with-resources because we're allocating the
+        // CREDENTIAL structure, not Windows.
+        CREDENTIAL.ByReference cred = new CREDENTIAL.ByReference();
+        cred.Type = CRED_TYPE_GENERIC;
+        cred.TargetName = new WString(target);
+        cred.CredentialBlobSize = (int) credBlobMem.size();
+        cred.CredentialBlob = credBlobMem;
+        cred.Persist = persistence;
+        cred.UserName = new WString(username);
+
+        // save the credential
+        if (!WinCred.INSTANCE.CredWrite(cred, 0)) {
+            throw new Win32Exception(Native.getLastError());
+        }
+    }
+
+    public static class Credential {
+        public String username;
+        public String password;
+
+        public Credential(String username, String password) {
+            this.username = username;
+            this.password = password;
+        }
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTest.groovy
--- a/custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -40,12 +40,21 @@
             Link.delete(link)
         }
 
-        // Act
-        Link.rebuild(link, target)
+        try {
+            // Act
+            Link.rebuild(link, target)
 
-        // Assert
-        Assert.assertTrue("Link exists", link.exists())
-        Assert.assertTrue("Link is symlink", Symlink.isSymlink(link))
+            // Assert
+            Assert.assertTrue("Link exists", link.exists())
+            Assert.assertTrue("Link is symlink", Symlink.isSymlink(link))
+        } finally {
+            // Delete the link, otherwise directory traversal may fail in future (if the target goes away), for example,
+            // when we next try to build and run the Holy Gradle!
+            if (link.exists()) {
+                Link.delete(link)
+            }
+            "net share ${SHARE_NAME} /DELETE".execute().waitForProcessOutput()
+        }
     }
 
     @Test
@@ -64,15 +73,23 @@
 
         Symlink.rebuild(link, target)
 
-        // Act
-        Link.rebuild(link, target)
+        try {
+            // Act
+            Link.rebuild(link, target)
 
-        // Assert
-        Assert.assertTrue("${link} should be a directory junction after rebuild.", Junction.isJunction(link))
+            // Assert
+            Assert.assertTrue("${link} should be a directory junction after rebuild.", Junction.isJunction(link))
+        } finally {
+            // Delete the link, otherwise directory traversal may fail in future (if the target goes away), for example,
+            // when we next try to build and run the Holy Gradle!
+            if (link.exists()) {
+                Link.delete(link)
+            }
+        }
     }
 
-    @Test(expected = IOException.class)
-    public void testFallbackToSymlinkIsLogged() {
+    @Test(expected = RuntimeException.class)
+    public void testLinkToNonExistentTargetFails() {
         // Arrange
 
         File target = new File("C:\\directory\\that\\doesnt\\exist\\hopefully\\").canonicalFile
@@ -84,16 +101,24 @@
 
         Logger logger = Logging.getLogger(Link.class)
 
-        // Act
-        Link.rebuild(link, target)
+        try {
+            // Act
+            Link.rebuild(link, target)
 
-        // Assert
-        Assert.assertTrue(logger.toString().contains(
-            "Failed to create a directory junction from '${link.toString()}' to '${target.toString()}'. " +
-            "Falling back to symlinks."
-        ))
-        Assert.assertTrue(logger.toString().contains(
-            "Directory junction and symlink creation failed from '${link.toString()}' to '${target.toString()}'."
-        ))
+            // Assert
+            Assert.assertTrue(logger.toString().contains(
+                "Failed to create a directory junction from '${link.toString()}' to '${target.toString()}'. " +
+                    "Falling back to symlinks."
+            ))
+            Assert.assertTrue(logger.toString().contains(
+                "Directory junction and symlink creation failed from '${link.toString()}' to '${target.toString()}'."
+            ))
+        } finally {
+            // Delete the link, otherwise directory traversal may fail in future (if the target goes away), for example,
+            // when we next try to build and run the Holy Gradle!
+            if (link.exists()) {
+                Link.delete(link)
+            }
+        }
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTestBase.groovy
--- a/custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTestBase.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/test/groovy/holygradle/io/LinkTestBase.groovy	Fri May 03 13:55:15 2019 +0100
@@ -176,6 +176,58 @@
        rebuild(link, missingDir)
     }
 
+
+    /**
+     * Test that you can rebuild a "link" which is originally an empty directory.
+     */
+    @Test
+    public void testRebuildEmptyDirectoryAsLink() {
+        // Arrange
+        File link = new File(testDir, "empty_dir").canonicalFile
+        Assert.assertTrue("link '$link' is absolute", link.absolute)
+        FileHelper.ensureDeleteDirRecursive(link, "for test setup")
+        FileHelper.ensureMkdirs(link, "for test setup")
+        File existingDir = new File(testDir, "existing_folder").canonicalFile
+        Assert.assertTrue("target '$existingDir' is absolute", existingDir.absolute)
+
+        // Act
+        rebuild(link, existingDir)
+
+        // Assert
+        File target = getTarget(link)
+        Assert.assertEquals("Target of '$link'", existingDir.canonicalFile, target.canonicalFile)
+    }
+
+    /**
+     * Test that you can't rebulid a "link" which is originally a directory, if the directory is not empty.
+     */
+    @Test
+    public void testRebuildNonEmptyDirectoryAsLinkFails() {
+        // Arrange
+        File link = new File(testDir, "non_empty_dir").canonicalFile
+        Assert.assertTrue("link '$link' is absolute", link.absolute)
+        FileHelper.ensureDeleteDirRecursive(link, "for test setup")
+        FileHelper.ensureMkdirs(link, "for test setup")
+        File file = new File(link, "dummy.txt")
+        file.text = "dummy file"
+        File existingDir = new File(testDir, "existing_folder").canonicalFile
+        Assert.assertTrue("target '$existingDir' is absolute", existingDir.absolute)
+
+        // Act
+        try {
+            rebuild(link, existingDir)
+            // Assert
+            Assert.fail("Rebuild of link at source location '${link}', which is a non-empty folder, should fail")
+        } catch (Exception ignored) {
+        }
+
+        // We have these asserts outside the catch block in case we introduce a bug where delete() deletes the folder or
+        // contents and doesn't throw an exception.
+        Assert.assertTrue("Non-empty folder in link location '${link}' should still exist", link.exists())
+        Assert.assertTrue("Link location '${link}' should still be a directory", link.isDirectory())
+        Assert.assertTrue("Folder contents under '${link}' should still exist", file.exists())
+    }
+
     /**
      * Test that you can delete a link whose target exists, and then the target still exists.
      */
@@ -243,6 +295,52 @@
     }
 
     /**
+     * Test that you can delete a "link" which is actually an empty directory.
+     */
+    @Test
+    public void testDeleteEmptyDirectoryAsLink() {
+        // Arrange
+        File link = new File(testDir, "empty_dir").canonicalFile
+        Assert.assertTrue("link '$link' is absolute", link.absolute)
+        FileHelper.ensureDeleteDirRecursive(link, "for test setup")
+        FileHelper.ensureMkdirs(link, "for test setup")
+
+        // Act
+        delete(link)
+
+        // Assert
+        Assert.assertFalse("Empty folder in link location '${link}' should be deleted", link.exists())
+    }
+
+    /**
+     * Test that you can't delete a "link" which is actually a directory, if the directory is not empty.
+     */
+    @Test
+    public void testDeleteNonEmptyDirectoryAsLinkFails() {
+        // Arrange
+        File link = new File(testDir, "non_empty_dir").canonicalFile
+        Assert.assertTrue("link '$link' is absolute", link.absolute)
+        FileHelper.ensureDeleteDirRecursive(link, "for test setup")
+        FileHelper.ensureMkdirs(link, "for test setup")
+        File file = new File(link, "dummy.txt")
+        file.text = "dummy file"
+
+        // Act
+        try {
+            delete(link)
+            // Assert
+            Assert.fail("Deletion of non-empty folder in link location '${link}' should fail")
+        } catch (Exception ignored) {
+        }
+
+        // We have these asserts outside the catch block in case we introduce a bug where delete() deletes the folder or
+        // contents and doesn't throw an exception.
+        Assert.assertTrue("Non-empty folder in link location '${link}' should still exist", link.exists())
+        Assert.assertTrue("Link location '${link}' should still be a directory", link.isDirectory())
+        Assert.assertTrue("Folder contents under '${link}' should still exist", file.exists())
+    }
+
+    /**
      * Directory junctions always use an absolute path internally but symlinks can use a relative path.  For test
      * comparisons and for making target folders, we always want the absolute target path.
      */
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/test/groovy/holygradle/process/ExecHelperTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/custom-gradle-core-plugin/src/test/groovy/holygradle/process/ExecHelperTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,51 @@
+package holygradle.process
+
+import org.gradle.api.Project
+import org.gradle.process.internal.ExecException
+import org.gradle.testfixtures.ProjectBuilder
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.ExpectedException
+
+class ExecHelperTest {
+    @Rule
+    public ExpectedException thrown = ExpectedException.none()
+
+    @Test
+    public void testThrowForExitValueWhenMatched() {
+        thrown.expect(ExecException.class)
+        doTestThrowForExitValue(23, 23)
+    }
+
+    @Test
+    public void testThrowForExitValueWhenUnmatched() {
+        doTestThrowForExitValue(23, 1)
+    }
+
+    @Test
+    public void testThrowForExitValueWhenZeroExit() {
+        doTestThrowForExitValue(0, 1)
+    }
+
+    @Test
+    public void testThrowWhenExecThrows() {
+        thrown.expect(ExecException.class)
+        final Project project = ProjectBuilder.builder().build()
+        ExecHelper.executeAndReturnResultAsString(
+            project.logger,
+            project.&exec,
+            { false },
+            { it.commandLine "non_existent_executable" }
+        )
+    }
+
+    private void doTestThrowForExitValue(int actual, int expected) {
+        final Project project = ProjectBuilder.builder().build()
+        ExecHelper.executeAndReturnResultAsString(
+            project.logger,
+            project.&exec,
+            { expected == it },
+            { it.commandLine "cmd", "/c", "exit /b ${actual}" }
+        )
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/test/groovy/holygradle/test/AbstractHolyGradleIntegrationTest.groovy
--- a/custom-gradle-core-plugin/src/test/groovy/holygradle/test/AbstractHolyGradleIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/test/groovy/holygradle/test/AbstractHolyGradleIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -91,7 +91,7 @@
             // Use custom init script.
             launcher.addArguments("-I", customInitScript.toString())
             // Access plugins from a local repo.
-            launcher.addArguments("-D${PLUGINS_REPO_OVERRIDE_SYSTEM_PROPERTY_KEY}=${pluginsRepoOverride.path}", "-u")
+            launcher.addArguments("-D${PLUGINS_REPO_OVERRIDE_SYSTEM_PROPERTY_KEY}=${pluginsRepoOverride.path}")
             maybeAddExtraArguments(launcher)
 
             ConfigureUtil.configure(closure, launcher)
@@ -99,23 +99,32 @@
             if (launcher.expectedFailures.size() == 0) {
                 launcher.run()
             } else {
-                OutputStream errorOutput = new ByteArrayOutputStream()
-                launcher.setStandardError(errorOutput)
                 String error = null
                 try {
                     launcher.run()
                 } catch (TaskExecutionException e) {
                     if (e.cause?.message?.startsWith("Could not install Gradle distribution from")) {
                         println "Failed to install base Gradle distribution."
-                        println "Try re-running tests with proxy arguments: -Dhttp.proxyHost=xxx -Dhttp.proxyPort=NNNN"
+                        println "Try re-running tests with proxy arguments: " +
+                            "-Dhttp.proxyHost=xxx -Dhttp.proxyPort=NNNN " +
+                            "-Dhttps.proxyHost=xxx -Dhttps.proxyPort=NNNN"
                     }
                 } catch (RuntimeException e) {
-                    println(e.toString())
-                    error = errorOutput.toString()
+                    //Print stack trace to stderr
+                    e.printStackTrace(System.err)
+
+                    // Store Exception message as String
+                    StringWriter errorStringWriter = new StringWriter()
+                    e.printStackTrace(new PrintWriter(errorStringWriter))
+                    error = errorStringWriter.toString()
                 }
                 if (error == null) {
                     fail("Expected failure but there was none.")
                 }
+
+
+                System.err.println("ERROR: ${error}")
+
                 launcher.expectedFailures.each {
                     assertTrue("Error message should contain '${it}' but it contained: ${error}.", error.contains(it))
                 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d custom-gradle-core-plugin/src/test/groovy/holygradle/test/RegressionFileHelper.groovy
--- a/custom-gradle-core-plugin/src/test/groovy/holygradle/test/RegressionFileHelper.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/custom-gradle-core-plugin/src/test/groovy/holygradle/test/RegressionFileHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -65,6 +65,10 @@
     }
     
     public void checkForRegression(String testName) {
+        checkForRegression(testName, false)
+    }
+
+    public void checkForRegression(String testName, boolean stripEmptyLines) {
         File okFile = getOkFile(testName)
         File testFile = getTestFile(testName)
         if (!okFile.exists()) {
@@ -73,7 +77,24 @@
         if (!testFile.exists()) {
             fail("Regression output file ${testFile.path} does not exist.")
         }
-        assertEquals("Regression file check for ${testFile.name}", okFile.text, testFile.text)
+        // This is annoying. The mechanism for replacing patterns doesn't allow for replacing multiple lines. So when
+        // we have a situation where a line occurs in test output in some circumstances and does not affect the test
+        // result, we can replace the line in question with null but then the test fails because of the empty line after.
+        // This stripEmptyLines mechanism allows all empty lines to be removed from the file in such a situation.
+        String okText = (stripEmptyLines) ? stripEmptyLinesFromText(okFile) : okFile.text
+        String fileText = (stripEmptyLines) ? stripEmptyLinesFromText(testFile) : testFile.text
+        assertEquals("Regression file check for ${testFile.name}", okText, fileText)
+    }
+
+    public String stripEmptyLinesFromText(File file) {
+        StringBuffer sb = new StringBuffer()
+        file.eachLine { String line ->
+            if (!line.equals("")) {
+                sb.append(line + "\n")
+            }
+        }
+        String linesRemoved = sb.toString()
+        return linesRemoved.trim()
     }
 
     public static String toStringWithPlatformLineBreaks(String lines) {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d developer-readme.md
--- a/developer-readme.md	Sat Jun 10 22:29:31 2017 +0100
+++ b/developer-readme.md	Fri May 03 13:55:15 2019 +0100
@@ -9,8 +9,8 @@
  - a redistribution of Gradle, including an init script which facilitates usage of the plugins
 
 # Prerequisites
- - Java JDK 1.7 - you do need the dev-kit, not just the run-time.
- - IntelliJ IDEA - optional but very useful.  Currently the source is developed with version 15.
+ - Java JDK 1.7 - you do need the dev-kit, not just the run-time.  1.8 won't work.
+ - IntelliJ IDEA - optional but very useful.  Currently the source is developed with version 2018.
  - JAVA_HOME environment variable pointing to your JDK e.g. JAVA_HOME=C:\Program Files\Java\jdk1.7.0_09
    - In IntelliJ IDEA, you may need to configure this for the project, in the "File > Project Structure..." dialog under
    "SDKs".  BUT, see the section below about 'gradle.properties', before attempting to open the project in IDEA.
@@ -31,7 +31,11 @@
     For this open File > Settings > Appearance & Behavior > Path Variables here you should add a setting for
     GRADLE_USER_HOME with the path to your gradle cache. 
  - You may also need to configure IntelliJ to point to your installed JDK, in the "Project Structure" dialog.
- - An Artifactory server configured with:
+ - Visual Studio 2017 with C++ support, and the Windows 8.1 SDK, to build credential-store.
+   - In the Visual Studio 2017 installer, on the "Individual Components" tab, you need to select "Compilers, build
+   tools, and runtimes > Windows Universal CRT SDK" or you'll get an error about being unable to find `stdio.h` when
+   compiling `stdafx.h`.
+ - For publishing, an Artifactory server configured with:
    - an Ivy repository for publishing Gradle plugins to. It should support releases and snapshots.
    - a remote repo pointing to Maven Central 
    - one for publishing plugin snapshots for testing modifications to plugins without affecting existing plugin users.
@@ -49,6 +53,7 @@
 ## Creating gradle.properties
 Create 'gradle.properties' in the root of your workspace add define these properties:
 ```
+chosenDevEnvVersion=VS120
 artifactoryServer=<fully qualified domain name of artifactory server, including port if necessary,
   e.g., http://artifact-server.company.com:8081/artifactory/>
 artifactoryPluginRepo=<name of the repository for obtaining dependent plugins, e.g., plugins-release>
@@ -60,6 +65,8 @@
 artifactoryPassword=<encrypted artifactory password>
 ```
 
+The 'chosenDevEnvVersion' should be, e.g., "VS150" to use the C++ compiler from Visual Studio 2017.
+
 Run 'gw tasks'.  You may need to supply proxy arguments if it's the first time you've run this version of Gradle
 (e.g., 'gw -Dhttp.proxyHost=proxyserver -Dhttp.proxyPort=8080').
 
@@ -192,12 +199,12 @@
  
 # Documentation
 Documentation was previously in the wiki for this repo but has moved to
-http://holygradle.bitbucket.org/, using AsciiDoc to allow for richer diagrams, linking, etc.
+http://holygradle.bitbucket.io/, using AsciiDoc to allow for richer diagrams, linking, etc.
 
 If you're using the Holy Gradle within a company, there may be a custom local build of those web
 pages available.
 
-## Installing Cygwin utilities.
+## Installing document generation utilities.
 
 To install AsciiDoc under Cygwin in Windows, follow these steps.
 
@@ -210,17 +217,12 @@
 ```
 
 To install GraphViz for diagrams, and Pygments for syntax highlighting, you have to install packages from
-`cygwinports.org`, with the following steps.
+the Python Package Index, with the following steps.
 
-1. Follow the instructions at `http://cygwinports.org/` to register their public key and add their site to your list of
-mirrors.
-2. Run `setup_x86_64.exe` again as described above, without the `-P` option, and install the packages "graphviz" and
-"python-pygments".  If you get the following error, add the `-X` command line option.
-```
-Mirror Error:  Setup.ini signature ftp://ftp.cygwinports.org/pub/cygwinports/x86_64/setup.bz2.sig from
-ftp://ftp.cygwinports.org/pub/cygwinports/ failed to verify.
-Possible corrupt mirror?  Setup.ini rejected.
-```
+1. Download Python 3.5 (https://www.python.org/downloads/release/python-350/). This version is
+required to avoid conflicts with Vitrea.
+2. Add the Python installation directory and the Scripts subdirectory to your PATH.
+3. Run `pip install Pygments graphvis`
 
 ## Building the documentation
 
@@ -231,7 +233,7 @@
 2. Run `gw buildPublicWebsite`.  (You can also run with `-Pquickly` to build without syntax
 colouring, which may be noticeably faster.)
 3. Run `hg addremove`, then commit and push to update the website.  The site is viewable at
-`http://holygradle.bitbucket.org/`.
+`http://holygradle.bitbucket.io/`.
 
 You can also build a custom local version for your own organisation, containing specialised or
 confidential information.  For that you need to set `publicWebsitePublishUrl` and run
diff -r 9b75eaff9e23 -r 48a0dd8dac1d devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvHandler.groovy
--- a/devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,17 +1,84 @@
 package holygradle.devenv
 
 import org.gradle.api.Project
+import org.gradle.process.ExecSpec
+import holygradle.process.ExecHelper
+
+import java.util.regex.Pattern
+import java.util.regex.Matcher
+
+/*
+    NOTE: If you change the Visual Studio location code in this class, also change it in credential-store/build.gradle.
+ */
 
 class DevEnvHandler {
     private Project project
     private DevEnvHandler parentHandler
-    private String devEnvVersion = null
+    private VSVersion devEnvVersion = null
     private String vsSolutionFile = null
     private List<String> buildPlatforms = null
     private String incredibuildPath = null
     private List<String> warningRegexes = []
     private List<String> errorRegexes = []
-    
+    public String vswhereLocation = null // Only public so it can be accessed from inside a closure.  Stupid Groovy.
+
+    public static class VSVersion {
+        private static final Pattern VERSION_PATTERN =
+            Pattern.compile(
+                /VS([0-9]+)(0)|/ + // "VSnnnCOMNTOOLS" environment variable
+                /([0-9]+)\.([0-9]+|\+)/, // "nn.n" vswhere version string, also allowing "nn.+"
+                Pattern.CASE_INSENSITIVE
+            )
+
+        private final String asString
+
+        public final String major
+        public final String minor
+        public final String rangeStart
+        public final String rangeEnd
+        public final String envVarName
+
+        public VSVersion(final String version) {
+            asString = version
+            Matcher versionMatcher = match(version)
+            if (versionMatcher.group(1) != null) {
+                // Matched "VSnnn"
+                major = versionMatcher.group(1)
+                minor = versionMatcher.group(2)
+            } else {
+                // Matched "nn.x"
+                major = versionMatcher.group(3)
+                minor = versionMatcher.group(4)
+            }
+
+            final char firstChar = version.charAt(0)
+            final boolean isEnvVarStyle = (Character.toLowerCase(firstChar) == ('v' as char))
+            final boolean isWildcardMinorVersion = isEnvVarStyle || (this.minor == '+')
+            envVarName = "VS${major}0COMNTOOLS"
+            if (isWildcardMinorVersion) {
+                rangeStart = "${major}.0"
+                rangeEnd = "${major.toInteger() + 1}.0"
+            } else {
+                rangeStart = "${major}.${this.minor}"
+                rangeEnd = "${major}.${minor.toInteger() + 1}"
+            }
+        }
+
+        // Pulled out as a static method because IntelliJ gives "field may be uninitialised" warnings otherwise.
+        private static Matcher match(String version) {
+            final Matcher versionMatcher = VERSION_PATTERN.matcher(version)
+            if (!versionMatcher.find()) {
+                throw new RuntimeException("Failed to parse DevEnv version '${version}'")
+            }
+            return versionMatcher
+        }
+
+        @Override
+        public String toString() {
+            return asString
+        }
+    }
+
     public DevEnvHandler(Project project, DevEnvHandler parentHandler) {
         this.project = project
         this.parentHandler = parentHandler
@@ -22,7 +89,7 @@
     }
     
     public void version(String ver) {
-        devEnvVersion = ver
+        devEnvVersion = new VSVersion(ver)
     }
     
     public void solutionFile(String f) {
@@ -68,7 +135,7 @@
         }
     }
         
-    public String getDevEnvVersion() {
+    public VSVersion getDevEnvVersion() {
         if (devEnvVersion == null) {
             if (parentHandler != null) {
                 parentHandler.getDevEnvVersion()
@@ -76,40 +143,126 @@
                 throw new RuntimeException(
                     "You must set the devenv version, for example, 'DevEnv { version \"VS120\"}' for the " +
                     "Visual Studio 2013 compiler, or \"VS100\" for the Visual Studio 2010 compiler. " +
-                    "This value is used to read the appropriate environment variable, for example, VS120COMMONTOOLS."
+                    "From Visual Studio 2017 onwards you can use a string without the \"VS\" prefix, " +
+                    "such as \"15.2\" to get an exact version match, or \"15.+\" to match only the major version. " +
+                    "This value is used to find the appropriate path to 'devenv.com'."
                 )
             }
         } else {
             devEnvVersion
         }
     }
-    
+
+    public File getCommonToolsPathFromVSWhere() {
+        final VSVersion version = getDevEnvVersion()
+        final String versionRange = "[${version.rangeStart},${version.rangeEnd})"
+        final String installPath = ExecHelper.executeAndReturnResultAsString(
+            project.logger,
+            project.&exec,
+            { return true },
+            { ExecSpec spec ->
+                spec.commandLine this.vswhereLocation,
+                                 "-property", "installationPath",
+                                 "-legacy",
+                                 "-format", "value",
+                                 "-version", versionRange
+            }
+        )
+        if (installPath == null || installPath.trim().empty) {
+            throw new RuntimeException("vswhere.exe could not find a Visual Studio version in range ${versionRange}")
+        }
+        return new File(installPath, "Common7/Tools")
+    }
+
+
+    public File getCommonToolsPathFromEnvironment() {
+        final String envVarName = getDevEnvVersion().envVarName
+        if (envVarName == null) {
+            return null
+        } else {
+            final String envVarComnTools = System.getenv(envVarName)
+            if (envVarComnTools == null || envVarComnTools == "") {
+                return null
+            } else {
+                return new File(envVarComnTools)
+            }
+        }
+    }
+
+    public File getCommonToolsPath() {
+        final File pathFromEnvironment = getCommonToolsPathFromEnvironment()
+        if (pathFromEnvironment == null || !pathFromEnvironment.exists()) {
+            // Check for the existence of vswhere.exe
+            final List<String> vswherePossibleLocations =
+                ["ProgramFiles", "ProgramFiles(x86)"] // look at 64-bit then 32-bit environment variables
+                .findResults { String it -> System.getenv(it) } // collect all non-null environment variable values
+                .collect { "${it}\\Microsoft Visual Studio\\Installer\\vswhere.exe".toString() } // map to filenames
+            this.vswhereLocation = vswherePossibleLocations
+                .find { new File(it).exists() } // return the first filename for which a file exists
+
+            if (this.vswhereLocation != null) {
+                return getCommonToolsPathFromVSWhere()
+            } else {
+                // Failed; now we need to pick the right error message.
+                final String envVarComnTools = getDevEnvVersion().envVarName
+                if (envVarComnTools == null) {
+                    throw new RuntimeException(
+                        "Cannot find \"vswhere.exe\" to locate \"devenv.com\" " +
+                        "(should be in ${vswherePossibleLocations})."
+                    )
+                } else if (pathFromEnvironment == null) {
+                    throw new RuntimeException(
+                        "Environment variable ${envVarComnTools} is not set, and " +
+                        "cannot find \"vswhere.exe\" to locate \"devenv.com\" " +
+                        "(should be in ${vswherePossibleLocations})."
+                    )
+                } else /* !pathFromEnvironment.exists() */ {
+                    throw new RuntimeException(
+                        "Environment variable ${envVarComnTools} is set, but " +
+                        "its target (${pathFromEnvironment}) does not exist, and " +
+                        "cannot find \"vswhere.exe\" to locate \"devenv.com\" " +
+                        "(should be in ${vswherePossibleLocations})."
+                    )
+                }
+            }
+        } else {
+            return pathFromEnvironment
+        }
+    }
+
     public File getDevEnvPath() {
-        String chosenDevEnvVersion = getDevEnvVersion()
-        String envVarComnTools = System.getenv("${chosenDevEnvVersion}COMNTOOLS")
-        if (envVarComnTools == null || envVarComnTools == "") {
-            throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
+        VSVersion version = getDevEnvVersion()
+
+        // Check if the version was already cached in the root project.
+        final String devEnvLocationPropertyName =
+            "holygradleDevEnv_${version.major}_${version.minor}_Location"
+        if (project != project.rootProject && project.rootProject.hasProperty(devEnvLocationPropertyName)) {
+            return project.rootProject.ext[devEnvLocationPropertyName] as File
         }
-        File comnToolsPath = new File(envVarComnTools)
-        File devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
+
+        File commonToolsPath = getCommonToolsPath()
+        File devEnvPath = new File(commonToolsPath, "../IDE/devenv.com")
         if (!devEnvPath.exists()) {
             throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
         }
-        devEnvPath
+
+        // Cache location in the root project, so we don't have to run vswhere for every sub-project.
+        project.rootProject.ext[devEnvLocationPropertyName] = devEnvPath
+        return devEnvPath
     }
     
-    public File getBuildToolPath(boolean allowIncredibuild) {
-        if (allowIncredibuild && useIncredibuild()) {
+    public File getBuildToolPath() {
+        if (useIncredibuild()) {
             getVerifiedIncredibuildPath()
         } else {
             getDevEnvPath()
         }
     }
-    
+
     public boolean useIncredibuild() {
         getIncredibuildPath() != null
     }
-    
+
     public String getIncredibuildPath() {
         if (incredibuildPath == null) {
             if (parentHandler != null) {
@@ -121,8 +274,8 @@
             incredibuildPath
         }
     }
-     
-    public File getVerifiedIncredibuildPath() {     
+
+    public File getVerifiedIncredibuildPath() {
         File f = new File(getIncredibuildPath())
         if (!f.exists()) {
             throw new RuntimeException("The incredibuild path was set to '${f.path}' but nothing exists at that location.")
diff -r 9b75eaff9e23 -r 48a0dd8dac1d devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvTask.groovy
--- a/devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/devenv-plugin/src/main/groovy/holygradle/devenv/DevEnvTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -76,8 +76,8 @@
             }
 
             doConfigureBuildTask(
-                project, devEnvHandler.getBuildToolPath(true), devEnvHandler.getVsSolutionFile(),
-                devEnvHandler.useIncredibuild(), platform, configuration, 
+                project, devEnvHandler.&getBuildToolPath, devEnvHandler.getVsSolutionFile(),
+                devEnvHandler.useIncredibuild(), platform, configuration,
                 devEnvHandler.getWarningRegexes(), devEnvHandler.getErrorRegexes()
             )
         }
@@ -110,15 +110,15 @@
         
         if (devEnvHandler.getVsSolutionFile() != null) {
              doConfigureCleanTask(
-                project, devEnvHandler.getBuildToolPath(true), devEnvHandler.getVsSolutionFile(), 
-                platform, configuration,
-                devEnvHandler.getWarningRegexes(), devEnvHandler.getErrorRegexes()
+                 project, devEnvHandler.&getBuildToolPath, devEnvHandler.getVsSolutionFile(),
+                 platform, configuration,
+                 devEnvHandler.getWarningRegexes(), devEnvHandler.getErrorRegexes()
             ) 
         }
     }
     
     private void doConfigureBuildTask(
-        Project project, File buildToolPath, File solutionFile, boolean useIncredibuild, 
+        Project project, Closure getBuildToolPath, File solutionFile, boolean useIncredibuild,
         String platform, String configuration, Collection<String> warningRegexes, Collection<String> errorRegexes
     ) {
         String targetSwitch = useIncredibuild ? "/Build" : "/build"
@@ -130,13 +130,13 @@
         description = "Builds the solution '${solutionFile.name}' with ${buildToolName} in $configuration mode, " +
             "first building all dependent projects. Run 'gw -a ...' to build for this project only."
         configureTask(
-            project, title, buildToolPath, solutionFile, targetSwitch, 
+            project, title, getBuildToolPath, solutionFile, targetSwitch,
             configSwitch, outputFile, warningRegexes, errorRegexes
         ) 
     }
     
     private void doConfigureCleanTask(
-        Project project, File buildToolPath, File solutionFile,
+        Project project, Closure getBuildToolPath, File solutionFile,
         String platform, String configuration, Collection<String> warningRegexes, Collection<String> errorRegexes
     ) {
         String targetSwitch = "/Clean"
@@ -147,13 +147,13 @@
         description = "Cleans the solution '${solutionFile.name}' with DevEnv in $configuration mode, " +
             "first building all dependent projects. Run 'gw -a ...' to build for this project only."
         configureTask(
-            project, title, buildToolPath, solutionFile, targetSwitch, 
+            project, title, getBuildToolPath, solutionFile, targetSwitch,
             configSwitch, outputFile, warningRegexes, errorRegexes
         )
     }
     
     private void configureTask(
-        Project project, String title, File buildToolPath, File solutionFile, 
+        Project project, String title, Closure getBuildToolPath, File solutionFile,
         String targetSwitch, String configSwitch, File outputFile, 
         Collection<String> warningRegexes, Collection<String> errorRegexes
     ) {
@@ -163,6 +163,7 @@
                 title, styledOutput, warningRegexes, errorRegexes
             )
 
+            File buildToolPath = getBuildToolPath()
             ExecResult result = project.exec { ExecSpec spec ->
                 spec.workingDir project.projectDir.path
                 spec.commandLine buildToolPath.path, solutionFile.path, targetSwitch, configSwitch
diff -r 9b75eaff9e23 -r 48a0dd8dac1d devenv-plugin/src/test/groovy/holygradle/devenv/DevEnvHandlerTest.groovy
--- a/devenv-plugin/src/test/groovy/holygradle/devenv/DevEnvHandlerTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/devenv-plugin/src/test/groovy/holygradle/devenv/DevEnvHandlerTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -23,4 +23,5 @@
         
         assertEquals(new File(project.projectDir, "blah.sln"), devenv.getVsSolutionFile())
     }
+    
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build.gradle
--- a/devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -5,6 +5,6 @@
 
 DevEnv {
     solutionFile "build/foo.sln"
-    version "VS120"
+    version "15.+"
     platform "x64", "Win32"
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build/build/foo.vcxproj
--- a/devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build/build/foo.vcxproj	Sat Jun 10 22:29:31 2017 +0100
+++ b/devenv-plugin/src/test/groovy/holygradle/devenv/IntegrationTest/vs120_multi_platform/build/build/foo.vcxproj	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="Debug|Win32">
       <Configuration>Debug</Configuration>
@@ -22,33 +22,34 @@
     <ProjectGuid>{6FC5705D-CBD5-46BA-B0D9-D0FB6C0C7386}</ProjectGuid>
     <Keyword>Win32Proj</Keyword>
     <RootNamespace>foo</RootNamespace>
+    <WindowsTargetPlatformVersion>10.0.16299.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
     <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>StaticLibrary</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v120</PlatformToolset>
+    <PlatformToolset>v141</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/Edinburgh_Cpp_Meetup_2017-04-10.odp
Binary file doc/Edinburgh_Cpp_Meetup_2017-04-10.odp has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/baseLib/baseLib.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/baseLib/baseLib.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,213 @@
+// This template has some parts which you should change for your own project.  They are marked with ####.
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Header code to include the Holy Gradle plugins.
+*/
+buildscript {
+    // ---- Main plugins.
+
+    // Get username and password from Windows Credential Store
+    gplugins.use "my-credentials-plugin:${holyGradlePluginsVersion}"
+
+    // Create and use packed dependencies.  Use source dependencies.
+    gplugins.use "intrepid-plugin:${holyGradlePluginsVersion}"
+
+    // ---- The following are optional, and not as well-supported.
+
+    // Create tasks to run Visual Studio (build and clean, for Debug and Release; for x64 by default, can also do Win32)
+    gplugins.use "devenv-plugin:${holyGradlePluginsVersion}"
+
+    // Create tasks to run unit test executables (for Debug and Release)
+    gplugins.use "unit-test-plugin:${holyGradlePluginsVersion}"
+}
+gplugins.apply()
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the group and version for your module.  The name of your module must be specified in "settings.gradle".
+
+    This module ID "group:name:version" is used when Gradle is running, and also when your module is published to
+    Artifactory.
+
+    (For anyone who has used earlier versions of the Holy Gradle: we set these early in this build file, instead of in
+    the publishPackages block, because sometimes the information is needed earlier.
+*/
+
+// The group is a namespace for your module.  It should be a "reverse domain name" for your company/department, usually
+// with a team name added at the end.
+group = multiprojGroup
+
+// This sets the module version string to the environent variable NEXT_MYAPP_VERSION, or uses Gradle's default version
+// string if the variable is not set.
+version = System.getenv("NEXT_MULTIPROJ_VERSION") ?: Project.DEFAULT_VERSION // #### Change env var to one for your build.
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Defines sets of related configurations.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_configurationSets
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+
+    Configurations are used to get parts of dependency modules, and to publish parts of this module for use in other
+    projects.
+*/
+configurationSets {
+    main {
+        type configurationSetTypes.LIB_64
+    }
+}
+
+/*
+    Defines individual configurations which are not part of a set of related configurations.
+
+    See https://docs.gradle.org/1.4/dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations%28groovy.lang.Closure%29
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+*/
+configurations {
+    // Declaring any configurationSets automatically creates a private "build" configuration, so we don't need to add it.
+
+    test_runtime_all {
+        visible = false
+        description = "Files only needed for testing this module (not needed to use it), " +
+            "which need to be deployed to some location to use them; for example, unit test framework DLLs."
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the repositories to look in for this project's packedDependencies.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_repositories
+    and [[WEBSITE_ROOT]]/workflows.html#_declare_dependency_repositories
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+repositories.ivy {
+    credentials {
+        username my.username("Artifactory")
+        password my.password("Artifactory")
+    }    
+    // url project.holyGradleRepositoryBase + multiprojRepo
+    url project.holyGradleRepositoryBase + "libs-release" // #### Remove: multiprojRepo virtual repo should include libs-release.
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to create symlinks for unpacked dependencies.  Currently this dir setting is just a pattern, not a
+    built-in Holy Gradle feature.  It may become a built-in feature in future.
+*/
+// This will put all dependencies inside a sub-folder
+project.ext.dependenciesDir = "./dep"
+
+// Some teams want dependencies in the project folder:
+// def dependenciesDir = "."
+
+// Some teams want dependencies one level up.  However, this is not recommended, because then it is hard to re-use
+// your project's source code within another project.
+// def dependenciesDir = ".."
+
+/*
+    Specifies other modules to download, unzip, and symlink into the dependencies dir.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_packedDependencies
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_module_dependencies
+
+    NOTE: It is recommended that the folder for each dependency should have the same name as the "name" part of the
+    "group:name:version" module ID.  This may be enforced by the Holy Gradle in future.
+
+    NOTE: If you import a module and want to make it visible to users of your module, add ", export: true" to the end of
+    the configurationSet line.  You should do this if and only if you expose the types of that module from your module.
+    That means that another module which uses yours will get the headers and LIBs of the module you import.
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies_configurationSet.
+    (That documentation is for source dependencies but the behaviour is the same as for packed dependencies:
+    [[WEBSITE_ROOT]]/plugin-intrepid.html#_packedDependencies_configurationSet.)
+*/
+packedDependencies {
+    // -----------------------------------------------------------------------------------------------------------------
+    // Main dependencies.
+
+    // -----------------------------------------------------------------------------------------------------------------
+    // Test dependencies.
+
+    addDependency(project, it, "boost") {
+        configurationSet configurations.test_runtime_all, configurationSetTypes.DLL_64
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the solution file to build with "buildRelease" and "cleanRelease".
+
+    See [[WEBSITE_ROOT]]/plugin-devenv.html#_devenv
+    and [[WEBSITE_ROOT]]/workflows.html#_check_build
+*/
+DevEnv {
+    solutionFile "baseLib.sln" // ####
+    version "vs120"
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Specifies which files should be included in the ZIP files which are published for this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_packageArtifacts
+    and [[WEBSITE_ROOT]]/workflows.html#_check_packaging
+
+    For a web application, you may choose to publish the client and server parts of your app individually, or you may
+    decide to publish only an installer.  Remove any sections below which you do not need.
+*/
+packageArtifacts { packArts ->
+    import_common {
+        include "src/**/*.h"
+    }
+
+    configurationSets.main.axes.Platform.each { vsPlatform ->
+        configurationSets.main.axes.Configuration.each { vsConfiguration ->
+            // This includes LIB, EXP, and "PDBs for static LIBs".
+            packArts."import_${vsPlatform}_${vsConfiguration}" {
+                include "Output/baseLib_vc12_${vsConfiguration}_${vsPlatform}.lib"
+                include "Output/baseLib_idl_vc12_${vsConfiguration}_${vsPlatform}.lib"
+                include "Output/baseLib_idl_vc12_${vsConfiguration}_${vsPlatform}.exp"
+                include "Output/baseLib_vc12_${vsConfiguration}_${vsPlatform}.pdb"
+                include "Output/MIDL/vc12/${vsConfiguration}/${vsPlatform}/*.h"
+                include "Output/MIDL/vc12/${vsConfiguration}/${vsPlatform}/*.tlb"
+                include "Output/MIDL/vc12/${vsConfiguration}/${vsPlatform}/IBaseLibImportHelper.idl"
+            }
+
+            // NOTE: dll/pdb blocks must not contain wildcards, as they're used to get the list of
+            // filenames to copy in the post-build step of downstream projects.
+            packArts."runtime_${vsPlatform}_${vsConfiguration}" {
+                include "Output/baseLib_idl_vc12_${vsConfiguration}_${vsPlatform}.dll"
+            }
+            // This includes PDBs which are for DLLs/EXEs, not for static LIBs; you don't need the
+            // latter at debugging time.
+            packArts."debugging_${vsPlatform}_${vsConfiguration}" {
+                include "Output/baseLib_idl_vc12_${vsConfiguration}_${vsPlatform}.pdb"
+            }
+        }
+    }
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to publish this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_publishPackages
+    and [[WEBSITE_ROOT]]/workflows.html#_check_publishing
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+publishPackages {
+    repositories.ivy {
+        credentials {
+            username my.username("Artifactory")
+            password my.password("Artifactory")
+        }
+        url project.holyGradleRepositoryBase + multiprojPublishRepo
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,236 @@
+// This template has some parts which you should change for your own project.  They are marked with ####.
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Header code to include the Holy Gradle plugins.
+*/
+buildscript {
+    // ---- Main plugins.
+
+    // Get username and password from Windows Credential Store
+    gplugins.use "my-credentials-plugin:${holyGradlePluginsVersion}"
+
+    // Create and use packed dependencies.  Use source dependencies.
+    gplugins.use "intrepid-plugin:${holyGradlePluginsVersion}"
+
+    // ---- The following are optional, and not as well-supported.
+    // 
+    // The root project includes these plugins, even though they are only used in subprojects.  Otherwise some problems
+    // can occur because of how Gradle uses Java classloaders for subprojects.
+
+    // Create tasks to run Visual Studio (build and clean, for Debug and Release; for x64 by default, can also do Win32)
+    gplugins.use "devenv-plugin:${holyGradlePluginsVersion}"
+
+    // Create tasks to run unit test executables (for Debug and Release)
+    gplugins.use "unit-test-plugin:${holyGradlePluginsVersion}"
+}
+gplugins.apply()
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the group and version for your module.  The name of your module must be specified in "settings.gradle".
+
+    This module ID "group:name:version" is used when Gradle is running, and also when your module is published to
+    Artifactory.
+
+    (For anyone who has used earlier versions of the Holy Gradle: we set these early in this build file, instead of in
+    the publishPackages block, because sometimes the information is needed earlier.
+*/
+
+// The group is a namespace for your module.  It should be a "reverse domain name" for your company/department, usually
+// with a team name added at the end.
+group = multiprojGroup
+
+// This sets the module version string to the environent variable NEXT_MYAPP_VERSION, or uses Gradle's default version
+// string if the variable is not set.
+version = System.getenv("NEXT_MULTIPROJ_VERSION") ?: Project.DEFAULT_VERSION // #### Change env var to one for your build.
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Defines sets of related configurations.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_configurationSets
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+
+    Configurations are used to get parts of dependency modules, and to publish parts of this module for use in other
+    projects.
+*/
+configurationSets {
+    // For this example, the top-level project doesn't package DLLs, EXEs, etc., only meta-packages.
+}
+
+/*
+    Defines individual configurations which are not part of a set of related configurations.
+
+    See https://docs.gradle.org/1.4/dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations%28groovy.lang.Closure%29
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+*/
+configurations {
+    build {
+        visible = "false"
+        description = "Modules used to build this module but not needed to use it."
+    }
+
+    pinnedSource {
+        description = "A meta-pacakge for building a ZIP with a copy of all source and all binary dependencies."
+    }
+    pinnedSourceLight {
+        description = "A meta-pacakge for building a ZIP with a copy of all source; " +
+            "the build script in the ZIP will download binary dependencies from Artifactory."
+    }
+    preBuiltArtifacts {
+        description = "A meta-pacakge for building a ZIP with binary versions of the modules from " +
+            "this multi-project build all binary dependencies."
+    }
+    preBuiltArtifactsLight {
+        description = "A meta-pacakge for building a ZIP with a build script which will download the modules from " +
+            "this multi-project build all binary dependencies from Artifactory."
+    }
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the repositories to look in for this project's packedDependencies.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_repositories
+    and [[WEBSITE_ROOT]]/workflows.html#_declare_dependency_repositories
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+repositories.ivy {
+    credentials {
+        username my.username("Artifactory")
+        password my.password("Artifactory")
+    }    
+    // url project.holyGradleRepositoryBase + multiprojRepo
+    url project.holyGradleRepositoryBase + "libs-release" // #### Remove: multiprojRepo virtual repo should include libs-release.
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies source dependencies to check out.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies
+
+    These will be added to the multi-project build if they contain a "build.gradle" or "<folder-name>.gradle", causing
+    the Holy Gradle to re-run the build.  The handling of source dependencies is very simple: if the folder doesn't
+    exist, it is cloned from the give URL; if it already exists, the Holy Gradle does nothing.
+*/
+sourceDependencies {
+    "baseLib" {
+        hg "http://hg.example-corp.com/baseLib"
+    }
+
+    "mainLib" {
+        hg "http://hg.example-corp.com/mainLib"
+    }
+}
+
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to create symlinks for unpacked dependencies.  Currently this dir setting is just a pattern, not a
+    built-in Holy Gradle feature.  It may become a built-in feature in future.
+*/
+// This will put all dependencies inside a sub-folder
+project.ext.dependenciesDir = "./dep"
+
+// Some teams want dependencies in the project folder:
+// def dependenciesDir = "."
+
+// Some teams want dependencies one level up.  However, this is not recommended, because then it is hard to re-use
+// your project's source code within another project.
+// def dependenciesDir = ".."
+
+/*
+    Provides common versions of dependencies, to be used in all sub-projects.
+*/
+def dependencyVersions = [
+    "boost" : "org.boost:boost:gt2_pkg7_v1.58.0",
+    "WeasyPrint" : "org.weasyprint:WeasyPrint:0.26",
+    "protobuf" : "com.google:protobuf:gt2_pkg8_v2.6.1",
+    "zlib" : "org.zlib:zlib:gt2_pkg8_v1.2.8",
+]
+
+/*
+    Helper method to add a dependency, using a name string both as the folder name and for common version lookup.
+*/
+project.ext.addDependency = {
+    Project proj,
+    /* NameedDomainObjectContainer<SourceDependencyHandler> */ srcDeps,
+    String name,
+    Closure configure
+ ->
+    final String handlerName = "${proj.dependenciesDir}/${name}"
+    def dependencyHandler = srcDeps.findByName(handlerName)
+    if (dependencyHandler == null) {
+        dependencyHandler = srcDeps.create(handlerName) { dep ->
+            dep.dependency dependencyVersions[name]
+        }
+    }
+    org.gradle.util.ConfigureUtil.configure(configure, dependencyHandler)
+}
+
+/*
+    Specifies other modules to download, unzip, and symlink into the dependencies dir.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_packedDependencies
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_module_dependencies
+
+    NOTE: It is recommended that the folder for each dependency should have the same name as the "name" part of the
+    "group:name:version" module ID.  This may be enforced by the Holy Gradle in future.
+
+    NOTE: If you import a module and want to make it visible to users of your module, add ", export: true" to the end of
+    the configurationSet line.  You should do this if and only if you expose the types of that module from your module.
+    That means that another module which uses yours will get the headers and LIBs of the module you import.
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies_configurationSet.
+    (That documentation is for source dependencies but the behaviour is the same as for packed dependencies:
+    [[WEBSITE_ROOT]]/plugin-intrepid.html#_packedDependencies_configurationSet.)
+*/
+packedDependencies {
+    // -----------------------------------------------------------------------------------------------------------------
+    // Main dependencies.
+
+    addDependency(project, it, "WeasyPrint") {
+        configuration "build->run"
+    }
+
+    // -----------------------------------------------------------------------------------------------------------------
+    // Test dependencies.
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Specifies which files should be included in the ZIP files which are published for this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_packageArtifacts
+    and [[WEBSITE_ROOT]]/workflows.html#_check_packaging
+
+    For a web application, you may choose to publish the client and server parts of your app individually, or you may
+    decide to publish only an installer.  Remove any sections below which you do not need.
+*/
+packageArtifacts { packArts ->
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to publish this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_publishPackages
+    and [[WEBSITE_ROOT]]/workflows.html#_check_publishing
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+publishPackages {
+    repositories.ivy {
+        credentials {
+            username my.username("Artifactory")
+            password my.password("Artifactory")
+        }
+        url project.holyGradleRepositoryBase + multiprojPublishRepo
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/mainLib/mainLib.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/mainLib/mainLib.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,232 @@
+// This template has some parts which you should change for your own project.  They are marked with ####.
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Header code to include the Holy Gradle plugins.
+*/
+buildscript {
+    // ---- Main plugins.
+
+    // Get username and password from Windows Credential Store
+    gplugins.use "my-credentials-plugin:${holyGradlePluginsVersion}"
+
+    // Create and use packed dependencies.  Use source dependencies.
+    gplugins.use "intrepid-plugin:${holyGradlePluginsVersion}"
+
+    // ---- The following are optional, and not as well-supported.
+
+    // Create tasks to run Visual Studio (build and clean, for Debug and Release; for x64 by default, can also do Win32)
+    gplugins.use "devenv-plugin:${holyGradlePluginsVersion}"
+
+    // Create tasks to run unit test executables (for Debug and Release)
+    gplugins.use "unit-test-plugin:${holyGradlePluginsVersion}"
+}
+gplugins.apply()
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the group and version for your module.  The name of your module must be specified in "settings.gradle".
+
+    This module ID "group:name:version" is used when Gradle is running, and also when your module is published to
+    Artifactory.
+
+    (For anyone who has used earlier versions of the Holy Gradle: we set these early in this build file, instead of in
+    the publishPackages block, because sometimes the information is needed earlier.
+*/
+
+// The group is a namespace for your module.  It should be a "reverse domain name" for your company/department, usually
+// with a team name added at the end.
+group = multiprojGroup
+
+// This sets the module version string to the environent variable NEXT_MYAPP_VERSION, or uses Gradle's default version
+// string if the variable is not set.
+version = System.getenv("NEXT_MULTIPROJ_VERSION") ?: Project.DEFAULT_VERSION // #### Change env var to one for your build.
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Defines sets of related configurations.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_configurationSets
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+
+    Configurations are used to get parts of dependency modules, and to publish parts of this module for use in other
+    projects.
+*/
+configurationSets {
+    main {
+        type configurationSetTypes.DLL_64
+    }
+}
+
+/*
+    Defines individual configurations which are not part of a set of related configurations.
+
+    See https://docs.gradle.org/1.4/dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations%28groovy.lang.Closure%29
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+*/
+configurations {
+    // Declaring any configurationSets automatically creates a private "build" configuration, so we don't need to add it.
+
+    test_runtime_all {
+        visible = false
+        description = "Files only needed for testing this module (not needed to use it), " +
+            "which need to be deployed to some location to use them; for example, unit test framework DLLs."
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the repositories to look in for this project's packedDependencies.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_repositories
+    and [[WEBSITE_ROOT]]/workflows.html#_declare_dependency_repositories
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+repositories.ivy {
+    credentials {
+        username my.username("Artifactory")
+        password my.password("Artifactory")
+    }    
+    // url project.holyGradleRepositoryBase + multiprojRepo
+    url project.holyGradleRepositoryBase + "libs-release" // #### Remove: multiprojRepo virtual repo should include libs-release.
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies source dependencies to check out.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies
+
+    These will be added to the multi-project build if they contain a "build.gradle" or "<folder-name>.gradle", causing
+    the Holy Gradle to re-run the build.  The handling of source dependencies is very simple: if the folder doesn't
+    exist, it is cloned from the give URL; if it already exists, the Holy Gradle does nothing.
+*/
+sourceDependencies {
+    "../otherLib" {
+        hg "http://hg.example-corp.com/otherLib"
+        configurationSet configurationSets.main, configurationSetTypes.DLL_64
+    }
+
+    "../testData" {
+        svn "http://svn.example-corp.com/testData"
+    }
+}
+
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to create symlinks for unpacked dependencies.  Currently this dir setting is just a pattern, not a
+    built-in Holy Gradle feature.  It may become a built-in feature in future.
+*/
+// This will put all dependencies inside a sub-folder
+project.ext.dependenciesDir = "./dep"
+
+// Some teams want dependencies in the project folder:
+// def dependenciesDir = "."
+
+// Some teams want dependencies one level up.  However, this is not recommended, because then it is hard to re-use
+// your project's source code within another project.
+// def dependenciesDir = ".."
+
+/*
+    Specifies other modules to download, unzip, and symlink into the dependencies dir.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_packedDependencies
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_module_dependencies
+
+    NOTE: It is recommended that the folder for each dependency should have the same name as the "name" part of the
+    "group:name:version" module ID.  This may be enforced by the Holy Gradle in future.
+
+    NOTE: If you import a module and want to make it visible to users of your module, add ", export: true" to the end of
+    the configurationSet line.  You should do this if and only if you expose the types of that module from your module.
+    That means that another module which uses yours will get the headers and LIBs of the module you import.
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies_configurationSet.
+    (That documentation is for source dependencies but the behaviour is the same as for packed dependencies:
+    [[WEBSITE_ROOT]]/plugin-intrepid.html#_packedDependencies_configurationSet.)
+*/
+packedDependencies {
+    // -----------------------------------------------------------------------------------------------------------------
+    // Main dependencies.
+
+    addDependency(project, it, "boost") {
+        configurationSet configurationSets.main, configurationSetTypes.DLL_64, export: true
+    }
+    addDependency(project, it, "zlib") {
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+
+    // -----------------------------------------------------------------------------------------------------------------
+    // Test dependencies.
+
+    addDependency(project, it, "boost") {
+        configurationSet configurations.test_runtime_all, configurationSetTypes.DLL_64
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the solution file to build with "buildRelease" and "cleanRelease".
+
+    See [[WEBSITE_ROOT]]/plugin-devenv.html#_devenv
+    and [[WEBSITE_ROOT]]/workflows.html#_check_build
+*/
+DevEnv {
+    solutionFile "mainLib.sln" // ####
+    version "vs120"
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Specifies which files should be included in the ZIP files which are published for this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_packageArtifacts
+    and [[WEBSITE_ROOT]]/workflows.html#_check_packaging
+
+    For a web application, you may choose to publish the client and server parts of your app individually, or you may
+    decide to publish only an installer.  Remove any sections below which you do not need.
+*/
+packageArtifacts { packArts ->
+    import_common {
+        include "src/**/*.h"
+    }
+
+    configurationSets.main.axes.Platform.each { vsPlatform ->
+        configurationSets.main.axes.Configuration.each { vsConfiguration ->
+            // Platform-specific imports are usually only needed for COM. // ####
+            // packArts."import_${vsPlatform}_${vsConfiguration}" {
+            // }
+
+            packArts."runtime_${vsPlatform}_${vsConfiguration}" {
+                include "${vsPlatform}/${vsConfiguration}/mainLib_vc12_${vsConfiguration}_${vsPlatform}.dll" // ####
+            }
+
+            packArts."debugging_${vsPlatform}_${vsConfiguration}" {
+                include "${vsPlatform}/${vsConfiguration}/mainLib_vc12_${vsConfiguration}_${vsPlatform}.pdb" // ####
+            }
+        }
+    }
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to publish this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_publishPackages
+    and [[WEBSITE_ROOT]]/workflows.html#_check_publishing
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+publishPackages {
+    repositories.ivy {
+        credentials {
+            username my.username("Artifactory")
+            password my.password("Artifactory")
+        }
+        url project.holyGradleRepositoryBase + multiprojPublishRepo
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/otherLib/otherLib.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/otherLib/otherLib.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,225 @@
+// This template has some parts which you should change for your own project.  They are marked with ####.
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Header code to include the Holy Gradle plugins.
+*/
+buildscript {
+    // ---- Main plugins.
+
+    // Get username and password from Windows Credential Store
+    gplugins.use "my-credentials-plugin:${holyGradlePluginsVersion}"
+
+    // Create and use packed dependencies.  Use source dependencies.
+    gplugins.use "intrepid-plugin:${holyGradlePluginsVersion}"
+
+    // ---- The following are optional, and not as well-supported.
+
+    // Create tasks to run Visual Studio (build and clean, for Debug and Release; for x64 by default, can also do Win32)
+    gplugins.use "devenv-plugin:${holyGradlePluginsVersion}"
+
+    // Create tasks to run unit test executables (for Debug and Release)
+    gplugins.use "unit-test-plugin:${holyGradlePluginsVersion}"
+}
+gplugins.apply()
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the group and version for your module.  The name of your module must be specified in "settings.gradle".
+
+    This module ID "group:name:version" is used when Gradle is running, and also when your module is published to
+    Artifactory.
+
+    (For anyone who has used earlier versions of the Holy Gradle: we set these early in this build file, instead of in
+    the publishPackages block, because sometimes the information is needed earlier.
+*/
+
+// The group is a namespace for your module.  It should be a "reverse domain name" for your company/department, usually
+// with a team name added at the end.
+group = multiprojGroup
+
+// This sets the module version string to the environent variable NEXT_MYAPP_VERSION, or uses Gradle's default version
+// string if the variable is not set.
+version = System.getenv("NEXT_MULTIPROJ_VERSION") ?: Project.DEFAULT_VERSION // #### Change env var to one for your build.
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Defines sets of related configurations.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_configurationSets
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+
+    Configurations are used to get parts of dependency modules, and to publish parts of this module for use in other
+    projects.
+*/
+configurationSets {
+    main {
+        type configurationSetTypes.DLL_64
+    }
+}
+
+/*
+    Defines individual configurations which are not part of a set of related configurations.
+
+    See https://docs.gradle.org/1.4/dsl/org.gradle.api.Project.html#org.gradle.api.Project:configurations%28groovy.lang.Closure%29
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_outputs
+*/
+configurations {
+    // Declaring any configurationSets automatically creates a private "build" configuration, so we don't need to add it.
+
+    test_runtime_all {
+        visible = false
+        description = "Files only needed for testing this module (not needed to use it), " +
+            "which need to be deployed to some location to use them; for example, unit test framework DLLs."
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the repositories to look in for this project's packedDependencies.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_repositories
+    and [[WEBSITE_ROOT]]/workflows.html#_declare_dependency_repositories
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+repositories.ivy {
+    credentials {
+        username my.username("Artifactory")
+        password my.password("Artifactory")
+    }    
+    // url project.holyGradleRepositoryBase + multiprojRepo
+    url project.holyGradleRepositoryBase + "libs-release" // #### Remove: multiprojRepo virtual repo should include libs-release.
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies source dependencies to check out.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies
+
+    These will be added to the multi-project build if they contain a "build.gradle" or "<folder-name>.gradle", causing
+    the Holy Gradle to re-run the build.  The handling of source dependencies is very simple: if the folder doesn't
+    exist, it is cloned from the give URL; if it already exists, the Holy Gradle does nothing.
+*/
+sourceDependencies {
+    "../baseLib" {
+        hg "http://hg.example-corp.com/baseLib"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+}
+
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to create symlinks for unpacked dependencies.  Currently this dir setting is just a pattern, not a
+    built-in Holy Gradle feature.  It may become a built-in feature in future.
+*/
+// This will put all dependencies inside a sub-folder
+project.ext.dependenciesDir = "./dep"
+
+// Some teams want dependencies in the project folder:
+// def dependenciesDir = "."
+
+// Some teams want dependencies one level up.  However, this is not recommended, because then it is hard to re-use
+// your project's source code within another project.
+// def dependenciesDir = ".."
+
+/*
+    Specifies other modules to download, unzip, and symlink into the dependencies dir.
+
+    See [[WEBSITE_ROOT]]/intrepid-plugin.html#_packedDependencies
+    and [[WEBSITE_ROOT]]/workflows.html#_determine_module_dependencies
+
+    NOTE: It is recommended that the folder for each dependency should have the same name as the "name" part of the
+    "group:name:version" module ID.  This may be enforced by the Holy Gradle in future.
+
+    NOTE: If you import a module and want to make it visible to users of your module, add ", export: true" to the end of
+    the configurationSet line.  You should do this if and only if you expose the types of that module from your module.
+    That means that another module which uses yours will get the headers and LIBs of the module you import.
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_sourceDependencies_configurationSet.
+    (That documentation is for source dependencies but the behaviour is the same as for packed dependencies:
+    [[WEBSITE_ROOT]]/plugin-intrepid.html#_packedDependencies_configurationSet.)
+*/
+packedDependencies {
+    // -----------------------------------------------------------------------------------------------------------------
+    // Main dependencies.
+
+    addDependency(project, it, "protobuf") {
+        configurationSet configurationSets.main, configurationSetTypes.DLL_64
+    }
+
+    // -----------------------------------------------------------------------------------------------------------------
+    // Test dependencies.
+
+    addDependency(project, it, "boost") {
+        configurationSet configurations.test_runtime_all, configurationSetTypes.DLL_64
+    }
+
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies the solution file to build with "buildRelease" and "cleanRelease".
+
+    See [[WEBSITE_ROOT]]/plugin-devenv.html#_devenv
+    and [[WEBSITE_ROOT]]/workflows.html#_check_build
+*/
+DevEnv {
+    solutionFile "otherLib.sln" // ####
+    version "vs120"
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+
+/*
+    Specifies which files should be included in the ZIP files which are published for this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_packageArtifacts
+    and [[WEBSITE_ROOT]]/workflows.html#_check_packaging
+
+    For a web application, you may choose to publish the client and server parts of your app individually, or you may
+    decide to publish only an installer.  Remove any sections below which you do not need.
+*/
+packageArtifacts { packArts ->
+    import_common {
+        include "src/**/*.h"
+    }
+
+    configurationSets.main.axes.Platform.each { vsPlatform ->
+        configurationSets.main.axes.Configuration.each { vsConfiguration ->
+            // Platform-specific imports are usually only needed for COM. // ####
+            // packArts."import_${vsPlatform}_${vsConfiguration}" {
+            // }
+
+            packArts."runtime_${vsPlatform}_${vsConfiguration}" {
+                include "${vsPlatform}/${vsConfiguration}/mainLib_vc12_${vsConfiguration}_${vsPlatform}.dll" // ####
+            }
+
+            packArts."debugging_${vsPlatform}_${vsConfiguration}" {
+                include "${vsPlatform}/${vsConfiguration}/mainLib_vc12_${vsConfiguration}_${vsPlatform}.pdb" // ####
+            }
+        }
+    }
+}
+
+// ---------------------------------------------------------------------------------------------------------------------
+/*
+    Specifies where to publish this module.
+
+    See [[WEBSITE_ROOT]]/plugin-intrepid.html#_publishPackages
+    and [[WEBSITE_ROOT]]/workflows.html#_check_publishing
+
+    Use "project.holyGradleRepositoryBase" as the start of the URL so that same source can be built at different sites.
+*/
+publishPackages {
+    repositories.ivy {
+        credentials {
+            username my.username("Artifactory")
+            password my.password("Artifactory")
+        }
+        url project.holyGradleRepositoryBase + multiprojPublishRepo
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/settings.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,41 @@
+rootProject.name = "multiproj"
+// holygradle source dependencies Va94d6912d47fc33fb7ecde7ed57f8134 BEGIN
+// Do not edit this section.  It may be replaced by the holygradle plugins automatically.
+// When the Holy Gradle adds or modifies this section, you should commit this file to source control.
+final String settingsFileName = ((StartParameter)startParameter).settingsFile?.name ?: Settings.DEFAULT_SETTINGS_FILE
+final String subprojectsFileName = settingsFileName.replaceAll(/\.[^\.]+$/, "-subprojects.txt")
+final File subprojectsFile = new File((File)settingsDir, subprojectsFileName)
+final List<String> subprojectPaths = !subprojectsFile.exists() ? [] : subprojectsFile.readLines().findAll {
+    !it.startsWith('#') && !it.trim().isEmpty()
+}
+subprojectPaths.each { include it }
+Collection<ProjectDescriptor> collectProjects(Collection<ProjectDescriptor> projects) {
+    projects + projects.collectMany { collectProjects(it.children) }
+}
+List<File> getBuildFiles(ProjectDescriptor proj) {
+    [proj.name, 'build'].collect { new File(proj.projectDir, "${it}.gradle") }.findAll { it.exists() } as List
+}
+collectProjects([rootProject]).findAll { !getBuildFiles(it).any() }.each {
+    println("No Gradle build file found for subproject ${it.name} in ${it.projectDir}; excluding from build.")
+    it.parent.children.remove(it)
+}
+// This block does two things for sub-projects in a multi-project build.
+//   1) Allows them to lie outside the root project's folder (by removing relative paths from the start of the name).
+//   2) Allows them to have their build files named to match the directory.
+collectProjects([rootProject]).each { ProjectDescriptor proj ->
+    String projBaseName = ((proj.name =~ /.*?([\w_\-]+)$/)[0] as List)[1]
+    proj.name = projBaseName
+    List<File> buildFiles = getBuildFiles(proj)
+    switch (buildFiles.size()) {
+        case 0:
+            throw new RuntimeException("Internal error: project ${proj} has no build files, so it should have been removed!")
+        case 1:
+            proj.buildFileName = buildFiles[0].name
+            break;
+        case 2:
+            throw new RuntimeException("Project ${proj} has '${proj.name}.gradle' AND 'build.gradle'. You should only have one of these.")
+        default:
+            throw new RuntimeException("Internal error: project ${proj} has more than 2 build files! ${buildFiles}.")
+    }
+}
+// holygradle source dependencies Va94d6912d47fc33fb7ecde7ed57f8134 END
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/files/examples/multi-project/testData/data.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/website/files/examples/multi-project/testData/data.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+There's no ".gradle" file in this folder because it represents test data, not a module which needs to be built.
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/first_steps.asciidoc
--- a/doc/website/first_steps.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/first_steps.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -15,7 +15,7 @@
 The Holy Gradle is a set of plugins for the gloss:gradle[] tool, which is a Java application.
 They have only been tested on the following platforms.
 
-* Windows 7 (and Windows Server 2008 R2), Windows 8.1
+* Windows 7 (and Windows Server 2008 R2), Windows 8.1, Windows 10
 * Java 7 (JRE or JDK)
 
 == Preparation
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/glossary.asciidoc
--- a/doc/website/glossary.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/glossary.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -158,9 +158,9 @@
     gloss:directory-junction[], gloss:link[], and gloss:symbolic-link[].
 [[gloss-holygradle]] Holy Gradle::
     A set of gloss:gradle[] plugins which extend it to cover: using passwords stored in the 
-    Windows Credential Manager; getting source code from Mercurial or Subversion; getting and 
-    publishing dependencies with many files (packed as ZIP files); and deleting temporary 
-    publications from Artifactory.  There are other features with minimal support: building with 
+    gloss:credential-manager[]; getting source code from gloss:git[], gloss:mercurial[] or gloss-subversion[];
+    getting and publishing dependencies with many files (packed as ZIP files); and deleting temporary
+    publications from gloss:artifactory[].  There are other features with minimal support: building with
     Visual Studio; running unit tests.  Currently the Holy Gradle is based on gloss:gradle[] 1.4.
 [[gloss-init-script]] init script::
     A gloss:gradle[] init script is a +.gradle+ script which is run before your build.  Such a
@@ -249,7 +249,7 @@
 * virtual: the repository does not store files, instead it searches a list of other repositories.
 --
 +
-In version control systems such as gloss:subversion[] or gloss:mercurial[] a repository stores a
+In version control systems such as gloss@git[], gloss:subversion[], or gloss:mercurial[] a repository stores a
 history of a set of related files.
 
 [[gloss-root-cert]] root certificate::
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/plugin-devenv.asciidoc
--- a/doc/website/plugin-devenv.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/plugin-devenv.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -75,22 +75,43 @@
 }
 ----
 
+The +version+ must match one of the following forms.
+
+- +VSnnn+, where all except the last digit is used to match the major version.
+- +nn.n+, which matches an exact version (for Visual Studio 2017 and later; since Holy Gradle
+link:release_notes.html#_7_10_3[]).
+- +nn.++, which matches the major version and ignores the minor version (for Visual Studio 2017 and later;
+since Holy Gradle link:release_notes.html#_7_10_3[]).
+
 The +version+ is used to construct a path to +devenv.com+ as follows.
 
-- Get the value of the +<version>COMNTOOLS+ environment variable, for example, +VS100COMNTOOLS+
-- The resulting path will be appended with +../IDE/devenv.com+
+- If the +version+ string starts with +"VS"+, get the value of the +<version>COMNTOOLS+ environment variable, for
+example, +VS100COMNTOOLS+.
+- If that environment variable is defined and has a non-empty value, the resulting path will have +../IDE/devenv.com+
+appended.
+- (Since Holy Gradle link:release_notes.html#_7_10_1[].) If the variable is undefined or empty, try to find the
++vswhere.exe+ tool in both +%ProgramFiles(x86)%\Microsoft Visual Studio\Installer+ and
++%ProgramFiles%\Microsoft Visual Studio\Installer+ for +vswhere.exe+.
+- If it is not found, then fail.
+- If it is found, then pass the +version+ string to +vswhere.exe+ to find the installation path.
+- The resulting path will have +/Common7/IDE/devenv.com+ appended.
+ 
+The different versions of Visual Studio have environment variables and internal versions which correspond as follows.
+From Visual Studio 2017 onwards, there is no environment variable.
 
-The different versions of Visual Studio have environment variables which correspond as follows
-
-[options="header",width="30%"]
+[options="header",width="70%"]
 |====
-|Version |Variable
-|2005 |+VS80COMNTOOLS+
-|2008 |+VS90COMNTOOLS+
-|2010 |+VS100COMNTOOLS+
-|2012 |+VS110COMNTOOLS+
-|2013 |+VS120COMNTOOLS+
-|2015 |+VS140COMNTOOLS+
+|VS Product Version |Holy Gradle Version String |Variable |VS Internal Version
+|2005 |+VS80+ or +8.0+ |+VS80COMNTOOLS+ |8.0
+|2008 |+VS90+ or +9.0+ |+VS90COMNTOOLS+ |9.0
+|2010 |+VS100+ or +10.0+ |+VS100COMNTOOLS+ |10.0
+|2012 |+VS110+ or +11.0+ |+VS110COMNTOOLS+ |11.0
+|2013 |+VS120+ or +12.0+ |+VS120COMNTOOLS+ |12.0
+|2015 |+VS140+ or +14.0+ |+VS140COMNTOOLS+ |14.0
+.4+|2017 |+15.0+ |n/a |15.0
+|+15.1+ |n/a |15.1
+|_etc._ |n/a |_etc._
+|+15.++ |n/a |Latest of any installed "15.x"
 |====
 
 -> Call this method exactly once.  As of version link:release_notes.html#_7_7_0[], there is no default; previously it
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/plugin-intrepid.asciidoc
--- a/doc/website/plugin-intrepid.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/plugin-intrepid.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -303,7 +303,7 @@
 Subcomponent::
     This axis indicates that your module contains several separate parts, for example matching +client+ and +server+
 libraries.  There are no suggested standard values--you can use any word which describes the subcomponent.  If you
-need more than one work, use +camelCase+.
+need more than one word, use +camelCase+.
 Stage::
     This refers to stages of the software lifecycle.
 +
@@ -709,6 +709,7 @@
     a_debugging_x64_Debug -> b_debugging_x64_Debug;
     a_debugging_x64_Release -> b_debugging_x64_Release;
 }
+
 --
 
 
@@ -782,7 +783,7 @@
 the names of the configurations in the set will be those from the type, with the <<_configurationSets_prefix>> added at
 the beginning.
 
--> You must call this method exacly once.
+-> You must call this method exactly once.
 
 
 [[_configurationSets_prefix]]
@@ -867,7 +868,6 @@
 
 declares that there are two source-code dependencies and they should be retrieved to the directories '<workspace>/foo' and '<workspace>/bar' respectively.
 
-[[_relative_paths]]
 [[_relative_paths_and_subprojects]]
 ==== Relative Paths and Subprojects
 
@@ -891,7 +891,19 @@
 
 ==== Credentials
 
-By default, intrepid can only fetch source from repositories which do not require authentication.  If the project also has the link:plugin-my-credentials.html[] applied, it will use passwords cached in Windows Credential Manager to access Mercurial and Subversion repositories.  If cloning, checking out, or exporting a repository for which no password is already cached, the plugin will initialise the cached password for that repository using the value stored under +"Intrepid - Domain Credentials"+ (the default username and password managed by link:plugin-my-credentials.html[]).
+By default, intrepid can only fetch source from repositories which do not require authentication.  If the project also
+has the link:plugin-my-credentials.html[] applied, it will use passwords cached in Windows Credential Manager to access
+Mercurial and Subversion repositories.  If cloning, checking out, or exporting a repository for which no password is
+already cached, the plugin will initialise the cached username and password for that repository based on a value stored
+under "Intrepid - _type_" for some string "_type_".
+
+Before link:release_notes.html#_7_10_0[7.10.0] this type was always the default username and password managed by
+link:plugin-my-credentials.html[], "Domain Credentials".  Since 7.10.0 you can override the credential used as a basis
+for the source repository with the +link:plugin-intrepid.html#_credentialBasis[]+ property.
+
+
+using the value stored under
++"Intrepid - Domain Credentials"+ (the default username and password managed by link:plugin-my-credentials.html[]).
 
 ==== hg
 
@@ -956,6 +968,34 @@
 
 -> You must call one of +hg+, +git+, or +svn+.
 
+==== credentialBasis
+
+This is an optional property that defines which "Intrepid - _type_" credential will be used for the source repository.
+Using another credential type as a basis means that the user only has to enter their username and password once, even if
+the same credentials are used for multiple source repositories.  The intrepid plugin will read the username and password
+from the "Intrepid - _type_" credential in the gloss:credential-manager[] and cache it for the relevant source control
+software.
+
+Usage:
+
+[source,groovy]
+----
+sourceDependencies {
+    foo {
+        svn "http://shared-server.example-corp.com/path/to/foo"
+        // Uses "Intrepid - Domain Credentials" by default
+    }
+    bar {
+        hg "http://my-server.my-corp.com/path/to/bar"
+        credentialBasis = "MyCorp" // Uses "Intrepid - MyCorp"
+    }
+    baz {
+        git "http://other-server.other-corp.com/path/to/baz"
+        credentialBasis = "OtherCorp" // Uses "Intrepid - OtherCorp"
+    }
+}
+----
+
 ==== branch
 
 This is an optional property that defines which named branch of the repository to use. This is only valid for Mercurial
@@ -1298,19 +1338,105 @@
 }
 ----
 
-declares two dependencies:
+declares two dependencies.  The value in quotes is used as the path where the dependency should
+appear in the workspace.
 
 * +RenderingLib+ packages belonging to the configurations defined by the +LIB_64+ configuration type
 should be unpacked to the central cache, and a link should be created at
-+<workspace>/my-rendering-lib+. When this module is published, the +RenderingLib+ dependency will be
++<workspace>/RenderingLib+. When this module is published, the +RenderingLib+ dependency will be
 included in the module descriptor. 
 * +NUnit+ packages belonging to the configuration +bin+ should be unpacked directly to the workspace
 in folder called +<workspace>/NUnit 2.5.10+ (assuming that 2.5.10 is the most recent version with
 the prefix "2.5").
 
-==== Relative Paths
-
-Source dependencies and packed dependencies are now specified as relative paths rather than always being immediate subdirectories of the workspace. See <<_relative_paths>>.
+==== Dependency Locations
+
+Source dependencies and packed dependencies are now specified as relative paths rather than always being immediate
+subdirectories of the workspace. See <<_relative_paths_and_subprojects>>.
+
+Since link:release_notes.html#_7_12_0[7.12.0], all packed dependencies which share a configuration must appear under
+the same parent folder, or an exception is thrown.  Another simpler way to think of this is that every configuration
+must have exactly one folder where all its dependencies appear.  Multiple configurations can share the same folder,
+and indeed usually will do when they are part of a configuration set.
+
+Without this restriction, it would be possible for different versions of the same transitive dependency (from different
+packed dependencies) to target the same folder on disk.  With this restriction, that can't happen, because core Gradle
+ensures that there can be only one version of any dependency per configuration.
+
+For example, the following declarations are okay, because the relative paths are the same wherever the configurations
+are the same.
+
+[source,groovy]
+----
+packedDependencies {
+    "dep/RenderingLib" {
+        dependency "com.example-corp.rendering:RenderingLib:2012a2"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+    "dep/OtherLib" {
+        dependency "com.example-corp.teamA:OtherLib:2.5.2"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+    "dep_test/TestLib" {
+        dependency "com.example:TestLib:4.6"
+        configurationSet "test", configurationSetTypes.LIB_64
+    }
+}
+----
+
+However, the following declarations will fail, because the "build" configuration is part of the +main+ configuration
+set, so all three dependencies share the "build" configuration, but +TestLib+ is declared to appear under a different
+parent.
+
+[source,groovy]
+----
+packedDependencies {
+    "dep/RenderingLib" {
+        dependency "com.example-corp.rendering:RenderingLib:2012a2"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+    "dep/OtherLib" {
+        dependency "com.example-corp.teamA:OtherLib:2.5.2"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+    "dep_test/TestLib" {
+        dependency "com.example:TestLib:4.6"
+        configurationSet "build", configurationSetTypes.LIB_64
+    }
+}
+----
+
+===== Transitive Dependency Locations
+
+By default, when a packed dependency has further transitive dependencies, the unpacked directories or links for those
+will appear next to the packed dependency.  If a transitive dependency is also specified as a direct dependency, and
+the path specified for it as a direct dependency is different from this default path, then the transitive dependency
+will also appear at the specified other path.  For example, suppose you have the following script.
+
+[source,groovy]
+----
+packedDependencies {
+    "libA" {
+        dependency "com.example-corp.common:libA:1.0"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+    "subdir/libB" {
+        dependency "com.example-corp.common:libB:1.0"
+        configurationSet configurationSets.main, configurationSetTypes.LIB_64
+    }
+}
+----
+
+If +libA+ (with path +_rootDir_/libB+) depends on +libB+ then the default path for +libB+ would be +_rootDir_/libB+;
+but instead path +_rootDir_/subdir/libB+ will be used.
+
+Similarly, a transitive dependency can appear in multiple locations if is a dependency of two or more packed
+dependencies which are configured to appear in different locations.
+
+Before link:release_notes.html#_7_12_0[7.12.0], each transitive dependency would have only one link or unpack location,
+even if it should have appeared at multiple locations.  The Holy Gradle did not guarantee which location would be
+chosen.
+
 
 ==== Using +<version>+
 
@@ -1451,36 +1577,9 @@
 Putting your cache on a share is not recommended, for performance reasons.
 
 [[useRelativePathFromIvyXml]]
-==== Relative paths for transitive dependencies
-
-By default, when a packed dependency has further transitive dependencies, the unpacked directories/links for those
-will appear next to the packed dependency.  If a transitive dependency is also specified as a direct dependency, and the
-path specified for it as a direct dependency is different from this default path, then the specified path is used.  For
-example, suppose you have the following script.
-
-[source,groovy]
-----
-packedDependencies {
-    "libA" {
-        dependency "com.example-corp.common:libA:1.0"
-        configurationSet configurationSets.main, configurationSetTypes.LIB_64
-    }
-    "subdir/libB" {
-        dependency "com.example-corp.common:libB:1.0"
-        configurationSet configurationSets.main, configurationSetTypes.LIB_64
-    }
-}
-----
-
-If +libA+ (with path +_rootDir_/libB+) depends on +libB+ then the default path for +libB+ would be +_rootDir_/libB+; but
-instead path +_rootDir_/subdir/libB+ will be used.
-
-WARNING: It is recommended to put all dependencies paths under a single folder.  If you do not, then the location of
-the links for transitive dependencies may be unpredictable.  In the above example, if both +libA+ and +libB+ depend on
-+libC+, then the path for +libC+ may be either +_rootDir_/libC+ or +_rootDir_/subdir/libC+, and the Holy Gradle does not
-guarantee which will be used.
-
-Previous versions of the Holy Gradle allowed published modules to specify the relative location where each transitive
+==== Published relative paths for transitive dependencies
+
+Older versions of the Holy Gradle allowed published modules to specify the relative location where each transitive
 packed dependency should appear.  This design caused various problems, as follows.
 
 * If a packed dependency is used in multiple places in the dependency graph, it would require extra effort to create a
@@ -1491,9 +1590,9 @@
 and at least one of those projects forces a dependency to resolve to a different version, there is no way to create a
 correct set of links (in the default case where +unpackToCache = true+).
 
-In practice, all uses had a relative path of +"../_module_name_"+, so this is now the default, and the previous
-behaviour will be removed in a future version, provided no problems are found with this approach.
-For now, the previous behaviour can be re-activated with the following bit of DSL.
+In practice, all uses had a relative path of +"../_module_name_"+, so this is now the default.  Since
+link:release_notes.html#_7_12_0[7.12.0] the previous behaviour has been removed.  Attempting to use the following
+DSL will now cause an exception.
 
 [source,groovy]
 ----
@@ -1502,7 +1601,248 @@
 }
 ----
 
-If this value is set in the root project, it will affect all sub-projects unless they override it.
+=== sourceOverrides
+
+WARNING: This feature is "incubating": the syntax and behaviour may change in future releases.
+
+This container allows you to override the handling of specific packed dependencies to instead point to existing source
+on a local disk. This is intended for testing changes to dependencies without having to first package and publish those
+dependencies.  The replaced source does not have to use the Holy Gradle to build, or use Gradle at all, provided the
+correct XML files can be provided, as described below.
+
+[source,groovy]
+----
+sourceOverrides {
+    "framework" {
+        dependency "com.company:framework:1.1"
+        from "../source/framework-1.1"
+    }
+    "ext_lib" {
+        dependency "com.company.rendering:RenderingLib:2012a2"
+        from "C:/projects/renderingLib"
+    }
+}
+
+packedDependencies {
+    "framework" {
+        dependency "com.company:framework:1.1"
+        configuration "privateBuild->compileVc10Debug,compileVc10Release"
+    }
+}
+----
+
+This declares one dependency +framework+ and instead of using the packed binaries, will create links to
++../source/framework-1.1+. In addition, any transitive dependencies on +RenderingLib+ will be linked to
++C:/projects/renderingLib+ instead of the packed binaries.
+
+WARNING: Use of source overrides will make the link:plugin-intrepid.html#_fetchAllDependencies[] task slower, because
+it is also necessary to fetch and check the dependencies from the override source projects.  You can temporarily skip
+this step by passing +-PuseCachedSourceOverrideFiles+ to +gw.bat+.  However, if you do that, the Holy Gradle cannot warn
+you about inconsistent dependency versions between the containing project and the override projects.  This may result in
+unexpected errors at build time or runtime.
+
+==== Limitations and restrictions
+
+There are several limitations restrictions in using source overrides.
+
+* The source override mechanism allows for the override source to be built with a different version of the Holy
+Gradle, or built with some tool other than Gradle.  That can be useful but has some constraints.
+
+** Source overrides in the root project apply to all sub-projects, if it is a multi-project build, *but* they do not
+apply to any projects within the override source locations.  This is because the build tool for the override source may
+not provide a standard way to override direct and transitive dependencies.  If you want the same overrides to apply
+within an override source project, you must add source overrides within that project if it is a Holy Gradle project, or
+use some other mechanism if it uses a different build tool.
+
+** Fetching dependencies for the root project will also attempt to fetch dependencies in override source projects, so
+that an up-to-date list of dependencies can be checked against the root project and other override projects.  However,
+other tasks in the root project are not linked into the replacement projects, because there may be no standard way to
+do that.  Therefore, if you make changes in the override projects, you must rebuild them independently before you build
+the root project.  It would be possible to add custom tasks to your root project's +build.gradle+ to do that, but the
+details of how to do that are beyond this documentation.
+
+** The containing project will expect the published files of the source override project to be in the same location,
+relative to the link in the containing project's workspace, as they would be if the override project had been published,
+with its files zipped, uploaded, downloaded, and unzipped.  If this is not the case, then you should modify the override
+source project so that the location of its packaged files is the same before packaing as when unzipped.  If you cannot
+do that, you will need to add some extra build steps, in the containing project or the override source project, to copy
+or link those files into the expected location.
+
+* A project with source overrides defined can not be published because it depends on versions of some other modules
+which are unpublished.  Therefore it would be impossible to produce a valid gloss:ivy-xml[] file for the project itself.
+
+* In a multi-project build, the +sourceOverrides+ block can only be used in the root project, and the overrides apply to
+all projects.  (This restriction is in place because otherwise it is difficult or impossible to calculate the complete
+override structure.)
+
+* Source overrides apply to all configurations in a project.  If a packed dependency is used by two or more unconnected
+configurations, it is not possible to override it to source in some of those configurations and leave it as a packed
+dependency in others.
+
+* Dependencies that use +unpackToCache = false+ can not be overridden.  This is because their files are copied into the
+project workspace directly, instead of being linked in, so it is not possible to change a link to point to the
+override source.
+
+==== Transitive Dependencies
+
+The direct and transitive dependencies of a source override may differ from those of the binary package it is replacing.
+In that case, the Holy Gradle will make sure that dependency versions are consistent between the root project and the
+override source -- just as gloss:gradle[] checks consistency for binary dependencies.  This check also applies if there
+are multiple dependencies with source overrides, or if the override source project itself contains source overrides.
+
+To do this check, the +sourceOverride+ requires a valid Ivy file with the list of immediate dependencies at
++<sourceOverride>/build/publications/ivy/ivy.xml+ and an XML file at +<sourceOverride>/all-dependencies.xml+ containing
+a full list of immediate and transitive dependencies for the project in the format created by the
++summariseAllDependencies+ task, as follows.
+
+[source,xml]
+----
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+  <Configuration name="compileVc10Debug">
+    <Dependency name="framework" group="com.company" version="1.0" configuration="compileVc10Debug"/>
+    <Dependency name="external-lib" group="com.company" version="1.0" configuration="compileVc10Debug"/>
+  </Configuration>
+  <Configuration name="compileVc10Release">
+    <Dependency name="framework" group="com.company" version="1.0" configuration="compileVc10Release"/>
+    <Dependency name="external-lib" group="com.company" version="1.0" configuration="compileVc10Debug"/>
+  </Configuration>
+  <Configuration name="source"/>
+</Configurations>
+----
+
+NOTE: The +ivy.xml+ file is needed to "publish" a dummy module (with only one, empty ZIP artifact) to a private local
+"file://" repository, so that the Holy Gradle can force core Gradle to fetch that instead of the real module.  The
+"all dependencies" file is needed to check the versions of all transitive dependencies of the override project against
+all dependencies of the containing project.  It might seem that it should be possible to just add the direct
+dependencies of the override project to the containing project, then let Gradle find the transitive dependencies as
+normal.  However, that might give a different result because the override project source might use different
+repositories to find modules, or have custom dependency resolution rules.  Therefore the override project must generate
+these files.
+
+To make sure these files are up-to-date, when trying to resolve dependencies the plugin will try several methods in turn
+until one succeeds, as follows.
+
+# If the +sourceOverride+ declares an +link:plugin-intrepid.html#_ivyFileGenerator[]+ closure, call that to generate
+the two files and return the paths to them.
+# If the batch file +<sourceOverride>/generateSourceOverrideDetails.bat+ exists, run that to generate the two files.
+# Run "+<sourceOverride>/gw.bat -PrecordAbsolutePaths generateIvyModuleDescriptor summariseAllDependencies+".
+
+==== dependency
+
+This method specifies the coordinates of the dependency to override. It should follow the same pattern as the
++packedDependency+ definition. Transitive dependencies of this and any source dependencies will also be overridden
+but transitive dependencies of a source override will not. This will be reported as a version conflict at dependency
+resolution time.  If you need to override the transitive dependencies of a source override, then you must use
++sourceOverrides+ in that source override project as well.
+
+==== from
+
+This method defines a path, either absolute or relative to the root project, where the override source is located.
+
+==== ivyFileGenerator
+
+This method defines a closure to run to generate the dependency files for this source override. It should return a list
+of two +File+ objects, one for the direct dependency Ivy file and the other for the transitive dependency XML file. The
++SourceOverrideHandler+ is passed into the closure giving access to (among other things) the project object.
+
+This is useful in cases where the source does not use a compatible version of the Holy Gradle, or is not a Holy Gradle
+project, or not a Gradle project at all.  It is also useful if want to override some dependencies which are built as
+part of a multi-project build; the following example will generate the dependency files for a sub-project of
+"framework".
+
+[source,groovy]
+----
+sourceOverrides {
+    "subproject" {
+        dependency "com.company:subproject:1.1"
+        from "C:/projects/framework/subproject"
+        ivyFileGenerator { /*SourceOverrideHandler*/ handler ->
+            project.exec {
+                workingDir handler.from
+                executable "gw.bat"
+                args "-PrecordAbsolutePaths",
+                    "subproject:summariseAllDependencies", "subproject:generateIvyModuleDescriptor"
+            }
+            return [
+                new File("${handler.from}/subproject", "build/publications/ivy/ivy.xml"),
+                new File("${handler.from}/subproject", "all-dependencies.xml")
+            ]
+        }
+    }
+}
+----
+
+Note that the +SourceOverrideHandler+ is private to the Holy Gradle so you cannot actually reference that type in your
+build script.  However, since Groovy is a dynamic language, you can still call methods from +SourceOverrideHandler+ on
+that object.
+
+The next example just returns static files; for example, these might be created by hand.
+
+[source,groovy]
+----
+sourceOverrides {
+    "framework" {
+        dependency "com.company:framework:1.1"
+        from "C:/projects/framework/"
+        ivyFileGenerator { /*SourceOverrideHandler*/ handler ->
+            return [
+                new File(handler.from, "ivy.xml"),
+                new File(handler.from, "all-dependencies.xml")
+            ]
+        }
+    }
+}
+----
+
+If you override a module which comes from a multi-project build, and that module depends on other modules in that
+multi-project build, you may want to override several modules from one build.  To do that, you can use a pattern like
+the following.
+
+[source,groovy]
+----
+project.ext.subProjectOverrideProcessedRoots = new HashSet<File>()
+
+project.ext.subProjectOverride = { rootRelativePath ->
+    return { /*SourceOverrideHandler*/ handler ->
+        File overrideRootDir = new File(handler.from, rootRelativePath)
+        // Note: HashSet's add method returns true if the item was NOT already in the set.
+        if (subProjectOverrideProcessedRoots.add(overrideRootDir)) {
+            project.exec {
+                workingDir overrideRootDir
+                executable "gw.bat"
+                args "-PrecordAbsolutePaths", "generateIvyModuleDescriptor", "summariseAllDependencies"
+            }
+        }
+        return [
+            new File(handler.from, "build/publications/ivy/ivy.xml"),
+            new File(handler.from, "all-dependencies.xml")
+        ]
+    }
+}
+
+// These definitions assume that the folder with the root "build.gradle" for "framework" is
+// "C:/projects/framework" -- that is, ""C:/projects/framework/subprojectA/..".
+sourceOverrides {
+    "subprojectA" {
+        dependency "com.company:subprojectA:1.1"
+        from "C:/projects/framework/subprojectA"
+        ivyFileGenerator subProjectOverride("..")
+    }
+    "subprojectB" {
+        dependency "com.company:subprojectB:1.1"
+        from "C:/projects/framework/subprojectB"
+        ivyFileGenerator subProjectOverride("..")
+    }
+    "subprojectC" {
+        dependency "com.company:subprojectC:1.1"
+        from "C:/projects/framework/subprojectC"
+        ivyFileGenerator subProjectOverride("..")
+    }
+}
+----
+
+-> Calling this method is optional.
 
 [[_symlinks]]
 [[_links]]
@@ -1540,7 +1880,7 @@
     +---common  <-----------------------|
 ----
 
-Note that, before Holy Gradle link:release_notes.html#_7_8_0[], this block was called +links+.
+Note that, before Holy Gradle link:release_notes.html#_7_8_0[], this block was called +symlinks+.
 
 ==== to
 
@@ -2050,6 +2390,28 @@
 
 You may notice a task called +publishIvyPublicationToIvyRepository+ or similar. This exists because the +intrepid+ plugin uses the +ivy-publish+ plugin.
 
+=== summariseAllDependencies
+
+WARNING: This feature is "incubating": the syntax and behaviour may change in future releases.
+
+This task resolves all dependencies and saves them as a flat list grouped by configuration to +all-dependencies.xml+ in the project directory. For example.
+
+[source,xml]
+----
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+    <Configuration name="compileVc10Debug">
+        <Dependency name="framework" group="com.company" version="1.0" configuration="compileVc10Debug"/>
+        <Dependency name="external-lib" group="com.company" version="1.0" configuration="compileVc10Debug" sourcePath="C:/projects/external-lib"/>
+    </Configuration>
+    <Configuration name="compileVc10Release">
+        <Dependency name="framework" group="com.company" version="1.0" configuration="compileVc10Release"/>
+        <Dependency name="external-lib" group="com.company" version="1.0" configuration="compileVc10Debug" sourcePath="C:/projects/external-lib"/>
+    </Configuration>
+    <Configuration name="source"/>
+</Configurations>
+----
+
 [[_relative_paths_2]]
 == Relative paths
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/plugin-my-credentials.asciidoc
--- a/doc/website/plugin-my-credentials.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/plugin-my-credentials.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -13,9 +13,10 @@
 credentials under Windows.  It provides the following features.
 
 * Secure storage of credentials using the gloss:credential-manager[].
-* Methods to retrieve a username and password.
+* Methods to retrieve a username and password for use with binary dependency repositories.
+* Automatic use of credentials for +link:plugin-intrepid.html#_sourceDependencies[]+.
 * A dialog box to request credentials from the user.
-* DSL to specify instructions to be displayed in the dialog box.
+** DSL to specify instructions to be displayed in the dialog box.
 ** A time-out to prevent the dialog box permanently halting an autobuild machine.
 
 === Example build script
@@ -31,8 +32,29 @@
 
 repositories.ivy {
     credentials {
-        username my.username()
-        password my.password()
+        username my.username
+        password my.password
+    }
+    url "https://artifactory-server.example-corp.com/artifactory/my-integration-repo/"
+}
+----
+
+This will query the Credentials Manager for suitable credentials. If they exist then the username
+and password will be retrieved and used to configure the repository's credentials. If no such
+credentials exist in the Credentials Manager then a dialog box will be displayed, requesting input.
+Whatever the user enters will be permanently stored in the Credentials Manager.  They are stored
+under an entry labelled "Intrepid - _type_", where _type_ is the parameter described below.  If
+no argument is supplied, the default is "Intrepid - Domain Credentials".
+
+For example, if your Artifactory server is configured to require encrypted passwords, you could
+use the following to store that as "Intrepid - Artifactory".
+
+[source,groovy]
+----
+repositories.ivy {
+    credentials {
+        username my.username("Artifactory")
+        password my.password("Artifactory")
     }
     url "https://artifactory-server.example-corp.com/artifactory/my-integration-repo/"
 }
@@ -48,8 +70,8 @@
 ----
 repositories.all {
     credentials {
-        username my.username()
-        password my.password()
+        username my.username
+        password my.password
     }
 }
 repositories {
@@ -62,12 +84,13 @@
 }
 ----
 
-This will query the Credentials Manager for suitable credentials. If they exist then the username
-and password will be retrieved and used to configure the repository's credentials. If no such
-credentials exist in the Credentials Manager then a dialog box will be displayed, requesting input.
-Whatever the user enters will be permanently stored in the Credentials Manager.  They are stored
-under an entry labelled "Intrepid - _type_", where _type_ is the parameter described below; so the
-default entry is "Intrepid - Domain Credentials".
+=== Source Dependencies
+
+By default the "Domain Credentials" username and password are automatically used for
++link:plugin-intrepid.html#_sourceDependencies[]+.  From link:release_notes.html#_7.10.0[7.10.0] the
+credential type can also be set individually for source dependencies.  That type is then used as a
+basis for caching credentials in the Windows Credential Manager for use by Mercurial and Git.
+See the intrepid plugin documentation for more details.
 
 === The Gradle Daemon
 
@@ -82,21 +105,21 @@
 
 === username
 
-This method will return a user-name that has previously been entered by the user. If no suitable
-user-name exists in the Credentials Manager then a dialog box will be displayed.
+This property or method will return a username that has previously been entered by the user. If no
+suitable username exists in the Credentials Manager then a dialog box will be displayed.
 
-This method optionally takes one parameter to allow for different credentials to be used in
-different situations. When passing no parameter to this method, it acts as if +"Domain Credentials"+
-had been passed in.
+If uesd as a method (+my.username('type')+) this takes one _type_ parameter to allow for different
+credentials to be used in different situations. When used as a property (+my.username+) it acts as
+if calling the method with an argument of +"Domain Credentials"+.
 
 === password
 
-This method will return a password that has previously been entered by the user. If no suitable
-password exists in the Credentials Manager then a dialog box will be displayed.
+This property or method will return a password that has previously been entered by the user. If no
+suitable password exists in the Credentials Manager then a dialog box will be displayed.
 
-This method optionally takes one parameter to allow for different credentials to be used in
-different situations. When passing no parameter to this method, it acts as if +"Domain Credentials"+
-had been passed in.
+If uesd as a method (+my.password('type')+) this takes one _type_ parameter to allow for different
+credentials to be used in different situations. When used as a property (+my.password+) it acts as
+if calling the method with an argument of +"Domain Credentials"+.
 
 === instructions
 
@@ -121,11 +144,9 @@
 }
 ----
 
-The instructions for +"Domain Credentials"+ above will be displayed for calls to +username+ or
-+password+ with no parameters.  This is used automatically by the +link:plugin-intrepid.html[]+ when
-supplying passwords for +sourceDependencies+.  The username and password stored under this key are
-copied to an entry with key +username@@https://server/scm/hg/repo/@Mercurial+ so that the
-+mercurial-keyring+ Mercurial extension can use them.
+The instructions for +"Domain Credentials"+ above will be displayed for use of +username+ or
++password+ as properties.  This is used automatically by the +link:plugin-intrepid.html[]+ when
+supplying passwords for +sourceDependencies+.
 
 The +"Artifactory"+ credentials are not used automatically, but are typically used as shown in
 link:plugin-intrepid.html#_example_build_script[].
@@ -140,6 +161,8 @@
 the gloss:credential-manager[].  This program is automatically downloaded into your project
 directory the first time you use the gloss:holygradle[].
 
+=== Before 7.10.0
+
 Run it with no arguments and it will show you the command line options, then prompt you for your new
 password.  It will automatically replace all Mercurial credentials with this new password.  For any
 credentials stored under +Intrepid - _type_+ keys, it will prompt you for each one; you should answer
@@ -151,3 +174,48 @@
 ----
 credential-store "Intrepid - Artifactory" "_username_" "_password_"
 ----
+
+=== Since 7.10.0
+
+To support using different "Intrepid - _type_" credentials as a basis for different source
+repositories, +credential-store.exe+ has changed.  It reads a file +holygradle/credential-bases.txt+
+in your gloss:gradle-user-home[] folder, which contains a mapping from credential types to other
+source dependency credentials which are based on that type.  The intrepid plugin updates this file
+when it fetches source dependencies.
+
+Running +credential-store.exe+ it with no arguments will now output a usage message.  Usage is
+basically as follows.
+
+==== Updating default "Domain Credentials" and credentials based on that
+
+To update the default "Domain Credentials" type, run the following command.
+
+----
+credential-store for-default
+----
+
+This will prompt you for your username and password, store them as the "Intrepid - Domain Credentials",
+then also use that to update
+
+* cached credentials for Git and Mercurial which are not connected to any specific credential type
+as a basis; and
+* any "Intrepid - _type_" credentials which are not used as a basis for other cached credentials.
+
+==== Updating other Credential types and credentials based on those
+
+To update other basis credential types, run
+
+----
+credential-store for-basis _type_
+----
+
+where `_type_` is the name of the credential type used as a basis.
+
+==== Updating Individual Credentials
+
+If you need to update a single credential to something different you can run the following command,
+slightly different from before 7.10.0.
+
+----
+credential-store set "Intrepid - Artifactory" "_username_" "_password_"
+----
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/plugins.asciidoc
--- a/doc/website/plugins.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/plugins.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -215,6 +215,7 @@
 when multiple workspaces have the same dependencies.
 ** Explicit creation of extra directory links within workspace if required.
 ** Control of folder naming to allow multiple versions of the same component.
+** Overriding a packed dependency to use an existing source project on disk instead.
 * Publishing
 ** Creating "gloss:package[]d artifacts" (that is, ZIP files).
 ** Uploading to gloss:ivy[] format repository.
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/release_notes.asciidoc
--- a/doc/website/release_notes.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/release_notes.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -42,8 +42,184 @@
 
 === 7.x
 
+==== 7.12.x
+
+===== 7.12.1
+(13f535d08101 at 2018-03-27 14:52:01 UTC)
+
+Intrepid::
+
+* GR 6727 The gradle.properies file is now zipped along with +build.gradle+ and +settings.gradle+ in the
++buildScript+ configuration/artifact.  This provides a more complete picture of the build scripts by default.
+
+DevEnv::
+
+* GR 6728 Fixed bug (introduced in <<_7_11_0>>) which prevented all +DevEnv+ build tasks (+buildRelease+,
++buildDebug+, etc.) from working.
+
+CustomGradleCorePlugin {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+===== 7.12.0
+(01356a342715 at 2017-12-01 16:21:13 UTC)
+
+Intrepid::
+
+* Transitive packed dependencies can now appear in the workspace (as links or unpack folders) in more than one
+location.  Previously, if a transitive dependency was expected to appear in multiple locations (because it came from
+multiple packed dependencies which were configured to appear in different folders) it would only appear in one of those
+locations, and the location was not predictable.
+** To prevent multiple versions of the same transitive dependency targeting the same location, this change introduces
+the restriction that any packed dependency can only appear in one location per configuration.  In other words, each
+configuration must all its dependencies in one folder.  This may require breaking changes to the dependency paths in
+your +packedDependencies+ block.  See link:plugin-intrepid.html#_dependency_locations[] for more details.
+** Also as part of this, removed support for +packedDependenciesSettings.useRelativePathFromIvyXmle+, which was
+introduced in <<_7_4_0>> as a temporary way to re-enable that deprecated feature.
+
+
+CustomGradleCorePlugin {br} DevEnv {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+
+==== 7.11.x
+
+===== 7.11.0
+(4ec3faf09545 at 2017-10-12 15:56:06 UTC)
+
+Intrepid::
+
+* Major new feature: added support for "source overrides", which allow developers to replace the links for packed
+dependencies with links to a local checkout of corresponding source code.  This allows you to modify the source, for
+example to help debug a problem.  See link:plugin-intrepid.html#_sourceoverrides[] for more details.
+** Multiple packed dependencies can be replaced.
+** If the source of the replaced dependencies itself uses a new enough version of the Holy Gradle, then multiple levels
+of source override are possible.
+** The Holy Gradle can ensure that the transitive dependencies of the replaced source are consistent with the
+dependencies of the main build and any other source overrides.
+** A module with source overrides cannot be published, because Gradle cannot know the published version of the
+overridden dependency.
+
+
+CustomGradleCorePlugin {br} DevEnv {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+==== 7.10.x
+
+===== 7.10.4
+
+CredentialStore::
+
+* GR #6725 Fixed intermittent failures to create links to the unpack cache
+
+** Instead of correctly rebuilding symlinks Holy Gradle would leave behind an empty directory at a link source location, causing
+failures to re-create either directory junctions or symlinks to the unpack cache.
+
+Intrepid {br} CustomGradleCorePlugin {br} DevEnv {br} UnitTest {br} ArtifactoryManager {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+===== 7.10.3
+(62ee2a1a8eaf at 2017-09-27 12:12:57 UTC)
+
+DevEnv::
+
+* Improve support for choosing a Visual Studio version.  See link:plugin-devenv.html#_version[] for more details.
+** For a version of Visual Studio before 2017, try to use the +VSnnnCOMNTOOLS+ environment variable before trying to run
++vswhere.exe+, because some early versions of +vswhere.exe+ don't detect older versions of Visual Studio.
+** For versions of Visual Studio from 2017 onwards, allow specifying an exact update version (such as +15.0+ or +15.35+)
+or the latest minor version (using +15.++).
+
+CustomGradleCorePlugin {br} Intrepid {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+===== 7.10.2
+(bcbdabef989b at 2017-08-11 12:05:12 UTC)
+
+CredentialStore::
+
+* Change +credential-store.exe+ to compare usernames case-insensitively.
+
+Stamper::
+
+* GR #6718 Add support for reading/writing files with a non-default charset, e.g., UTF-8 on Windows 7.
++
+----
+stamping {
+    charsetName = "UTF-8" // New in 7.10.2
+
+    def commas = nextVersionNumber.replaceAll("\\.", ",")
+    files(".rc") {
+        replaceRegex ~/(FILEVERSION )[\d,]+(.*)/, commas
+        replaceRegex ~/(PRODUCTVERSION )[\d,]+(.*)/, commas
+        replaceRegex ~/(VALUE \"FileVersion\", \")[\d\.]+(\\0\")/, nextVersionNumber
+        replaceRegex ~/(VALUE \"ProductVersion\", \")[\d\.]+(\\0\")/, nextVersionNumber
+    }
+}
+----
++
+
+CustomGradleCorePlugin {br} Intrepid {br} DevEnv {br} UnitTest {br} ArtifactoryManager {br} MyCredentials {br} Utils::
+- No changes.
+
+===== 7.10.1
+(d61afb3c0e6d at 2017-07-20 16:18:17 UTC)
+
+CredentialStore::
+
+* GR #6716 Fix bugs in the changes to +credential-store.exe+ in 7.10.0
+
+** +credential-store for-default+ would update _all_ credentials, not just those not associated with any basis.
+** +credential-store.exe+ would fail without an error message if environment variable +GRADLE_USER_HOME+ was not set.
+
+DevEnv::
+
+* Support Visual Studio 2017.  (Instead of using environment variables, this version has a new mechanism for locating
++devenv.com+, namely by running +vswhere.exe+.  This allows installing multiple "flavours" of VS but needs changes to
+the Holy Gradle.)
+
+CustomGradleCorePlugin {br} Intrepid {br} UnitTest {br} ArtifactoryManager {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
+===== 7.10.0
+(238dac7222d6 at 2017-04-04 08:40:10 UTC)
+
+CustomGradleCorePlugin {br} CredentialStore {br} Intrepid {br} MyCredentials::
+
+* GR #6715 Allow source dependency credentials to be derived from a user-named "basis" credential.  This supports
+having source dependencies on repos hosted at different sites, which need different credentials.
+
+** To use this, add +credentialBasis = "AnyStringYouLike"+ to a +sourceDependency+ block.  The default basis string is
++"Domain Credentials"+ for backward compatibility.
+** +credential-store.exe+ has been modified to allow users to separately update credentials for a given basis, or
+to update credentials not associated with any basis (for backward compatibility and for use with credentials supplied
+from +my.credentials+ to binary dependency repositories such as Artifactory).  This relies on a file
++holygradle/credential-bases.txt+ which is written into the user's Gradle Home directory by the Intrepid plugin and
+read by +credential-store.exe+.
+
+DevEnv {br} UnitTest {br} ArtifactoryManager {br} Stamper {br} Utils::
+- No changes.
+
 ==== 7.9.x
 
+===== 7.9.2
+(6de1381c9dba at 2017-03-28 10:09:55 UTC)
+
+CustomGradleCorePlugin::
+
+* GR #6714 Fix: ensure an exception is thrown to stop the build if Git/Hg/Svn processes have a non-zero exit value.
+
+Intrepid::
+
+* GR #6714 Various fixes related to Git (and Hg) source dependencies:
+** The existing Git support was specific to the now-outdated "wincred" Git credential helper.  Support was changed to
+also cover the newer "winstore" and "manager" helpers.  The Holy Gradle will always cache credentials for "http(s):"
+URLs for Git source dependencies, even if they aren't actually needed, otherwise the newer helpers may show a modal
+dialog which never times out which can cause problems on continuous integration build machines.
+** If a source dependency was not fetched correctly, Gradle would still treat the fetch task as "up to date", so running
+it again would do nothing unless you deleted your ".gradle" build state cache folder.
+
+DevEnv {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+- No changes.
+
 ===== 7.9.1
 (3e6fe3d1f432 at 2016-07-26 13:35:49 UTC)
 
@@ -56,7 +232,7 @@
 
 * GR #6701 Upgrade the version of 7-zip used, to avoid security vulnerability https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2335.
 
-DevEnv {br} UnitTest {br} CustomGradleCorePlugin {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
+DevEnv {br} UnitTest {br} ArtifactoryManager {br} CredentialStore {br} MyCredentials {br} Stamper {br} Utils::
 - No changes.
 
 ===== 7.9.0
@@ -580,7 +756,7 @@
 [source, groovy]
 ----
 rootProject.name = "MyModule"
-----
+---- 
 +
 Currently you can only change the name of the root project.  Changing the name of subprojects causes
 problems with the part of intrepid which handles source dependencies.  This could be fixed easily
diff -r 9b75eaff9e23 -r 48a0dd8dac1d doc/website/sitemap-content.asciidoc
--- a/doc/website/sitemap-content.asciidoc	Sat Jun 10 22:29:31 2017 +0100
+++ b/doc/website/sitemap-content.asciidoc	Fri May 03 13:55:15 2019 +0100
@@ -13,7 +13,7 @@
 The Holy Gradle
 and Artifactory
 </div>
-version 7.8.0
+version {local_hg_release_info}
 <hr />
 <ul>
     <li><a href="index.html" target="_top">Home</a></li>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	Sat Jun 10 22:29:31 2017 +0100
+++ b/gradle/wrapper/gradle-wrapper.properties	Fri May 03 13:55:15 2019 +0100
@@ -3,4 +3,4 @@
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.9-all.zip
diff -r 9b75eaff9e23 -r 48a0dd8dac1d gradlew.bat
--- a/gradlew.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/gradlew.bat	Fri May 03 13:55:15 2019 +0100
@@ -21,6 +21,7 @@
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
+for %%f in ("%DIRNAME:~0,-1%") do set JUSTDIRNAME=%%~nxf
 
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
 set DEFAULT_JVM_OPTS=
@@ -28,7 +29,7 @@
 SET GRADLE_DISTRIBUTION_URL=https\://services.gradle.org/distributions/
 
 @rem Allow use of Holy Gradle specific options to override system Java settings
-if defined HOLY_GRADLE_JAVA_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_HOME%
+if defined HOLY_GRADLE_JAVA_8_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_8_HOME%
 if defined HOLY_GRADLE_GRADLE_HOME set GRADLE_HOME=%HOLY_GRADLE_GRADLE_HOME%
 
 @rem Find java.exe
@@ -73,16 +74,28 @@
   if /i "%%a" == "fetchAllDependencies" set NO_DAEMON_OPTION=--no-daemon
 )
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-@rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
-@rem because the wrapper-starter-kit subproject needs to copy it from here.
-if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
-)
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  @rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
+  @rem because the wrapper-starter-kit subproject needs to copy it from here.
+  if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
+  ) else (
+    echo ************************************************************
+    echo WARNING: No local file found for wrapper\base-url-lookup.txt
+    echo ************************************************************
+  )
+
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  ) else (
+    echo *********************************************************
+    echo WARNING: No local file found for wrapper\proxy-lookup.txt
+    echo *********************************************************
+  )
+
 )
 
 @rem Try to find a proxy server and port based on the DNS suffix values on the local machine.
@@ -101,53 +114,10 @@
   @rem We need a do-nothing command above because a label must label a command, not a closing parenthesis.
 )
 
-@rem If we're building the Holy Gradle, we just use the standard wrapper properties,
-@rem and there will be no project-local init-scripts for us to run.
-if "%APP_HOME:~-21%"=="\holy-gradle-plugins\" (
-    goto skipWriteWrapperProperties
-)
-
 set INIT_SCRIPT_OPTS=
 FOR %%f IN ("%APP_HOME%gradle\init.d\*.gradle") DO (
     SET "INIT_SCRIPT_OPTS=!INIT_SCRIPT_OPTS! -I "%%f""
 )
-set DISTRIBUTION_ORIGINAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionPath.txt"
-
-@rem Find a local_artifacts sub-folder, in this folder or any ancestor folder.
-set LOCAL_ARTIFACTS_DIR_NAME=local_artifacts
-set LOCAL_ARTIFACTS_DIR_RELATIVE_URL=
-set LOCAL_ARTIFACTS_DIR_PATH=
-set "dir=%~f0"
-:findLocalArtifactsLoop
-  @rem Get the parent directory using ~dp trick, then strip the trailing '\'
-  for %%d in ("%dir%") do set "dir=%%~dpd"
-  set "dir=%dir:~0,-1%"
-
-  if exist "%dir%\%LOCAL_ARTIFACTS_DIR_NAME%\" (
-    set "LOCAL_ARTIFACTS_DIR_PATH=%dir%\%LOCAL_ARTIFACTS_DIR_NAME%"
-    goto :findLocalArtifactsDone
-  )
-
-  if "%dir:~-1%" == ":" (
-    goto :findLocalArtifactsDone
-  )
-
-  set "LOCAL_ARTIFACTS_DIR_RELATIVE_URL=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%"
-goto findLocalArtifactsLoop
-
-:findLocalArtifactsDone
-
-
-
-if not "x%LOCAL_ARTIFACTS_DIR_PATH%"=="x" (
-  @rem We have to use goto here, instead of an "else (...)", because Windows will try to parse the
-  @rem "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%" inside the else, and fail because the variable isn't set.
-  if exist "%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle" (
-    @rem If the wrapper folder exists inside local_artifacts folder then write wrapper properties 
-    @rem based on local_artifacts location.
-    goto writeWrapperPropertiesForLocalArtifacts
-  )
-)
 
 if "x%HOLY_GRADLE_REPOSITORY_BASE_URL%"=="x" (
 
@@ -175,54 +145,19 @@
   )
 )
 
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-if not exist "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in" (
-    echo Not generating "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" because ".in" file does not exist.
-    goto skipWriteWrapperProperties
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\certs" (
+    xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
+  ) else (
+    echo **************************************************
+    echo WARNING: No local files found for wrapper\certs\**
+    echo **************************************************
+  )
+
 )
 
-
-@rem Write the distribution base URL to a file and concat with the properties and path.
-@rem Note that this "set" trick (to echo without a newline) sets ERRORLEVEL to 1.
-if not "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%"=="/" set HOLY_GRADLE_REPOSITORY_BASE_URL=%HOLY_GRADLE_REPOSITORY_BASE_URL%/
-<nul set /p=distributionUrl=%GRADLE_DISTRIBUTION_URL%> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_ORIGINAL_PATH_FILE%
-goto writeWrapperProperties
-
-:writeWrapperPropertiesForLocalArtifacts
-
-REM The local_artifacts folder has a custom-gradle folder, so use the distribution in there.
-set LOCAL_DISTRIBUTIONS_DIR=%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle
-set DISTRIBUTION_LOCAL_DIR_NAME=
-for /d %%D in (%LOCAL_DISTRIBUTIONS_DIR%/gradle-*-bin) do (
-    if not x!DISTRIBUTION_LOCAL_DIR_NAME!x == xx (
-        echo WARNING: Found more than one local Gradle distribution under %LOCAL_DISTRIBUTIONS_DIR%
-        dir /b %LOCAL_DISTRIBUTIONS_DIR%
-    )
-    set DISTRIBUTION_LOCAL_DIR_NAME=%%D
-)
-<nul set /p=distributionUrl=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle/%DISTRIBUTION_LOCAL_DIR_NAME%/> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-
-set DISTRIBUTION_LOCAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionLocalPath.txt"
-echo %~nx0 found "%LOCAL_ARTIFACTS_DIR_PATH%"
-echo so will generate "%APP_HOME%gradle\wrapper\gradle-wrapper.properties"
-echo from %DISTRIBUTION_LOCAL_PATH_FILE%
-echo instead of %DISTRIBUTION_ORIGINAL_PATH_FILE%.
-set /p DISTRIBUTION_PATH= <%DISTRIBUTION_ORIGINAL_PATH_FILE%
-set DISTRIBUTION_LOCAL_PATH=%DISTRIBUTION_PATH:plugins-release/holygradle/=%
-<nul set /p=%DISTRIBUTION_LOCAL_PATH%>%DISTRIBUTION_LOCAL_PATH_FILE%
-
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_LOCAL_PATH_FILE%
-
-:writeWrapperProperties
-copy >nul /y /a "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in"+"%APP_HOME%gradle\wrapper\distributionUrlBase.txt"+%DISTRIBUTION_PATH_FILE% "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" /b
-
-:skipWriteWrapperProperties
-
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\certs" (
-  xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
-)
 if not exist "%APP_HOME%gradle\wrapper\certs" goto certsDone
 @rem Find keytool.exe from java.exe.
 
@@ -274,12 +209,16 @@
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+:executeGradle
 @rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS%
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS% %HOLY_GRADLE_OPTS%
 
 :end
 @rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="123456" goto execute
+if exist .restart (
+    del .restart
+    goto executeGradle
+)
 if "%ERRORLEVEL%"=="0" goto mainEnd
 
 :fail
diff -r 9b75eaff9e23 -r 48a0dd8dac1d gw.bat
--- a/gw.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/gw.bat	Fri May 03 13:55:15 2019 +0100
@@ -1,2 +1,1 @@
-@echo 'gw.bat' is deprecated and will be removed in future; use 'gradlew.bat' instead.
 %~dp0gradlew.bat %*
diff -r 9b75eaff9e23 -r 48a0dd8dac1d https-setup-kit/gradlew.bat
--- a/https-setup-kit/gradlew.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/https-setup-kit/gradlew.bat	Fri May 03 13:55:15 2019 +0100
@@ -21,6 +21,7 @@
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
+for %%f in ("%DIRNAME:~0,-1%") do set JUSTDIRNAME=%%~nxf
 
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
 set DEFAULT_JVM_OPTS=
@@ -28,7 +29,7 @@
 SET GRADLE_DISTRIBUTION_URL=https\://services.gradle.org/distributions/
 
 @rem Allow use of Holy Gradle specific options to override system Java settings
-if defined HOLY_GRADLE_JAVA_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_HOME%
+if defined HOLY_GRADLE_JAVA_8_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_8_HOME%
 if defined HOLY_GRADLE_GRADLE_HOME set GRADLE_HOME=%HOLY_GRADLE_GRADLE_HOME%
 
 @rem Find java.exe
@@ -73,16 +74,28 @@
   if /i "%%a" == "fetchAllDependencies" set NO_DAEMON_OPTION=--no-daemon
 )
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-@rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
-@rem because the wrapper-starter-kit subproject needs to copy it from here.
-if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
-)
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  @rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
+  @rem because the wrapper-starter-kit subproject needs to copy it from here.
+  if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
+  ) else (
+    echo ************************************************************
+    echo WARNING: No local file found for wrapper\base-url-lookup.txt
+    echo ************************************************************
+  )
+
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  ) else (
+    echo *********************************************************
+    echo WARNING: No local file found for wrapper\proxy-lookup.txt
+    echo *********************************************************
+  )
+
 )
 
 @rem Try to find a proxy server and port based on the DNS suffix values on the local machine.
@@ -101,53 +114,10 @@
   @rem We need a do-nothing command above because a label must label a command, not a closing parenthesis.
 )
 
-@rem If we're building the Holy Gradle, we just use the standard wrapper properties,
-@rem and there will be no project-local init-scripts for us to run.
-if "%APP_HOME:~-21%"=="\holy-gradle-plugins\" (
-    goto skipWriteWrapperProperties
-)
-
 set INIT_SCRIPT_OPTS=
 FOR %%f IN ("%APP_HOME%gradle\init.d\*.gradle") DO (
     SET "INIT_SCRIPT_OPTS=!INIT_SCRIPT_OPTS! -I "%%f""
 )
-set DISTRIBUTION_ORIGINAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionPath.txt"
-
-@rem Find a local_artifacts sub-folder, in this folder or any ancestor folder.
-set LOCAL_ARTIFACTS_DIR_NAME=local_artifacts
-set LOCAL_ARTIFACTS_DIR_RELATIVE_URL=
-set LOCAL_ARTIFACTS_DIR_PATH=
-set "dir=%~f0"
-:findLocalArtifactsLoop
-  @rem Get the parent directory using ~dp trick, then strip the trailing '\'
-  for %%d in ("%dir%") do set "dir=%%~dpd"
-  set "dir=%dir:~0,-1%"
-
-  if exist "%dir%\%LOCAL_ARTIFACTS_DIR_NAME%\" (
-    set "LOCAL_ARTIFACTS_DIR_PATH=%dir%\%LOCAL_ARTIFACTS_DIR_NAME%"
-    goto :findLocalArtifactsDone
-  )
-
-  if "%dir:~-1%" == ":" (
-    goto :findLocalArtifactsDone
-  )
-
-  set "LOCAL_ARTIFACTS_DIR_RELATIVE_URL=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%"
-goto findLocalArtifactsLoop
-
-:findLocalArtifactsDone
-
-
-
-if not "x%LOCAL_ARTIFACTS_DIR_PATH%"=="x" (
-  @rem We have to use goto here, instead of an "else (...)", because Windows will try to parse the
-  @rem "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%" inside the else, and fail because the variable isn't set.
-  if exist "%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle" (
-    @rem If the wrapper folder exists inside local_artifacts folder then write wrapper properties 
-    @rem based on local_artifacts location.
-    goto writeWrapperPropertiesForLocalArtifacts
-  )
-)
 
 if "x%HOLY_GRADLE_REPOSITORY_BASE_URL%"=="x" (
 
@@ -175,54 +145,19 @@
   )
 )
 
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-if not exist "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in" (
-    echo Not generating "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" because ".in" file does not exist.
-    goto skipWriteWrapperProperties
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\certs" (
+    xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
+  ) else (
+    echo **************************************************
+    echo WARNING: No local files found for wrapper\certs\**
+    echo **************************************************
+  )
+
 )
 
-
-@rem Write the distribution base URL to a file and concat with the properties and path.
-@rem Note that this "set" trick (to echo without a newline) sets ERRORLEVEL to 1.
-if not "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%"=="/" set HOLY_GRADLE_REPOSITORY_BASE_URL=%HOLY_GRADLE_REPOSITORY_BASE_URL%/
-<nul set /p=distributionUrl=%GRADLE_DISTRIBUTION_URL%> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_ORIGINAL_PATH_FILE%
-goto writeWrapperProperties
-
-:writeWrapperPropertiesForLocalArtifacts
-
-REM The local_artifacts folder has a custom-gradle folder, so use the distribution in there.
-set LOCAL_DISTRIBUTIONS_DIR=%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle
-set DISTRIBUTION_LOCAL_DIR_NAME=
-for /d %%D in (%LOCAL_DISTRIBUTIONS_DIR%/gradle-*-bin) do (
-    if not x!DISTRIBUTION_LOCAL_DIR_NAME!x == xx (
-        echo WARNING: Found more than one local Gradle distribution under %LOCAL_DISTRIBUTIONS_DIR%
-        dir /b %LOCAL_DISTRIBUTIONS_DIR%
-    )
-    set DISTRIBUTION_LOCAL_DIR_NAME=%%D
-)
-<nul set /p=distributionUrl=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle/%DISTRIBUTION_LOCAL_DIR_NAME%/> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-
-set DISTRIBUTION_LOCAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionLocalPath.txt"
-echo %~nx0 found "%LOCAL_ARTIFACTS_DIR_PATH%"
-echo so will generate "%APP_HOME%gradle\wrapper\gradle-wrapper.properties"
-echo from %DISTRIBUTION_LOCAL_PATH_FILE%
-echo instead of %DISTRIBUTION_ORIGINAL_PATH_FILE%.
-set /p DISTRIBUTION_PATH= <%DISTRIBUTION_ORIGINAL_PATH_FILE%
-set DISTRIBUTION_LOCAL_PATH=%DISTRIBUTION_PATH:plugins-release/holygradle/=%
-<nul set /p=%DISTRIBUTION_LOCAL_PATH%>%DISTRIBUTION_LOCAL_PATH_FILE%
-
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_LOCAL_PATH_FILE%
-
-:writeWrapperProperties
-copy >nul /y /a "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in"+"%APP_HOME%gradle\wrapper\distributionUrlBase.txt"+%DISTRIBUTION_PATH_FILE% "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" /b
-
-:skipWriteWrapperProperties
-
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\certs" (
-  xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
-)
 if not exist "%APP_HOME%gradle\wrapper\certs" goto certsDone
 @rem Find keytool.exe from java.exe.
 
@@ -274,12 +209,16 @@
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+:executeGradle
 @rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS%
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS% %HOLY_GRADLE_OPTS%
 
 :end
 @rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="123456" goto execute
+if exist .restart (
+    del .restart
+    goto executeGradle
+)
 if "%ERRORLEVEL%"=="0" goto mainEnd
 
 :fail
diff -r 9b75eaff9e23 -r 48a0dd8dac1d https-setup-kit/gw.bat
--- a/https-setup-kit/gw.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/https-setup-kit/gw.bat	Fri May 03 13:55:15 2019 +0100
@@ -1,2 +1,1 @@
-@echo 'gw.bat' is deprecated and will be removed in future; use 'gradlew.bat' instead.
 %~dp0gradlew.bat %*
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest.groovy
--- a/integration/src/test/groovy/holygradle/BasicIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,15 +1,9 @@
 package holygradle
 
-import holygradle.io.FileHelper
 import holygradle.test.AbstractHolyGradleIntegrationTest
 import holygradle.test.WrapperBuildLauncher
-import org.gradle.api.Project
-import org.gradle.api.file.CopySpec
-import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Test
 
-import static org.junit.Assert.*
-
 /**
  * Very basic integration "smoke test".
  */
@@ -38,13 +32,16 @@
                 (~/^Detected a changing module.*$/) : null,
                 (~/pluginsRepoOverride=.*/) : "pluginsRepoOverride=[active]",
                 (~/Download .*\.(pom|jar)/) : null, // Ignore any new Holy Gradle dependencies being cached.
-                (~/Total time:.*/) : "Total time: [snipped]",
+                (~/BUILD SUCCESSFUL in [0-9]+s*/) : "BUILD SUCCESSFUL in [snipped]s",
                 (~/Gradle user home:.*/) : "Gradle user home: [snipped]",
                 (~/Holy Gradle init script .*/) : "Holy Gradle init script [snipped]",
                 (~/Using SNAPSHOT version\..*/) : null,
                 (~/ UP-TO-DATE$/) : "",
+                (~/> Configure project :.*/) : null,
+                (~/^$/) : null,
+
             ])
-            regression.checkForRegression(testFileName)
+            regression.checkForRegression(testFileName, true)
         }
     }
 
@@ -68,56 +65,4 @@
             launcher.forTasks("tasks", "--all")
         }
     }
-
-    /**
-     * This tests that a warning is logged if the requested version of a plugin is not selected.
-     */
-    @Test
-    public void testVersionOverrideDetection() {
-        final String pluginName = 'custom-gradle-core-plugin'
-        final String originalVersion = "0.0-${System.getProperty('user.name')}SNAPSHOT-0"
-        final String overrideVersion = "0"
-        createExtraPluginVersion(pluginName, originalVersion, overrideVersion)
-
-        // Now run the build.
-        File projectDir = new File(getTestDir(), "tVOD")
-        OutputStream outputStream = new ByteArrayOutputStream()
-        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
-            launcher.forTasks("tasks", "--all")
-            launcher.setStandardOutput(outputStream)
-        }
-        List<String> outputLines = outputStream.toString().readLines()
-        final String expectedWarning =
-            "WARNING: Buildscript for root project 'tVOD' requested holygradle:${pluginName}:${overrideVersion} but " +
-            "selected holygradle:${pluginName}:0.0-${System.getProperty('user.name')}SNAPSHOT-0.  " +
-            "If this is not expected please check plugin versions are consistent in all projects, including checking " +
-            "any resolutionStrategy.  The reason for this selection is: conflict resolution."
-        int messageIndex = outputLines.indexOf(expectedWarning)
-        assertNotEquals("Override warning should appear in output", -1, messageIndex)
-    }
-
-    // Fake up a version "0" of custom-gradle-core-plugin.
-    private void createExtraPluginVersion(String pluginName, String originalVersion, String overrideVersion) {
-        File pluginsRepoOverrideDir = new File(pluginsRepoOverride.toString() - (pluginsRepoOverride.scheme + ':'))
-        File pluginDir = new File(pluginsRepoOverrideDir, "holygradle/${pluginName}")
-        File pluginOriginalVersionDir = new File(pluginDir, originalVersion)
-        File pluginOverrideVersionDir = new File(pluginDir, overrideVersion)
-        FileHelper.ensureDeleteDirRecursive(pluginOverrideVersionDir)
-        Project project = ProjectBuilder.builder().withProjectDir(new File(getTestDir(), "tVOD")).build()
-        project.copy { CopySpec it ->
-            it.from pluginOriginalVersionDir
-            it.into pluginOverrideVersionDir
-            it.rename "(.*)${originalVersion}(.*)", "\$1${overrideVersion}\$2"
-            it.exclude "*.xml"
-        }
-        project.copy { CopySpec it ->
-            it.from pluginOriginalVersionDir
-            it.into pluginOverrideVersionDir
-            it.rename "(.*)${originalVersion}(.*)", "\$1${overrideVersion}\$2"
-            it.include "*.xml"
-            it.filter { String line ->
-                line.replaceAll(originalVersion, overrideVersion)
-            }
-        }
-    }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest/tAPIT/settings.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest/tAPIT/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,2 @@
+rootProject.name = 'tAPIT'
+enableFeaturePreview('STABLE_PUBLISHING')
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest/tBPC/build.gradle
--- a/integration/src/test/groovy/holygradle/BasicIntegrationTest/tBPC/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest/tBPC/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -33,8 +33,9 @@
     Test my-credentials.
 */
 // First, set "holygradle_test" credentials so that they're guaranteed to be there to read.
+// This will output a message "Updated: Intrepid - holygradle_test"
 exec {
-    commandLine "${projectDir}/credential-store.exe", '"Intrepid - holygradle_test"', 'test', 'testpass'
+    commandLine "${projectDir}/credential-store.exe", 'set', '"Intrepid - holygradle_test"', 'test', 'testpass'
 }
 repositories {
     ivy {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest/tBPC/settings.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest/tBPC/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,2 @@
+rootProject.name = 'tBPC'
+enableFeaturePreview('STABLE_PUBLISHING')
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest_tAPIT_stdout.ok.txt
--- a/integration/src/test/groovy/holygradle/BasicIntegrationTest_tAPIT_stdout.ok.txt	Sat Jun 10 22:29:31 2017 +0100
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest_tAPIT_stdout.ok.txt	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,6 @@
 Using pluginsRepoOverride=[active]
-:tasks
+
+> Task :tasks
 
 ------------------------------------------------------------
 All tasks runnable from root project
@@ -37,6 +38,7 @@
 fetchFirstLevelSourceDependencies - Retrieves only the first level 'sourceDependencies'.
 rebuildLinks - Rebuild all links.
 rebuildLinksToCache - Rebuild all links to the unpack cache
+summariseAllDependencies - Create an XML file listing all direct and transitive dependencies
 zipDependencies - Collect all non-source dependencies into a 'local_artifacts' ZIP.
 
 DevEnv tasks
@@ -67,6 +69,7 @@
 createPublishNotes - Creates 'build_info' directory which will be included in published packages.
 generateDescriptorFileForIvyPublication - Generates the Ivy Module Descriptor XML file for publication 'ivy'.
 generateIvyModuleDescriptor - Backwards-compatibility task for generating ivy.xml files for publication. This task will be removed in a future version of the Holy Gradle. It has been replaced by tasks with name generateDescriptorFileFor<NAME OF PUBLICATION>Publication.
+generateMetadataFileForIvyPublication - Generates the Gradle metadata file for publication 'ivy'.
 packageEverything - Creates all zip packages for project 'tAPIT'.
 publish - Publishes all publications produced by this project.
 repackageEverything - As 'packageEverything' but doesn't auto-generate any files.
@@ -92,6 +95,5 @@
 extractSevenZip - Unpack build dependency 'sevenZip'
 packageBuildScript - Creates a zip file for 'buildScript' in preparation for publishing project 'tAPIT'.
 
-BUILD SUCCESSFUL
-
-Total time: [snipped]
+BUILD SUCCESSFUL in [snipped]s
+1 actionable task: 1 executed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d integration/src/test/groovy/holygradle/BasicIntegrationTest_tBPC_stdout.ok.txt
--- a/integration/src/test/groovy/holygradle/BasicIntegrationTest_tBPC_stdout.ok.txt	Sat Jun 10 22:29:31 2017 +0100
+++ b/integration/src/test/groovy/holygradle/BasicIntegrationTest_tBPC_stdout.ok.txt	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,8 @@
 Using pluginsRepoOverride=[active]
-:tasks
+
+Updated: Intrepid - holygradle_test
+
+> Task :tasks
 
 ------------------------------------------------------------
 All tasks runnable from root project
@@ -37,6 +40,7 @@
 fetchFirstLevelSourceDependencies - Retrieves only the first level 'sourceDependencies'.
 rebuildLinks - Rebuild all links.
 rebuildLinksToCache - Rebuild all links to the unpack cache
+summariseAllDependencies - Create an XML file listing all direct and transitive dependencies
 zipDependencies - Collect all non-source dependencies into a 'local_artifacts' ZIP.
 
 DevEnv tasks
@@ -75,6 +79,7 @@
 createPublishNotes - Creates 'build_info' directory which will be included in published packages.
 generateDescriptorFileForIvyPublication - Generates the Ivy Module Descriptor XML file for publication 'ivy'.
 generateIvyModuleDescriptor - Backwards-compatibility task for generating ivy.xml files for publication. This task will be removed in a future version of the Holy Gradle. It has been replaced by tasks with name generateDescriptorFileFor<NAME OF PUBLICATION>Publication.
+generateMetadataFileForIvyPublication - Generates the Gradle metadata file for publication 'ivy'.
 packageEverything - Creates all zip packages for project 'tBPC'.
 publish - Publishes all publications produced by this project.
 publishIvyPublicationToIvyRepository - Publishes Ivy publication 'ivy' to Ivy repository 'ivy'.
@@ -106,6 +111,5 @@
 unitTestMain_testDebug
 unitTestMain_testRelease
 
-BUILD SUCCESSFUL
-
-Total time: [snipped]
+BUILD SUCCESSFUL in [snipped]s
+1 actionable task: 1 executed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/Helper.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/Helper.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/Helper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -14,10 +14,15 @@
 
 import java.nio.file.Path
 import java.nio.file.Paths
+import java.security.MessageDigest
+import java.util.regex.Matcher
+import java.util.regex.Pattern
 
 class Helper {
     // Recursively navigates down subprojects to gather the names of all sourceDependencies which
     // have not specified sourceControlRevisionForPublishedArtifacts.
+    public static final int MAX_VERSION_STRING_LENGTH = 50
+
     public static Collection<SourceDependencyHandler> getTransitiveSourceDependencies(Project project) {
         doGetTransitiveSourceDependencies(project.sourceDependencies as Collection<SourceDependencyHandler>)
     }
@@ -190,5 +195,20 @@
             mercurialIniFile.write(iniText)
             println "Your mercurial.ini (in ${mercurialIniFile.parent}) has been modified."
         }
-    } 
+    }
+
+    /**
+     * Converts a file path to a version string, by hashing the path and prefixing "SOURCE".  A short, 4 character,
+     * hash is used because it may itself be used as part of a file path and some parts of Windows are limited to 260
+     * characters for the entire file path.
+     * @param path A file path
+     * @return A valid version string, of length at most {@link Helper#MAX_VERSION_STRING_LENGTH}.
+     */
+    public static String convertPathToVersion(String path) {
+        String canonicalPath = new File(path).canonicalPath
+
+        MessageDigest sha1 = MessageDigest.getInstance("SHA1")
+        byte[] digest = sha1.digest(canonicalPath.getBytes())
+        return "SOURCE_${digest[0..3].collect { String.format('%02x', it) }.join()}"
+    }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/IntrepidPlugin.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/IntrepidPlugin.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/IntrepidPlugin.groovy	Fri May 03 13:55:15 2019 +0100
@@ -8,6 +8,7 @@
 import holygradle.custom_gradle.util.ProfilingHelper
 import holygradle.dependencies.*
 import holygradle.io.Link
+import holygradle.io.FileHelper
 import holygradle.links.LinkHandler
 import holygradle.links.LinkTask
 import holygradle.links.LinksToCacheTask
@@ -24,8 +25,11 @@
 import holygradle.unpacking.SevenZipHelper
 import holygradle.unpacking.SpeedyUnpackManyTask
 import org.gradle.api.*
-import org.gradle.api.artifacts.Configuration
-import org.gradle.api.artifacts.ConfigurationContainer
+import org.gradle.api.artifacts.*
+import org.gradle.api.artifacts.repositories.IvyArtifactRepository
+import org.gradle.api.initialization.Settings
+import org.gradle.api.invocation.Gradle
+import org.gradle.api.logging.LogLevel
 
 public class IntrepidPlugin implements Plugin<Project> {
     public static final String EVERYTHING_CONFIGURATION_NAME = "everything"
@@ -116,6 +120,9 @@
         // Define the 'packedDependency' DSL for the project.
         Collection<PackedDependencyHandler> packedDependencies = PackedDependencyHandler.createContainer(project)
 
+        // Define the 'sourceOverrides' DSL for the project
+        /*Collection<SourceOverrideHandler> sourceOverrides =*/ SourceOverrideHandler.createContainer(project)
+
         // Define the 'dependenciesState' DSL for the project.
         /*DependenciesStateHandler dependenciesState =*/ DependenciesStateHandler.createExtension(project)
 
@@ -210,7 +217,7 @@
         }
         rebuildLinksTask.initialize()
 
-        Task fetchAllDependenciesTask = project.task(
+        /*Task fetchAllDependenciesTask =*/ project.task(
             FETCH_ALL_DEPENDENCIES_TASK_NAME,
             type: DefaultTask
         ) { Task it ->
@@ -240,6 +247,14 @@
                 Helper.fixMercurialIni()
             }
         }
+        /*SummariseAllDependenciesTask allDependenciesTask =*/ (SummariseAllDependenciesTask)project.task(
+            "summariseAllDependencies",
+            type: SummariseAllDependenciesTask
+        ) { SummariseAllDependenciesTask it ->
+            it.group = "Dependencies"
+            it.description = "Create an XML file listing all direct and transitive dependencies"
+            it.initialize()
+        }
 
         // Lazy configuration is a "secret" internal feature for use by plugins.  If a task adds a ".ext.lazyConfiguration"
         // property containing a single Closure, it will be executed just before that specific task runs.  As long as
@@ -291,7 +306,7 @@
                 // For each source dependency, create a suitable task and link it into the
                 // fetchAllDependencies task.
                 sourceDependencies.each { sourceDep ->
-                    Task fetchTask = sourceDep.createFetchTask(project, buildScriptDependencies)
+                    Task fetchTask = sourceDep.createFetchTask(project)
                     fetchTask.dependsOn beforeFetchSourceDependenciesTask
                     fetchAllSourceDependenciesTask.dependsOn fetchTask
                     fetchFirstLevelSourceDependenciesTask.dependsOn fetchTask
@@ -417,8 +432,113 @@
             }
         }
 
+        profilingHelper.timing("IntrepidPlugin(${project}) set up source overrides") {
+            setupSourceOverrides(project)
+        }
 
         timer.endBlock()
     }
-}
+
+    private void setupSourceOverrides(Project project) {
+        NamedDomainObjectContainer<SourceOverrideHandler> sourceOverrides = project.sourceOverrides
+        IvyArtifactRepository sourceOverrideDummyModulesRepo = null
+
+        sourceOverrides.whenObjectAdded {
+            // Fail if source overrides are added in a non-root project, because it will be even more effort to tie together
+            // overrides across subprojects and cross-check them.  We'd like to support that some day, maybe.  We could just
+            // not add the DSL handler to non-root projects, but then the user would only get a MissingMethodException
+            // instead of a useful error message.
+            if (project != project.rootProject) {
+                throw new RuntimeException("Currently sourceOverrides can only be used in the root project.")
+            }
+
+            // If and when any source overrides are added, we also need to add a repo to contain dummy entries for all the
+            // overridden module versions.  We force this to the start of the project repo list because it will contain
+            // relatively few entries, and those versions won't appear in any normal repo.
+            if (sourceOverrideDummyModulesRepo == null) {
+                File tempDir = new File(project.buildDir, "holygradle/source_override")
+                FileHelper.ensureMkdirs(tempDir)
+                sourceOverrideDummyModulesRepo = project.repositories.ivy { it.url = tempDir.toURI() }
+                project.repositories.remove(sourceOverrideDummyModulesRepo)
+                project.repositories.addFirst(sourceOverrideDummyModulesRepo)
+            }
+        }
+
+        // Add a dependency resolve rule for all configurations, which applies source overrides (if there are any).  We
+        // use ConfigurationContainer#all so that this is applied for each configuration when it's created.
+        project.configurations.all((Closure){ Configuration configuration ->
+            // Gradle automatically converts Closures to Action<>, so ignore IntelliJ warning.
+            //noinspection GroovyAssignabilityCheck
+            configuration.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
+                project.logger.debug(
+                    "Checking for source overrides: requested ${details.requested}, target ${details.target}, " +
+                        "in ${configuration}"
+                )
+                for (SourceOverrideHandler handler in sourceOverrides) {
+                    if (shouldUseSourceOverride(project, details, handler)) {
+                        details.useVersion(handler.dummyVersionString)
+                        break
+                    }
+                }
+            }
+        })
+
+        project.gradle.addListener(new SourceOverridesDependencyResolutionListener(project))
 
+        if (project == project.rootProject) {
+            // We use taskGraph.whenReady here, instead of just project.afterEvaluate, because we want to know whether
+            // the "dependencies" task was selected.
+            project.gradle.taskGraph.whenReady {
+                if (!project.sourceOverrides.empty) {
+                    // If the user is running the 'dependencies' task then it may because they have a depdendency conflict, so
+                    // make sure they get the details of sourceOverrides regardless of the configured logging level.
+                    LogLevel level = (project.gradle.taskGraph.hasTask("dependencies")) ? LogLevel.LIFECYCLE : LogLevel.INFO
+//2345678901234567890123456789012345678901234567890123456789012345678901234567890 <-- 80-column ruler
+                    project.logger.log(
+                        level,
+                        """
+This project has source overrides, which have automatically-generated versions:
+"""
+                    )
+                    for (SourceOverrideHandler override in project.sourceOverrides) {
+                        project.logger.log(level, "  ${override.dependencyCoordinate} -> ${override.dummyDependencyCoordinate}")
+                        project.logger.log(level, "    at ${override.from}")
+                    }
+                }
+            }
+        }
+    }
+
+    private static boolean shouldUseSourceOverride(
+        Project project,
+        DependencyResolveDetails details,
+        SourceOverrideHandler handler
+    ) {
+        // If there's a dependency conflict, the 'requested' version may not be the one in the source
+        // override handler, even though the current 'target' version is, so check both.
+        if (details.requested.group == handler.groupName &&
+            details.requested.name == handler.dependencyName &&
+            details.requested.version == handler.versionStr
+        ) {
+            project.logger.debug("  MATCH requested: using ${handler.dummyVersionString}")
+            return true
+        }
+        if (details.target.group == handler.groupName &&
+            details.target.name == handler.dependencyName &&
+            details.target.version == handler.versionStr
+        ) {
+            project.logger.debug("  MATCH target: using ${handler.dummyVersionString}")
+            return true
+        }
+        if (details.target.group == handler.groupName &&
+            details.target.name == handler.dependencyName &&
+            details.target.version.endsWith("+")
+        ) {
+            project.logger.debug(
+                "  MATCH FLOATING version for source override ${handler.name}: using ${handler.dummyVersionString}"
+            )
+            return true
+        }
+        return false
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesHelper.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesHelper.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -86,7 +86,6 @@
             }
         }
 
-        configureToCopyCustomGradleDistribution(copySpec)
         configureToCopyPublishNotes(copySpec)
     }
 
@@ -233,34 +232,6 @@
     }
 
     /**
-     * Configures this task to copy the custom-gradle distribution into the target "local_artifacts" folder.
-     */
-    private void configureToCopyCustomGradleDistribution(CopySpec copySpec) {
-        // project.gradle.gradleHomeDir will be something like:
-        //
-        //   C:\Users\nmcm\.gradle\wrapper\dists\custom-gradle-1.3-1.0.1.10\j5dmdk875e2rad4dnud3sriop\custom-gradle-1.3
-        //
-        // We want to copy the ZIP file in
-        //
-        //   C:\Users\nmcm\.gradle\wrapper\dists\custom-gradle-1.3-1.0.1.10\j5dmdk875e2rad4dnud3sriop
-        //
-        // called
-        //
-        //   custom-gradle-1.3-1.0.1.10.zip
-        //
-        // to
-        //
-        //   custom-gradle/1.0.1.10
-
-        final File gradleHomeParentDir = copyTask.project.gradle.gradleHomeDir.parentFile
-        final String distName = gradleHomeParentDir.parentFile.name
-        String customDistVersion = distName - "custom-gradle-${copyTask.project.gradle.gradleVersion}-"
-        copySpec.from(new File(gradleHomeParentDir, distName + ".zip").toString()) { CopySpec child ->
-            child.into "custom-gradle/${customDistVersion}"
-        }
-    }
-
-    /**
      * Configures this task to copy the publish notes into the target "local_artifacts" folder
      */
     private void configureToCopyPublishNotes(CopySpec copySpec) {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/CollectDependenciesTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -9,7 +9,9 @@
         }
 
         destinationDir = new File(project.rootProject.projectDir, CollectDependenciesHelper.LOCAL_ARTIFACTS_DIR_NAME)
-        doFirst {
+        // This has to be an "onlyIf" block, rather than "doFirst", because more recent versions of Gradle create the
+        // output folder for a task before the doFirst block executes.
+        onlyIf {
             logger.info("Copying dependencies to ${destinationDir}")
             if (destinationDir.exists()) {
                 throw new RuntimeException(
@@ -17,6 +19,7 @@
                     "because it would overwrite files for the running version of the holygradle plugins."
                 )
             }
+            return true
         }
 
         new CollectDependenciesHelper(this).configure(this)
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/DependenciesStateHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/dependencies/DependenciesStateHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/DependenciesStateHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -86,13 +86,22 @@
         if (forBuildscript) {
             return false
         }
-        
-        final Project moduleInBuild = project.rootProject.allprojects.find {
+
+        return findModuleInBuild(id) != null
+    }
+
+    /**
+     * Returns the relevant {@link Project) if and only if the given module version id matches one of the modules being
+     * built by the current build; otherwise returns null.
+     * @param id The id of the module to consider
+     * @return The project for the module if it is one in this build, otherwise null.
+     */
+    public Project findModuleInBuild(ModuleVersionIdentifier id) {
+        return project.rootProject.allprojects.find {
             (it.group == id.group) &&
                 (it.name == id.name) &&
                 (it.version == id.version)
         }
-        return moduleInBuild != null
     }
 
     /**
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependenciesSettingsHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependenciesSettingsHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependenciesSettingsHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -47,6 +47,10 @@
         }
     }
 
+    public void setUseRelativePathFromIvyXml(boolean defaultFail) {
+        throw new UnsupportedOperationException("Using the relative path from ivy.xml files is no longer supported.")
+    }
+
     public void setUnpackedDependenciesCacheDir(File unpackCacheDir) {
         unpackedDependenciesCacheDir = unpackCacheDir
     }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependencyHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependencyHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/PackedDependencyHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -31,11 +31,8 @@
 
     public PackedDependencyHandler(String depName) {
         super(depName)
-
-        //throw new RuntimeException("No project for PackedDependencyHandler for $depName")
+    }
 
-    }
-    
     public PackedDependencyHandler(String depName, Project projectForHandler) {
         super(depName, projectForHandler)
 
@@ -45,28 +42,7 @@
 
         this.projectForHandler = projectForHandler
     }
-    
-    public PackedDependencyHandler(
-        String depName,
-        Project projectForHandler,
-        String dependencyCoordinate,
-        Collection<AbstractMap.SimpleEntry<String, String>> configurations
-    ) {
-        this(depName, projectForHandler)
-        this.projectForHandler = projectForHandler
-        initialiseDependencyId(dependencyCoordinate)
-        this.configurationMappings.addAll(configurations)
-    }
-    
-    public PackedDependencyHandler(
-        String depName,
-        Project projectForHandler,
-        ModuleVersionIdentifier dependencyCoordinate
-    ) {
-        this(depName, projectForHandler)
-        dependencyId = dependencyCoordinate
-    }
-    
+
     private PackedDependencyHandler getParentHandler() {
         if (projectForHandler == null) {
             null
@@ -84,6 +60,10 @@
                 return true
             }
         } else {
+            if (getSourceOverride() != null && !unpackToCache) {
+                throw new RuntimeException("A source override can not be applied to a packed dependency with unpackToCache = false")
+            }
+
             return unpackToCache
         }
     }
@@ -124,7 +104,7 @@
             return createSettingsFile
         }
     }
-    
+
     public boolean shouldMakeReadonly() {
         if (readonly == null) {
             PackedDependencyHandler p = getParentHandler()
@@ -150,7 +130,7 @@
             return applyUpToDateChecks
         }
     }
-    
+
     private void initialiseDependencyId(String dependencyCoordinate) {
         if (dependencyId != null) {
             throw new RuntimeException("Cannot set dependency more than once")
@@ -163,7 +143,7 @@
             dependencyId = new DefaultModuleVersionIdentifier(match[1], match[2], match[3])
         }
     }
-        
+
     public void dependency(String dependencyCoordinate) {
         initialiseDependencyId(dependencyCoordinate)
     }
@@ -186,6 +166,16 @@
         }
     }
 
+    /**
+     * Returns the {@link SourceOverrideHandler} from the root project which corresponds to this dependency, if there is
+     * one; otherwise return null.
+     * @return the {@link SourceOverrideHandler} from the root project which corresponds to this dependency, if there is
+     * one, otherwise null.
+     */
+    public SourceOverrideHandler getSourceOverride() {
+        return project.rootProject.sourceOverrides.find { it.dependencyCoordinate == dependencyCoordinate }
+    }
+
     public String getGroupName() {
         getDependencyId().group
     }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/SourceOverrideHandler.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/SourceOverrideHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,299 @@
+package holygradle.dependencies
+
+import groovy.xml.Namespace
+import holygradle.Helper
+import holygradle.io.FileHelper
+import holygradle.process.ExecHelper
+import org.gradle.api.Project
+import org.gradle.api.artifacts.ModuleVersionIdentifier
+import org.gradle.api.file.CopySpec
+import org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier
+import org.gradle.process.ExecSpec
+
+import java.util.regex.Matcher
+import java.util.zip.ZipEntry
+import java.util.zip.ZipOutputStream
+
+class SourceOverrideHandler {
+    public static String HOLY_GRADLE_NAMESPACE = "https://holygradle.butbucket.org/ivy-ext/1/"
+    public static String HOLY_GRADLE_NAMESPACE_NAME = "holygradle"
+
+    private String name
+    private Project project
+    private ModuleVersionIdentifier dependencyId = null
+    private String dummyVersionString
+    private String from
+    private Closure<SourceOverrideHandler> ivyFileGenerator
+    private boolean hasGeneratedDependencyFiles = false
+    private boolean hasGeneratedDummyModuleFiles = false
+    private File sourceOverrideIvyFile = null
+
+    public static Collection<SourceOverrideHandler> createContainer(Project project) {
+        project.extensions.sourceOverrides = project.container(SourceOverrideHandler) { String name ->
+            new SourceOverrideHandler(name, project)
+        }
+        project.extensions.sourceOverrides
+    }
+
+    public SourceOverrideHandler(String name, Project project) {
+        this.name = name
+
+        if (project == null) {
+            throw new RuntimeException("Null project for SourceOverrideHandler for $name")
+        }
+
+        this.project = project
+    }
+
+    public String getName() {
+        return name
+    }
+
+    public void dependency(String dep) {
+        initialiseDependencyId(dep)
+    }
+
+    public void from(String override) {
+        if (new File(override).isAbsolute()) {
+            from = override
+        } else {
+            from = new File(project.projectDir, override).canonicalPath
+        }
+        dummyVersionString = Helper.convertPathToVersion(from)
+    }
+
+    public String getFrom() {
+        from
+    }
+
+    @SuppressWarnings("GroovyUnusedDeclaration") // API method for use in build scripts.
+    public void ivyFileGenerator(Closure<SourceOverrideHandler> generator) {
+        ivyFileGenerator = generator
+    }
+
+    public Closure<SourceOverrideHandler> getIvyFileGenerator() {
+        ivyFileGenerator
+    }
+
+    public File getIvyFile() {
+        if (sourceOverrideIvyFile == null) {
+            generateIvyFile()
+        }
+        return sourceOverrideIvyFile
+    }
+
+    public void generateIvyFile() {
+        if (from == null) {
+            throw new RuntimeException(
+                "Cannot generate dependency files for source override '${name}': the 'from' location has not been set"
+            )
+        }
+        if (hasGeneratedDependencyFiles) {
+            return
+        }
+
+        final File defaultIvyXmlFile = new File(from, "build/holygradle/flat-ivy.xml")
+        final File gradleWrapperScript = new File(from, "gradlew.bat")
+        final File generateSourceOverrideDetailsScript = new File(from, "generateSourceOverrideDetails.bat")
+
+        if (project.hasProperty("useCachedSourceOverrideFiles")) {
+            project.logger.info("Skipping generation of fresh ivy file for ${dependencyCoordinate}")
+            sourceOverrideIvyFile = defaultIvyXmlFile
+        }
+
+        // First check the cache.
+        if (sourceOverrideIvyFile != null) {
+            project.logger.info("Using cached ivy file for ${dependencyCoordinate}")
+        } else if (getIvyFileGenerator()) {
+            // Otherwise use the generator function, if defined.
+            project.logger.info("Using custom ivy file generator for ${dependencyCoordinate}")
+            def generator = getIvyFileGenerator()
+            def (ivyXmlFile, dependenciesXmlFile) = generator(this)
+            if (!(ivyXmlFile != null && dependenciesXmlFile != null)) {
+                throw new RuntimeException(
+                    "ivyFileGenerator for source override ${name} in ${project} must return two valid filenames, " +
+                    "but returned '${ivyXmlFile}' and '${dependenciesXmlFile}'."
+                )
+            }
+            sourceOverrideIvyFile = ivyXmlFile
+        } else if (generateSourceOverrideDetailsScript.exists()) {
+            // Otherwise try to run a user provided Ivy file generator, if it exists.
+            project.logger.info("Using standard ivy file generator batch script for ${dependencyCoordinate}")
+            project.logger.info("Batch File: ${generateSourceOverrideDetailsScript.canonicalPath}")
+
+            ExecHelper.execute(project.logger, project.&exec) { ExecSpec spec ->
+                spec.workingDir from
+                spec.executable generateSourceOverrideDetailsScript.canonicalPath
+            }
+            sourceOverrideIvyFile = defaultIvyXmlFile
+        } else if (gradleWrapperScript.exists()) {
+            // Otherwise try to run gradlew.bat, if it exists.
+            project.logger.info("Using gradlew.bat ivy file generation for ${dependencyCoordinate}")
+            project.logger.info("${generateSourceOverrideDetailsScript.canonicalPath} not found")
+
+            ExecHelper.execute(project.logger, project.&exec) { ExecSpec spec ->
+                spec.workingDir from
+                spec.executable gradleWrapperScript.canonicalPath
+                spec.args "-PrecordAbsolutePaths", "generateDescriptorFileForIvyPublication", "summariseAllDependencies"
+            }
+            sourceOverrideIvyFile = defaultIvyXmlFile
+        } else {
+            throw new RuntimeException(
+                "No Ivy file generation available for '${name}'. " +
+                "Please ensure your source override contains a generateSourceOverrideDetails.bat, " +
+                "or a compatible gradlew.bat, or else provide a custom generation method in your build.gradle."
+            )
+        }
+
+        project.logger.info("generateIvyFile result: ${sourceOverrideIvyFile}")
+
+        // Lastly, check the files really exist.
+        List<String> missingFileMessages = []
+        if (!sourceOverrideIvyFile.exists()) {
+            missingFileMessages << "Ivy file '${sourceOverrideIvyFile}' does not exist"
+        }
+        if (!missingFileMessages.empty) {
+            throw new RuntimeException(
+                "For source override ${name} in ${project}, some dependency files do not exist: " +
+                missingFileMessages.join(";") + "."
+            )
+        }
+
+        hasGeneratedDependencyFiles = true
+    }
+
+    // This method creates the minimum set of files required to represent a "dummy" version of a module in a local
+    // ivy "file://" repository.  We need to create these so that we can allow Gradle's dependency resolution to be
+    // applied to the containing build and find valid modules for both dependencies in that build (from that build's
+    // projects' normal repos) and in any override projects (from the local file repo we create).  We can't just try
+    // to find dependencies in the override projects using repos from the containing build, because the override
+    // projects might use different ivy repos -- or use some different way of finding dependencies.  Once Gradle can
+    // find all these dependencies, we can make use of its ability to detect version conflicts.
+    public void generateDummyModuleFiles() {
+        if (hasGeneratedDummyModuleFiles) {
+            return
+        }
+
+        File tempDir = new File(
+            project.buildDir,
+            "holygradle/source_override/${groupName}/${dependencyName}/${dummyVersionString}"
+        )
+        FileHelper.ensureMkdirs(tempDir, "for source override dummy file repository")
+
+        project.logger.info("Writing dummy artifact for ${dummyDependencyCoordinate}")
+        File dummyArtifactFile = new File(tempDir, "dummy_artifact-${dummyVersionString}.zip")
+        ZipOutputStream dummyArtifact = new ZipOutputStream(new FileOutputStream(dummyArtifactFile))
+        // We need to add an empty entry otherwise we get an invalid ZIP file.
+        dummyArtifact.putNextEntry(new ZipEntry("file.txt"))
+        dummyArtifact.closeEntry()
+        dummyArtifact.close()
+        project.logger.info("Wrote dummy artifact for ${dummyDependencyCoordinate} to '${dummyArtifactFile}'")
+
+        String tempIvyFileName = "ivy-${dummyVersionString}.xml"
+        // Explicitly check if the source exists, because project.copy will silently succeed if it doesn't.
+        if (!ivyFile.exists()) {
+            throw new RuntimeException(
+                "Cannot copy '${ivyFile}' to '${new File(tempDir, tempIvyFileName)}' because the source does not exist"
+            )
+        }
+        project.copy { CopySpec copySpec ->
+            copySpec.into tempDir
+            copySpec.from(ivyFile.parentFile) { CopySpec innerCopySpec ->
+                innerCopySpec.include ivyFile.name
+                innerCopySpec.rename { tempIvyFileName }
+            }
+        }
+
+        // Modify the ivy file to reflect our source
+        def ivyXmlFile = new File(tempDir, tempIvyFileName)
+        XmlParser xmlParser = new XmlParser(false, true)
+        Node ivyXml = xmlParser.parse(ivyXmlFile)
+
+        def hg = new Namespace(HOLY_GRADLE_NAMESPACE, HOLY_GRADLE_NAMESPACE_NAME)
+
+        ivyXml.info.@organisation = groupName
+        ivyXml.info.@module = dependencyName
+        ivyXml.info.@revision = dummyVersionString
+        // Remove all the existing artifacts
+        def publications = ivyXml.publications.first()
+        publications.value = ""
+        ivyXml.configurations.conf.each { conf ->
+            publications.appendNode('artifact', [name: 'dummy_artifact', type: 'zip', ext: 'zip', conf: conf.@name])
+        }
+
+        ivyXml.dependencies.dependency.each { Node dep ->
+            String sourcePathValue = dep.attributes().get(hg.'sourcePath')
+            if (sourcePathValue != null) {
+                dep.@rev = Helper.convertPathToVersion(sourcePathValue)
+            }
+        }
+
+        project.logger.info("Writing new ivy file for ${dependencyCoordinate}")
+        ivyXmlFile.withWriter { writer ->
+            XmlNodePrinter nodePrinter = new XmlNodePrinter(new PrintWriter(writer))
+            nodePrinter.setPreserveWhitespace(true)
+            nodePrinter.print(ivyXml)
+        }
+        project.logger.info("Wrote new ivy file for ${dependencyCoordinate} to '${ivyXmlFile}'")
+
+        hasGeneratedDummyModuleFiles = true
+    }
+
+    private void initialiseDependencyId(String dependencyCoordinate) {
+        if (dependencyId != null) {
+            throw new RuntimeException("Cannot set dependency more than once")
+        }
+        Matcher groupMatch = dependencyCoordinate =~ /(.+):(.+):(.+)/
+        if (groupMatch.size() == 0) {
+            throw new RuntimeException("Incorrect dependency coordinate format: '$dependencyCoordinate'")
+        } else {
+            final List<String> match = groupMatch[0] as List<String>
+            dependencyId = new DefaultModuleVersionIdentifier(match[1], match[2], match[3])
+            project.logger.debug "Initialised source override '${name}' with dependency coordinate ${dependencyId}" +
+                "(from '${dependencyCoordinate}')"
+        }
+    }
+
+    /**
+     * Throw if this handler is NOT in a valid state.  This allows callers to avoid wasting time in
+     * {@link #generateDummyModuleFiles} only to find something fails later on.
+     */
+    public void checkValid() {
+        if (dependencyId == null) {
+            throw new RuntimeException("You must call the 'dependency' method for source override '${name}'")
+        }
+    }
+
+    private ModuleVersionIdentifier getDependencyId() {
+        checkValid()
+        return dependencyId
+    }
+
+    public String getGroupName() {
+        getDependencyId().group
+    }
+
+    public String getDependencyName() {
+        getDependencyId().module.name
+    }
+
+    public String getVersionStr() {
+        getDependencyId().version
+    }
+
+    public String getDummyVersionString() {
+        dummyVersionString
+    }
+
+    public String getDependencyCoordinate() {
+        getDependencyId().toString()
+    }
+
+    public String getDummyDependencyCoordinate() {
+        if (dummyVersionString == null) {
+            throw new RuntimeException("You must call the sourceOverride method before requesting a dummy coordinate")
+        }
+        final ModuleVersionIdentifier depId = getDependencyId()
+        "${depId.group}:${depId.name}:${dummyVersionString}"
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/SourceOverridesDependencyResolutionListener.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/SourceOverridesDependencyResolutionListener.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,385 @@
+package holygradle.dependencies
+
+import groovy.util.slurpersupport.GPathResult
+import holygradle.Helper
+import holygradle.custom_gradle.BuildHelper
+import org.gradle.BuildListener
+import org.gradle.BuildResult
+import org.gradle.api.NamedDomainObjectContainer
+import org.gradle.api.Project
+import org.gradle.api.artifacts.Configuration
+import org.gradle.api.artifacts.DependencyResolutionListener
+import org.gradle.api.artifacts.ResolutionStrategy
+import org.gradle.api.artifacts.ResolvableDependencies
+import org.gradle.api.artifacts.result.DependencyResult
+import org.gradle.api.artifacts.result.ResolvedDependencyResult
+import org.gradle.api.artifacts.result.ResolvedComponentResult
+import org.gradle.api.artifacts.result.UnresolvedDependencyResult
+import org.gradle.api.initialization.Settings
+import org.gradle.api.internal.artifacts.configurations.ResolutionStrategyInternal
+import org.gradle.api.invocation.Gradle
+import org.gradle.api.logging.LogLevel
+import sun.rmi.runtime.Log
+
+class SourceOverridesDependencyResolutionListener implements DependencyResolutionListener, BuildListener {
+    private final Project project
+
+    public SourceOverridesDependencyResolutionListener(Project project) {
+        this.project = project
+    }
+
+    private Exception beforeResolveException = null
+    // Mapping each handler
+    //   to each configuration in the override project
+    //     to each "group:name" dependency in that configuration (including all transitive deps, not just
+    // direct)
+    //       to the "version" for that dependency (which might be a "normal" version or also an override).
+    //
+    // We use LinkedHashMaps to get a stable order for which things appear first in the error messages.
+    private LinkedHashMap<
+        SourceOverrideHandler, LinkedHashMap<String, LinkedHashMap<String,String>>
+        > sourceOverrideDependencies = null
+
+    // TODO 2016-04-29 HUGR: We should extend source overrides to allow different overrides per configuration,
+    // but currently we don't.  So, we only need to calculate this once, which is helpful for the common case
+    // where there are no conflicts.  (Even if we did it per configuration, we might be able to be smart about
+    // not re-doing work if we considered extendsFrom relationships.)  In that case, we probably need to support
+    // adding overrides in subprojects, because they might need to apply to configurations which are not
+    // connected to any in the root project.
+    private List<String> conflictBetweenOverrideMessages = null
+
+    private final Object lazyInitLock = new Object()
+    private final Set<String> unusedSourceOverrides = new HashSet<>()
+
+    @Override
+    void beforeResolve(ResolvableDependencies resolvableDependencies) {
+        if (findProjectConfiguration(resolvableDependencies) == null) {
+            project.logger.debug("source overrides: beforeResolve SKIPPING ${resolvableDependencies.path}")
+            return // because source overrides aren't applicable to the buildscript or to detached configurations
+        }
+        project.logger.debug("source overrides: beforeResolve ${resolvableDependencies.path}")
+
+        NamedDomainObjectContainer<SourceOverrideHandler> sourceOverrides = project.sourceOverrides
+
+        synchronized (lazyInitLock) {
+            if (unusedSourceOverrides.empty) {
+                unusedSourceOverrides.addAll(project.sourceOverrides*.dependencyCoordinate)
+            }
+        }
+
+        // Create dummy module files for each source override.  (Internally it will only do this once per build
+        // run.)  We do this in beforeResolve handler because we don't need to do it unless we are actually
+        // resolving some configurations: for tasks like "tasks" we don't need to.
+        try {
+            // First, check that all handlers are valid.  Otherwise we may waste time generating files for
+            // some, only for the others to fail.
+            sourceOverrides.each { SourceOverrideHandler handler -> handler.checkValid() }
+            // Now actually generate the files.
+            sourceOverrides.each { SourceOverrideHandler handler ->
+                project.logger.debug(
+                    "beforeResolve ${resolvableDependencies.name}; " +
+                    "generating dummy module files for ${handler.dependencyCoordinate}"
+                )
+                handler.generateDummyModuleFiles()
+            }
+        } catch (Exception e) {
+            // Throwing in the beforeResolve handler leaves logging in a broken state so we need to catch
+            // this exception and throw it later.
+            beforeResolveException = e
+        }
+    }
+
+    @Override
+    void afterResolve(ResolvableDependencies resolvableDependencies) {
+        final Configuration projectConfiguration = findProjectConfiguration(resolvableDependencies)
+        if (projectConfiguration == null) {
+            project.logger.debug("source overrides: afterResolve SKIPPING ${resolvableDependencies.path}")
+            return // because source overrides aren't applicable to the buildscript or to detached configurations
+        }
+
+        project.logger.debug("source overrides: afterResolve ${resolvableDependencies.path}")
+        rethrowIfBeforeResolveHadException()
+        noteUsedSourceOverrides(resolvableDependencies)
+        debugLogResolvedDependencies(resolvableDependencies)
+        Map<SourceOverrideHandler, Map<String, Map<String, String>>> sourceOverrideDependencies =
+            getSourceOverrideDependencies()
+
+        List<String> conflictMessages = new LinkedList<String>()
+
+        sourceOverrideDependencies.each { handler, deps ->
+            // Compare source override full dependencies to the current dependency
+            collectConflictsForProjectVsOverride(conflictMessages, resolvableDependencies, handler, deps)
+        }
+
+        // Compare source override full dependencies to each other
+        collectConflictsBetweenOverrides(resolvableDependencies.path, conflictMessages, sourceOverrideDependencies)
+
+        logOrThrowIfConflicts(conflictMessages, projectConfiguration)
+    }
+
+    @Override void buildStarted(Gradle gradle) { }
+
+    @Override void settingsEvaluated(Settings settings) { }
+
+    @Override void projectsLoaded(Gradle gradle) { }
+
+    @Override void projectsEvaluated(Gradle gradle) { }
+
+    @Override
+    void buildFinished(BuildResult buildResult) {
+        if (!unusedSourceOverrides.empty) {
+            project.logger.warn(
+                "Some source override definitions in ${project} did not match any of the direct or transitive " +
+                "dependencies of any configuration.  Please check that these source override dependency coordinates " +
+
+                "are correct: " + unusedSourceOverrides.join(",")
+            )
+        }
+        if (!project.sourceOverrides.empty && BuildHelper.buildFailedDueToVersionConflict(buildResult)) {
+//2345678901234567890123456789012345678901234567890123456789012345678901234567890 <-- 80-column ruler
+            project.logger.lifecycle(
+                """
+This project has source overrides, which can cause module version conflicts for
+more complicated reasons.  The source override mechanism copies dependency
+information from override projects and adds them as direct dependencies of the
+overridden module version.  So, when you run the 'dependencies' task to display
+dependency trees, any version conflicts ("group:name:version1 -> version2") may
+come from the source override projects.
+
+There are four possible causes of version conflicts when a project has source
+overrides.
+
+1. The conflict is not related to source overrides and is just caused by normal
+conflicts between versions of indirect dependencies.  You can resolve these as
+normal.
+
+2. The root build (the root project and/or its subprojects) has versions which
+conflict with one or more source override builds (the root project of a source
+override and/or its subprojects).  You can detect this because one of the
+conflicting versions will appear in the tree under a module with an override
+version ("SOURCE_..."), and the other will appear not under any override.  
+You can resolve this by changing the dependency version in the root build, or
+in the override build.  In the latter case it may be helpful to run the
+'dependencies' task separately in each conflicting source override directory.
+
+3. Similar to the previous case, two or more different source overrides
+builds (the root project of a source override and/or its subprojects) may have
+versions which conflict with each other, even though they don't conflict with
+dependencies from the root project.  You can detect this because each
+conflicting version will appear under a module with an override version
+("SOURCE_...").  Again, to resolve this, change the dependency version in one
+or more override builds.  It may be useful to run the 'dependencies' task
+separately in each source override directory.  
+
+4. Two or more source overrides may have been added for the same original
+module version ("group:name:version") but pointing to different locations on
+disk.  All overrides for the same original version must point to the same
+location.  (They may be specified as different relative paths but they must
+resolve to the same absolute location.)  You can detect this because the two
+versions involved in the conflict are both source override versions
+("SOURCE_...").  To resolve this, change all overrides for the same original
+module version to point to the same location.
+
+Remember that override projects can also contain further source overrides, so
+you may have to run the 'dependencies' task at multiple levels.
+"""
+//2345678901234567890123456789012345678901234567890123456789012345678901234567890 <-- 80-column ruler
+            )
+        }
+    }
+
+    private Configuration findProjectConfiguration(ResolvableDependencies resolvableDependencies) {
+        final String depsPath = resolvableDependencies.path
+        if (depsPath.startsWith(':')) {
+            return project.configurations.findByName(resolvableDependencies.name)
+        } else {
+            // This is a buildscript configuration, or maybe a copy or detached configuration.
+            return null
+        }
+    }
+
+    private void rethrowIfBeforeResolveHadException() {
+        if (beforeResolveException != null) {
+            // This exception is stored from earlier and thrown here.  Usually this is too deeply nested for
+            // Gradle to output useful information at the default logging level, so we also explicitly log the
+            // the nested exception.
+            final String message = "beforeResolve handler failed"
+            project.logger.error("${message}: ${beforeResolveException.toString()}", beforeResolveException)
+            throw new RuntimeException(message, beforeResolveException)
+        }
+    }
+
+    private void noteUsedSourceOverrides(ResolvableDependencies resolvableDependencies) {
+        resolvableDependencies.resolutionResult.allDependencies.each { DependencyResult result ->
+            if (result instanceof ResolvedDependencyResult) {
+                unusedSourceOverrides.remove(((ResolvedDependencyResult) result).selected.id.toString())
+            }
+        }
+    }
+
+    private void debugLogResolvedDependencies(ResolvableDependencies resolvableDependencies) {
+        if (project.logger.isDebugEnabled()) {
+            resolvableDependencies.resolutionResult.allDependencies.each { DependencyResult result ->
+                if (result instanceof ResolvedDependencyResult) {
+                    project.logger.debug(
+                        "  resolved ${result.requested} to ${((ResolvedDependencyResult) result).selected}"
+                    )
+                } else {
+                    project.logger.debug(
+                        "  UNRESOLVED ${result.requested}: ${(UnresolvedDependencyResult) result}"
+                    )
+                }
+            }
+        }
+    }
+
+    private Map<SourceOverrideHandler, Map<String, Map<String, String>>> getSourceOverrideDependencies() {
+        if (sourceOverrideDependencies == null) {
+            readSourceOverrideDependencies()
+        }
+        return sourceOverrideDependencies
+    }
+
+    private void readSourceOverrideDependencies() {
+        sourceOverrideDependencies =
+            new LinkedHashMap<SourceOverrideHandler, LinkedHashMap<String, LinkedHashMap<String,String>>>()
+
+        // Todo: Remove this method
+    }
+
+    private collectConflictsForProjectVsOverride(
+        List<String> conflictMessages,
+        ResolvableDependencies resolvableDependencies,
+        SourceOverrideHandler handler,
+        Map<String, Map<String, String>> deps
+    ) {
+        resolvableDependencies.resolutionResult.allModuleVersions { ResolvedComponentResult module ->
+            deps.each { configName, config ->
+                def moduleKey = "${module.id.group.toString()}:${module.id.name.toString()}"
+                if (config.containsKey(moduleKey)) {
+                    if (config.get(moduleKey) != module.id.version.toString()) {
+                        final String message = "For ${project} configuration ${resolvableDependencies.path}, " +
+                            "module '${module.id}' does not match the dependency " +
+                            "declared in source override '${handler.name}' configuration ${configName} " +
+                            "(${moduleKey}:${config.get(moduleKey)}); " +
+                            "you may have to declare a matching source override in the source project."
+                        conflictMessages << message
+                    }
+                }
+            }
+        }
+    }
+
+    private void collectConflictsBetweenOverrides(
+        String projectConfiguration,
+        List<String> conflictMessages,
+        Map<SourceOverrideHandler, Map<String, Map<String, String>>> sourceOverrideDependencies
+    ) {
+        conflictMessages.addAll(getConflictsBetweenOverrides(projectConfiguration, sourceOverrideDependencies))
+    }
+
+    private List<String> getConflictsBetweenOverrides(
+        String projectConfiguration,
+        Map<SourceOverrideHandler, Map<String, Map<String, String>>> sourceOverrideDependencies
+    ) {
+        if (conflictBetweenOverrideMessages == null) {
+            conflictBetweenOverrideMessages = new LinkedList<>()
+            calculateConflictsBetweenOverrides(
+                projectConfiguration, conflictBetweenOverrideMessages, sourceOverrideDependencies
+            )
+        }
+        return conflictBetweenOverrideMessages
+    }
+
+    private void calculateConflictsBetweenOverrides(
+        String projectConfiguration,
+        List<String> conflictMessages,
+        Map<SourceOverrideHandler, Map<String, Map<String, String>>> sourceOverrideDependencies
+    ) {
+        // The conflict check between different overrides is symmetrical, so we don't need to do it N^2 times,
+        // only half that.
+        Map<SourceOverrideHandler, Set<SourceOverrideHandler>> alreadyCompared =
+            new HashMap<>().withDefault { new HashSet<>() }
+        sourceOverrideDependencies.each {
+            SourceOverrideHandler handler,
+            Map<String, Map<String, String>> deps
+                ->
+                sourceOverrideDependencies.each {
+                    SourceOverrideHandler handler2,
+                    Map<String, Map<String, String>> deps2
+                        ->
+                        if (handler == handler2 || alreadyCompared[handler].contains(handler2)) {
+                            project.logger.lifecycle "Skipping ${handler.name} <-> ${handler2.name}"
+                            return
+                        }
+                        deps.each { configName, config ->
+                            deps2.each { configName2, config2 ->
+                                config.each { dep, version ->
+                                    if (config2.containsKey(dep)) {
+                                        project.logger.lifecycle "handler2 ${handler2.name} config ${config2} has ${dep}"
+                                        final String config2DepVersion = config2.get(dep)
+                                        if (config2DepVersion != version) {
+                                            project.logger.lifecycle "handler2 ${handler2.name} config ${config2} " +
+                                                 "has ${dep} at version ${config2DepVersion} but " +
+                                                 "handler(1) ${handler.name} config ${config} has version ${version}"
+                                        }
+                                    } else {
+                                        project.logger.lifecycle "handler2 ${handler2.name} config ${config2} " +
+                                             "does NOT have ${dep}"
+                                    }
+                                    if (config2.containsKey(dep) && config2.get(dep) != version) {
+                                        final String message = "For ${project} configuration ${projectConfiguration}, " +
+                                            "module in " +
+                                            "source override '${handler.name}' configuration ${configName} " +
+                                            "(${dep}:${version}) " +
+                                            "does not match module in " +
+                                            "source override '${handler2.name}' configuration ${configName} " +
+                                            "(${dep}:${config2.get(dep)}); " +
+                                            "you may have to declare a matching source override."
+                                        conflictMessages << message
+                                    }
+                                }
+                            }
+                        }
+                        alreadyCompared[handler].add(handler2)
+                        alreadyCompared[handler2].add(handler)
+                }
+        }
+    }
+
+    private void logOrThrowIfConflicts(
+        List<String> conflictMessages,
+        Configuration configuration
+    ) {
+        if (!conflictMessages.empty) {
+            conflictMessages = conflictMessages.sort().unique()
+
+            StringWriter stringWriter = new StringWriter()
+            stringWriter.withPrintWriter { pw ->
+                pw.println(
+                    "The module version for one or more source overrides does not match the version " +
+                        "for the same module in one or more places; please check the following messages."
+                )
+                for (message in conflictMessages) {
+                    pw.print("    ")
+                    pw.println(message)
+                }
+            }
+            String message = stringWriter.toString()
+
+            if (hasStrictResolutionStrategy(configuration)) {
+                throw new RuntimeException(message)
+            } else {
+                project.logger.warn(message)
+            }
+        }
+    }
+
+    private static boolean hasStrictResolutionStrategy(Configuration configuration) {
+        final ResolutionStrategy strategy = configuration.resolutionStrategy
+        final boolean hasStrictResolutionStrategy =
+            (strategy instanceof ResolutionStrategyInternal) &&
+                ((ResolutionStrategyInternal) strategy).conflictResolution.getClass().getSimpleName().equals("StrictConflictResolution")
+        return hasStrictResolutionStrategy
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/dependencies/SummariseAllDependenciesTask.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/dependencies/SummariseAllDependenciesTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,114 @@
+package holygradle.dependencies
+
+import holygradle.io.FileHelper
+import org.gradle.api.DefaultTask
+import org.gradle.api.artifacts.Configuration
+import org.gradle.api.artifacts.ModuleVersionIdentifier
+import org.gradle.api.artifacts.ResolvedDependency
+import org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor
+
+class SummariseAllDependenciesTask extends DefaultTask {
+    // Only public so it can be used in a closure.
+    public LinkedList<GenerateIvyDescriptor> ivyDescriptorTasks = new LinkedList()
+
+    public void initialize() {
+
+        DefaultTask summariseDependenciesTask = this
+
+        GenerateIvyDescriptor generateDescriptorTask
+        project.tasks.withType(GenerateIvyDescriptor).whenTaskAdded { GenerateIvyDescriptor descriptorTask ->
+            generateDescriptorTask = descriptorTask
+            ivyDescriptorTasks.add(generateDescriptorTask)
+            if (ivyDescriptorTasks.size() > 1) {
+                project.logger.warn(
+                        "WARNING: More than one Ivy file. This is not currently supported."
+                )
+            }
+            summariseDependenciesTask.dependsOn generateDescriptorTask
+        }
+
+        doLast {
+            if (ivyDescriptorTasks.size() > 1) {
+                throw new RuntimeException(
+                        "More than one Ivy file. This is not currently supported."
+                )
+            }
+            File file = new File(project.buildDir, "holygradle/flat-ivy.xml")
+            FileHelper.ensureMkdirs(file.parentFile, "for flat-ivy.xml used by source overrides")
+            file.createNewFile()
+
+            project.logger.info("Writing dependencies to ${file.canonicalPath}")
+
+            Map<ModuleVersionIdentifier, Map<String, Collection<String>>> dependenciesMap = buildDependencies()
+            XmlParser xml = new XmlParser()
+            Node root = xml.parse(generateDescriptorTask.destination)
+
+            Node dependenciesNode = root.dependencies.first() as Node
+            dependenciesNode.children().clear()
+            dependenciesMap.each { ModuleVersionIdentifier id, Map<String, Collection<String>> confMap ->
+                List<StringBuilder> allMappings = confMap.collect { String fromConf, Collection<String> toConfs ->
+                    new StringBuilder() << fromConf << "->" << joinAsBuilder(toConfs, ',')
+                }
+                StringBuilder conf = joinAsBuilder(allMappings, ";")
+
+                // Make the dependency non-transitive because we want to make sure that another Holy Gradle build using
+                // this file only picks up exactly the set of transitive dependencies we have calculated and flattened,
+                // using the repositories in the this build.  Without that flag, the other build might resolve some
+                // transitive dependencies from a different repo (in that other build script) to a newer version.
+                dependenciesNode.appendNode('dependency', [
+                    org: id.group,
+                    name: id.name,
+                    version: id.version,
+                    conf: conf,
+                    transitive: false
+                ])
+            }
+
+            file.withWriter {
+                new XmlNodePrinter(new PrintWriter(it)).print(root)
+            }
+        }
+    }
+
+    // Only public so it can be called from a lambda
+    public StringBuilder joinAsBuilder(Collection<CharSequence> items, String separator) {
+        StringBuilder b = new StringBuilder()
+        boolean first = true
+        items.each {
+            if (first) {
+                first = false
+            } else {
+                b.append(separator)
+            }
+            b.append(it)
+        }
+        return b
+    }
+
+    public Map<ModuleVersionIdentifier, Map<String, Collection<String>>> buildDependencies() {
+        Map<ModuleVersionIdentifier, Map<String, Collection<String>>> dependencies =
+            [:].withDefault { [:].withDefault { [] }}
+
+        project.configurations.each { Configuration c ->
+            flattenModules(c.resolvedConfiguration.firstLevelModuleDependencies).each { ResolvedDependency d ->
+                dependencies[d.module.id][c.name] << d.configuration
+            }
+        }
+
+        return dependencies
+    }
+
+    public Set<ResolvedDependency> flattenModules(Set<ResolvedDependency> input) {
+        // Non-recursive breadth-first traversal (though we don't really care about the traversal order).
+        LinkedHashSet<ResolvedDependency> collected = new LinkedHashSet<>()
+        Queue<ResolvedDependency> toVisit = new LinkedList<>()
+        toVisit.addAll(input)
+        while (!toVisit.empty) {
+            ResolvedDependency dep = toVisit.remove()
+            collected.add(dep)
+            toVisit.addAll(dep.children)
+        }
+
+        return collected
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/links/LinkTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/links/LinkTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/links/LinkTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -6,6 +6,22 @@
 class LinkTask extends DefaultTask {
     private Map<File, File> entries = [:]
 
+    /**
+     * Throws an exception if {@code link} exists and is not a symlink.
+     * @param link The potential link to check.
+     * @param target The intended target for the link (for use in error message).
+     */
+    public static void checkIsLinkOrMissing(File link, File target) {
+        final boolean linkExists = link.exists()
+        final boolean isLink = Link.isLink(link)
+        if (linkExists && !isLink) {
+            throw new RuntimeException(
+                    "Could not create a link from '${link.path}' to '${target.path}' " +
+                            "because the former already exists and is not a link."
+            )
+        }
+    }
+
     public void initialize() {
         Map<File, File> localEntries = entries // capture private for closure
         doFirst {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/links/LinksToCacheTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/links/LinksToCacheTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/links/LinksToCacheTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -14,13 +14,9 @@
  */
 class LinksToCacheTask extends DefaultTask {
     private boolean initialized = false
-    // The versions in this set have been considered for being added to the list of versions to make links for, but
-    // may not have been added to the list.  If a version is to be added but is already in this list, we don't need to
-    // consider it or its ancestors again.
-    private final Set<ModuleVersionIdentifier> versionsSeen = new HashSet<ModuleVersionIdentifier>()
-    // This list will be processed in order.
-    private final LinkedList<UnpackModuleVersion> versionList = new LinkedList<UnpackModuleVersion>()
     private Mode mode
+    // A map from the location of a link to the target location for that link.
+    private final Map<File, File> links = new HashMap<>()
 
     /**
      * Specifies what this task should do with each link it has to consider.
@@ -37,19 +33,18 @@
             throw new IllegalStateException("LinksToCacheTask is already initialized")
         }
         this.mode = mode
-        LinkedList<UnpackModuleVersion> localVersionList = versionList // capture private for closure
+        Map<File, File> localLinks = links // capture private for closure
         doLast {
-            localVersionList.each { UnpackModuleVersion version ->
-                File linkDir = version.targetPathInWorkspace
-                File targetDir = version.unpackDir
+            localLinks.each { File linkDir, File targetDir ->
+                LinkTask.checkIsLinkOrMissing(linkDir, targetDir)
 
                 switch (mode) {
                     case Mode.BUILD:
                         Link.rebuild(linkDir, targetDir)
-                        break;
+                        break
                     case Mode.CLEAN:
                         Link.delete(linkDir)
-                        break;
+                        break
                     default:
                         throw new IllegalStateException("Unknown LinksToCacheTask mode ${mode}")
                 }
@@ -65,9 +60,11 @@
      */
     public void addUnpackModuleVersions(PackedDependenciesStateSource source) {
         doFirst {
-            source.allUnpackModules.each { UnpackModule module ->
-                module.versions.values().each { UnpackModuleVersion versionInfo ->
-                    addUnpackModuleVersionWithAncestors(versionInfo)
+            source.allUnpackModules.values().each { Collection<UnpackModule> modules ->
+                modules.each { UnpackModule module ->
+                    module.versions.values().each { UnpackModuleVersion version ->
+                        addUnpackModuleVersion(version)
+                    }
                 }
             }
         }
@@ -77,48 +74,14 @@
      * Adds {@code version} to the list of versions for which this task will create links.  If the version is
      * already present, this method does nothing.
      */
-    public void addUnpackModuleVersionWithAncestors(UnpackModuleVersion version) {
-        logger.debug "LinksToCacheTask#addUnpackModuleVersionWithAncestors: adding ${version}"
-        if (!maybeAddSingleUnpackModuleVersion(version)) {
-            return
-        }
-        // Now we recursively travel up the parent chain, re-adding each parent.  This means that each ancestor will
-        // appear before its descendants, which ensures that links exist before any attempts to create links
-        // *inside* those linked folders.  We remove the parent first, in case it is already in the list, so that we
-        // don't process it twice.
-        final UnpackModuleVersion parent = version.parent
-        if (parent != null) {
-            removeUnpackModuleVersionIfPresent(parent)
-            addUnpackModuleVersionWithAncestors(parent)
-        }
-    }
-
-    /**
-     * Adds {@code version} to the list of versions for which this task will create links, unless the version has
-     * already been seen, or it doesn't want a link.
-     * @return true if the version hasn't been seen before, otherwise false
-     */
-    private boolean maybeAddSingleUnpackModuleVersion(UnpackModuleVersion version) {
-        final boolean versionNotSeenYet = versionsSeen.add(version.moduleVersion)
-        if (versionNotSeenYet) {
-            if (version.shouldCreateLinkToCache()) {
-                versionList.addFirst(version)
-            } else {
-                logger.debug "LinksToCacheTask#maybeAddSingleUnpackModuleVersion: not creating link for ${version.moduleVersion}"
-            }
+    public void addUnpackModuleVersion(UnpackModuleVersion version) {
+        if (version.shouldCreateLinkToCache()) {
+            logger.debug "LinksToCacheTask#addUnpackModuleVersion: adding ${version}"
+            final File linkDir = version.getTargetPathInWorkspace()
+            final File targetDir = version.getLinkDir()
+            links[linkDir] = targetDir
         } else {
-            logger.debug "LinksToCacheTask#maybeAddSingleUnpackModuleVersion: skipping already-present ${version.moduleVersion}"
-        }
-        return versionNotSeenYet
-    }
-
-    /**
-     * Removes {@code version} from the list of versions for which this task will create links.  If the version is
-     * NOT already present, this method does nothing.
-     */
-    private void removeUnpackModuleVersionIfPresent(UnpackModuleVersion version) {
-        if (versionsSeen.remove(version.moduleVersion)) {
-            versionList.remove(version)
+            logger.debug "LinksToCacheTask#addUnpackModuleVersion: skipping ${version}"
         }
     }
 
@@ -128,7 +91,7 @@
      * injecting a spy version, but that seems unnecessary effort for now.)
      * @return
      */
-    public Collection<UnpackModuleVersion> getOrderedVersions() {
-        return versionList.clone() as Collection<UnpackModuleVersion>
+    public Map<File, File> getLinks() {
+        return links.asImmutable()
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactBuildScriptHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactBuildScriptHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactBuildScriptHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -6,6 +6,7 @@
 import holygradle.io.FileHelper
 import holygradle.links.LinkHandler
 import holygradle.publishing.RepublishHandler
+import holygradle.scm.DummySourceControl
 import holygradle.scm.SourceControlRepository
 import holygradle.source_dependencies.SourceDependencyHandler
 import org.gradle.api.Project
@@ -275,8 +276,8 @@
                 // extension from the sourceDep.project, because that project itself may not have the intrepid plugin
                 // applied, in which case it won't have that extension.  We need to create the SourceControlRepository
                 // object, instead of just using the SourceDependencyHandler, to create the actual revision.
-                SourceControlRepository repo = SourceControlRepositories.create(project.rootProject, sourceDep.absolutePath)
-                if (repo != null) {
+                SourceControlRepository repo = SourceControlRepositories.create(sourceDep)
+                if (!(repo instanceof DummySourceControl)) {
                     buildScript.append(" "*4)
                     buildScript.append("\"")
                     buildScript.append(sourceDep.getFullTargetPathRelativeToRootProject()) 
@@ -339,12 +340,19 @@
             Map<String, SourceDependencyHandler> sourceDeps = collectSourceDependencies(project, false, packedDependencies.keySet())
             for (sourceDepName in sourceDeps.keySet()) {
                 SourceDependencyHandler sourceDep = sourceDeps[sourceDepName]
-                writePackedDependency(
-                    buildScript,
-                    sourceDep.getFullTargetPathRelativeToRootProject(),
-                    sourceDep.getDependencyCoordinate(),
-                    packedDependencies[sourceDepName]
-                )
+                final String dependencyCoordinate = sourceDep.getDependencyCoordinate()
+                // The dependency coordinate may be null, if there are no configuration mappings to this source
+                // dependency and it is not a Gradle project -- that is, if it's just pulled in as arbitrary source code
+                // rather than as another project in a multi-project build.  In that case, we shouldn't and can't
+                // state a dependency on it, because it's not published.
+                if (dependencyCoordinate != null) {
+                    writePackedDependency(
+                        buildScript,
+                        sourceDep.getFullTargetPathRelativeToRootProject(),
+                        dependencyCoordinate,
+                        packedDependencies[sourceDepName]
+                    )
+                }
             }
             missingPackedDepNames.removeAll(sourceDeps.keySet())
             Map<String, PackedDependencyHandler> packedDeps = collectPackedDependencies(project, packedDependencies.keySet())
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/packaging/PackageArtifactHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -6,6 +6,7 @@
 import holygradle.io.FileHelper
 import holygradle.publishing.PublishPackagesExtension
 import holygradle.publishing.RepublishHandler
+import holygradle.scm.DummySourceControl
 import holygradle.scm.SourceControlRepositories
 import holygradle.scm.SourceControlRepository
 import holygradle.source_dependencies.SourceDependencyHandler
@@ -50,6 +51,7 @@
                 packageArtifactHandlers.findByName("buildScript") ?: packageArtifactHandlers.create("buildScript")
         buildScriptHandler.include project.buildFile.name
         buildScriptHandler.include project.gradle.startParameter.settingsFile?.name ?: Settings.DEFAULT_SETTINGS_FILE
+        buildScriptHandler.include Project.GRADLE_PROPERTIES
         buildScriptHandler.configuration = "buildScript"
         packageArtifactHandlers.all { packArt ->
             Task packageTask = packArt.definePackageTask(createPublishNotesTask)
@@ -162,26 +164,22 @@
         SourceDependencyHandler handler = null
     ) {
         Project project = createPublishNotesTask.project
-        // For the originating project we will be passed a null handler (because we're looking at it as the root which
-        // has source dependencies, not a source dependency itself), in which case we want that originating project,
-        // which we can get from the task.
-        File sourceRepoDir
-        if (handler == null) {
-            sourceRepoDir = project.projectDir
-        } else {
-            // We don't use handler..getSourceDependencyProject(...).projectDir, because source dependencies don't have
-            // to contain a Gradle project.
-            sourceRepoDir = handler.destinationDir
-        }
 
         // We create a new SourceControlRepository instead of trying to get the "sourceControl" extension from the
         // project, because we don't want a DummySourceControl if there's no SCM info here.  Also, some source
         // dependencies may not have a project.
-        SourceControlRepository sourceRepo = SourceControlRepositories.create(
-            project.rootProject,
-            sourceRepoDir
-        )
-        if (sourceRepo != null) {
+        //
+        // For the originating project we will be passed a null handler (because we're looking at it as the root which
+        // has source dependencies, not a source dependency itself), in which case we want that originating project,
+        // which we have from the task.
+        SourceControlRepository sourceRepo
+        if (handler == null) {
+            sourceRepo = SourceControlRepositories.create(project)
+        } else {
+            sourceRepo = SourceControlRepositories.create(handler)
+        }
+
+        if (!(sourceRepo instanceof DummySourceControl)) {
             File sourceDepInfoDir
             if (handler == null) {
                 // We're adding info for the originating project, so put it at top-level: baseDir = "build_info"
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/publishing/CheckPublishedDependenciesTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/publishing/CheckPublishedDependenciesTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/publishing/CheckPublishedDependenciesTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,6 +2,7 @@
 
 import holygradle.ArtifactoryHelper
 import holygradle.unpacking.PackedDependenciesStateSource
+import holygradle.unpacking.UnpackModule
 import holygradle.unpacking.UnpackModuleVersion
 import org.gradle.api.DefaultTask
 import org.gradle.api.artifacts.repositories.PasswordCredentials
@@ -18,22 +19,28 @@
                 repoCredentials.getUsername(),
                 repoCredentials.getPassword()
             )
-            Map<String, Boolean> modules = [:]
-            packedDependenciesStateSource.allUnpackModules.each { module ->
-                module.versions.each { String versionStr, UnpackModuleVersion versionInfo ->
-                    // Add a trailing slash because, if we request without one, Artifactory will just respond with a
-                    // "302 Found" redirect whcih adds a trailing slash; so this saves us time.
-                    String coord = versionInfo.getFullCoordinate().replace(":", "/") + '/'
-                    modules[versionInfo.getFullCoordinate()] = helper.artifactExists(coord)
+            // Build a set of all URLs first, because the same module might appear more than once, and we don't want to
+            // waste time making the same HTTP request more than once.
+            Set<String> allModuleUrls = new HashSet()
+            packedDependenciesStateSource.allUnpackModules.values().each { Collection<UnpackModule> modules ->
+                modules.each { module ->
+                    module.versions.each { String versionStr, UnpackModuleVersion versionInfo ->
+                        // Add a trailing slash because, if we request without one, Artifactory will just respond with a
+                        // "302 Found" redirect which adds a trailing slash; so this saves us time.
+                        allModuleUrls.add(versionInfo.getFullCoordinate().replace(":", "/") + '/')
+                    }
                 }
             }
+            Map<String, Boolean> moduleAvailability = allModuleUrls.collectEntries {
+                [it, helper.artifactExists(it)]
+            }
             int tab = 0
-            modules.each { String moduleVersion, Boolean available ->
+            moduleAvailability.each { String moduleVersion, Boolean available ->
                 int thisTab = (moduleVersion.length() + 8)
                 tab = (thisTab > tab) ? thisTab : tab
             }
             logger.lifecycle "The following artifacts are available at '${repoUrl}':"
-            modules.each { String moduleVersion, Boolean available ->
+            moduleAvailability.each { String moduleVersion, Boolean available ->
                 String line = "   ${moduleVersion}" + (" "*(tab-moduleVersion.length()))
                 if (available) {
                     line += "[OK]"
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/publishing/DefaultPublishPackagesExtension.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/publishing/DefaultPublishPackagesExtension.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/publishing/DefaultPublishPackagesExtension.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,6 +1,8 @@
 package holygradle.publishing
 
 import holygradle.dependencies.PackedDependencyHandler
+import holygradle.dependencies.SourceOverrideHandler
+import holygradle.source_dependencies.SourceDependencyHandler
 import holygradle.packaging.PackageArtifactHandler
 import holygradle.unpacking.PackedDependenciesStateSource
 import org.gradle.api.*
@@ -24,7 +26,8 @@
 import org.gradle.util.ConfigureUtil
 
 public class DefaultPublishPackagesExtension implements PublishPackagesExtension {
-    private final Project project
+    // Only public so it can be used in a closure.
+    public final Project project
     private boolean createDefaultPublication = true
     private boolean publishPrivateConfigurations = true
     private final LinkedHashSet<String> originalConfigurationOrder = new LinkedHashSet()
@@ -153,7 +156,7 @@
         Task generateIvyModuleDescriptorTask,
         Project project
     ) {
-        project.tasks.withType(GenerateIvyDescriptor).whenTaskAdded { GenerateIvyDescriptor descriptorTask ->
+        project.tasks.withType(GenerateIvyDescriptor).all { GenerateIvyDescriptor descriptorTask ->
             generateIvyModuleDescriptorTask.dependsOn descriptorTask
             descriptorTask.dependsOn beforeGenerateDescriptorTask
 
@@ -163,6 +166,10 @@
                 putConfigurationsInOriginalOrder(descriptorTask.descriptor)
                 freezeDynamicDependencyVersions(project, descriptorTask.descriptor)
                 collapseMultipleConfigurationDependencies(descriptorTask.descriptor)
+
+                if (project.hasProperty("recordAbsolutePaths")) {
+                    addDependencySourceTags(project, sourceDependencies)
+                }
             }
 
             // We call this here because it uses doFirst, and we need this to happen after
@@ -314,6 +321,10 @@
                     }
                 }
                 confNodes.values().each { Node confNode ->
+                    def nodeDescription = project.configurations[confNode.attribute("name").toString()].description
+                    if (nodeDescription) {
+                        confNode.@description = nodeDescription
+                    }
                     confsNode.append(confNode)
                 }
             }
@@ -372,6 +383,7 @@
                     String coord = "${depNode.@org}:${depNode.@name}:${depNode.@rev}"
                     configsByCoord[coord] << ((String)depNode.@conf)
                 }
+                int depsCount = depsNode.children.size()
                 depsNode.children().clear()
                 configsByCoord.each { String coord, List<String> configs ->
                     List<String> c = coord.split(":")
@@ -385,6 +397,25 @@
                         "conf": sortedConfigs.join(";")
                     ])
                 }
+                depsCount = depsNode.children.size()
+            }
+        }
+    }
+
+    public void addDependencySourceTags(Project project, Collection<SourceDependencyHandler> sourceDependencies) {
+        // IvyModuleDescriptor#withXml doc says Gradle converts Closure to Action<>, so suppress IntelliJ IDEA check
+        //noinspection GroovyAssignabilityCheck
+        mainIvyDescriptor.withXml { xml ->
+            xml.asNode()."@xmlns:${SourceOverrideHandler.HOLY_GRADLE_NAMESPACE_NAME}" = SourceOverrideHandler.HOLY_GRADLE_NAMESPACE
+            xml.asNode().dependencies.dependency.each { depNode ->
+                // If the dependency is a source dependency, get its relative path from the
+                // gradle script's sourceDependencyHandler
+                SourceDependencyHandler sourceDep = findSourceDependencyForDependencyNode(sourceDependencies, depNode)
+
+                if (sourceDep != null) {
+                    project.logger.info "Adding sourcePath attribute to source dep node: ${depNode.@org}:${depNode.@name}:${depNode.@rev} path=${sourceDep.getFullTargetPath()}"
+                    depNode."@${SourceOverrideHandler.HOLY_GRADLE_NAMESPACE_NAME}:sourcePath" = sourceDep.getAbsolutePath().getCanonicalPath().toString()
+                }
             }
         }
     }
@@ -392,16 +423,18 @@
     public void addConfigurationDependenciesToDefaultPublication(GenerateIvyDescriptor descriptorTask) {
         descriptorTask.descriptor.withXml { xml ->
             Node depsNode = xml.asNode().dependencies.find() as Node
+            int depsCount = depsNode.children.size()
             descriptorTask.project.configurations.each((Closure) { Configuration conf ->
                 conf.dependencies.withType(ModuleDependency).each { ModuleDependency dep ->
                     depsNode.appendNode("dependency", [
                         "org" : dep.group,
                         "name": dep.name,
                         "rev" : dep.version,
-                        "conf": "${conf.name}->${dep.configuration}"
+                        "conf": "${conf.name}->${dep.targetConfiguration}"
                     ])
                 }
             })
+            depsCount = depsNode.children.size()
         }
     }
 
@@ -416,4 +449,22 @@
             }
         }
     }
+
+    // Only public because it needs to be used from wtihin a lambda.
+    public SourceDependencyHandler findSourceDependencyForDependencyNode(
+        Collection<SourceDependencyHandler> sourceDependencies,
+        depNode
+    ) {
+        return sourceDependencies.find {
+            ModuleVersionIdentifier dependencyModule = it.getDependencyId()
+            if (dependencyModule == null) {
+                project.logger.debug "Ignoring source dependency on ${it.targetName} because there are no " +
+                    "configuration mappings"
+                return false
+            }
+            return dependencyModule.getGroup() == depNode.@org &&
+                dependencyModule.getName() == depNode.@name &&
+                dependencyModule.getVersion() == depNode.@rev
+        }
+    }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/Command.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/Command.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/Command.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,6 +1,6 @@
 package holygradle.scm
 
 public interface Command {
-   String execute(Closure configureExecSpec);
-   String execute(Closure configureExecSpec, Closure throwOnError);
+   String execute(Closure configureExecSpec)
+   String execute(Closure configureExecSpec, Closure throwForExitValue)
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/CommandLine.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/CommandLine.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/CommandLine.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,34 +1,28 @@
 package holygradle.scm
 
 import holygradle.process.ExecHelper
-import org.gradle.api.Task
-import org.gradle.api.tasks.TaskState
+import org.gradle.api.logging.Logger
 import org.gradle.process.ExecResult
 import org.gradle.process.ExecSpec
 
 class CommandLine implements Command {
     private final String hgPath
     private final Closure<ExecResult> exec
+    private final Logger logger
 
-    CommandLine(
-        String hgPath,
-        Closure<ExecResult> exec
-    ) {
+    CommandLine(Logger logger, String hgPath, Closure<ExecResult> exec) {
+        this.logger = logger
         this.hgPath = hgPath
         this.exec = exec
     }
 
     @Override
-    String execute(Closure configureExecSpec, Closure throwOnError) {
+    String execute(Closure configureExecSpec, Closure throwForExitValue) {
         String localHgPath = hgPath
-        ExecHelper.executeAndReturnResultAsString(
-            exec,
-            { ExecSpec spec ->
-                spec.executable localHgPath
-                configureExecSpec(spec)
-            },
-            throwOnError
-        )
+        ExecHelper.executeAndReturnResultAsString(logger, exec, throwForExitValue) { ExecSpec spec ->
+            spec.executable localHgPath
+            configureExecSpec(spec)
+        }
     }
 
     @Override
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/DummySourceControl.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/DummySourceControl.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/DummySourceControl.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,13 +1,21 @@
 package holygradle.scm
 
 class DummySourceControl implements SourceControlRepository {
+    @Override
     public File getLocalDir() { null }
-    
+
+    @Override
     public String getProtocol() { "n/a" }
-    
+
+    @Override
     public String getUrl() { null }
-    
+
+    @Override
     public String getRevision() { null }
-    
+
+    @Override
     public boolean hasLocalChanges() { false }
+
+    @Override
+    public boolean ignoresFile(File file) { false }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/GitDependency.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/GitDependency.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/GitDependency.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,25 +1,20 @@
 package holygradle.scm
 
-import holygradle.buildscript.BuildScriptDependencies
 import holygradle.custom_gradle.plugin_apis.CredentialSource
 import holygradle.source_dependencies.SourceDependency
 import holygradle.source_dependencies.SourceDependencyHandler
 import org.gradle.api.Project
-import org.gradle.process.ExecResult
 import org.gradle.process.ExecSpec
 
 class GitDependency extends SourceDependency {
-    private final BuildScriptDependencies buildScriptDependencies
     private final Command gitCommand
 
     public GitDependency(
         Project project,
         SourceDependencyHandler sourceDependency,
-        BuildScriptDependencies buildScriptDependencies,
         Command gitCommand
     ) {
         super(project, sourceDependency)
-        this.buildScriptDependencies = buildScriptDependencies
         this.gitCommand = gitCommand
     }
 
@@ -28,38 +23,15 @@
         "Retrieves a Git Clone for '${sourceDependency.name}' into your workspace."
     }
 
-    private void cacheCredentials(String username, String password, String repoUrl) {
-        if (!credentialHelperIsConfigured()) {
-            // Enable Windows Credential Manager support
-            ExecResult execResult = project.exec { ExecSpec spec ->
-                spec.setIgnoreExitValue true
-                spec.commandLine "git config credential.helper wincred"
-            }
-            execResult.assertNormalExitValue()
-        }
-
-
-        URL parsedUrl = new URL(repoUrl)
-        String repoScheme = parsedUrl.getProtocol()
-        String repoHost = parsedUrl.getHost()
-        String credentialStorePath = buildScriptDependencies.getPath("credential-store").path
-        // println "${credentialStorePath} ${credUrl} ${username} <password>"
-        ExecResult execResult = project.exec { ExecSpec spec ->
-            spec.setIgnoreExitValue true
-            spec.commandLine credentialStorePath, "git://${repoScheme}://${username}@${repoHost}", username, password
-        }
-        if (execResult.getExitValue() == -1073741515) {
-            println "-"*80
-            println "Failed to cache Git credentials. This is probably because you don't have the " +
-                    "Visual C++ 2010 Redistributable installed on your machine. Please download and " +
-                    "install the x86 version before continuing. Here's the link: "
-            println "    http://www.microsoft.com/download/en/details.aspx?id=5555"
-            println "-"*80
-        }
-        execResult.assertNormalExitValue()
+    private void cacheCredentials(CredentialSource credentialSource, String credentialBasis, String repoUrl) {
+        final URL parsedUrl = new URL(repoUrl)
+        final String repoScheme = parsedUrl.getProtocol()
+        final String repoHost = parsedUrl.getHost()
+        final String credentialName = "git:${repoScheme}://${repoHost}"
+        ScmHelper.storeCredential(project, credentialSource, credentialName, credentialBasis)
     }
 
-    private boolean TryCheckout(String repoUrl, File destinationDir, String repoBranch) {
+    private boolean tryCheckout(String repoUrl, File destinationDir, String repoBranch) {
         Collection<String> args = ["clone"]
         if (repoBranch != null) {
             args.add("--branch")
@@ -69,13 +41,17 @@
         args.add(repoUrl)
         args.add(destinationDir.path)
 
+        project.logger.debug "tryCheckout: checking out with command line ${args}."
+
         try {
             gitCommand.execute { ExecSpec spec ->
                 spec.workingDir = project.projectDir
                 spec.args args
             }
-        } catch ( RuntimeException ex ) {
-            println(ex.message)
+        } catch (RuntimeException ex) {
+            project.logger.error "Checkout of ${repoUrl} branch ${repoBranch} failed: ${ex.message}. " +
+                 "Full exception is recorded at debug logging level."
+            project.logger.debug("Checkout of ${repoUrl} branch ${repoBranch} failed", ex)
             return false
         }
         return true
@@ -87,42 +63,74 @@
     }
 
     @Override
-    protected boolean DoCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
+    protected boolean doCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
+        // Git on Windows has at least three different credential managers which integrate with the Windows Credential
+        // Manager: wincred, winstore (https://gitcredentialstore.codeplex.com/), and manager
+        // (https://github.com/Microsoft/Git-Credential-Manager-for-Windows).  Of these, both winstore and manager will
+        // by default pop up a dialog to prompt for credentials.  In all versions of winstore and some versions of
+        // manager this dialog can't be disabled, which would be bad on an auto-build machine.  There's no way to just
+        // ask whether credentials are available without prompting for them so, to avoid popping up a dialog, which
+        // never times out, on autobuild machines, and thereby hanging a build, we just pre-cache credendtials for the
+        // URL, even though they might not be needed.  We could handle wincred specially, only caching credentials if it
+        // fails, but I'd rather keep things consistent.
+        //
+        // I tried out checking in advance whether authentication is needed by doing an initial direct HTTP GET for
+        // "${sourceUrl}/info/refs?service=git-receive-pack", as described in
+        // https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols and https://gist.github.com/schacon/6092633.
+        // If a repo requires authentication the response should be 401, otherwise 200.  This seemed to work fine for
+        // GitLab and GutHub, but not for BitBucket: the latter would sometimes return 401 for a public repo, and then
+        // later requests might start to return 200 for no apparent reason.  Also, the Git HTTP protocol has already
+        // changed once (from "dumb" to "smart") and so might change again, and the aforementioned servers had varied
+        // responses to requests using the "dumb" protocol.  Therefore I decided to keep it simple and consistent, and
+        // just always pre-cache credentials.
 
-        boolean result = TryCheckout(repoUrl, destinationDir, repoBranch)
+        final CredentialSource myCredentialsExtension = project.extensions.findByName("my") as CredentialSource
+        final boolean credentialHelperIsConfigured = getCredentialHelperIsConfigured()
+        boolean repoSupportsAuthentication = ScmHelper.repoSupportsAuthentication(repoUrl)
+        if (repoSupportsAuthentication) {
+            if (myCredentialsExtension != null) {
+                if (credentialHelperIsConfigured) {
+                    project.logger.info "  Pre-caching credentials for Git from 'my-credentials' plugin..."
+                    cacheCredentials(myCredentialsExtension, sourceDependency.credentialBasis, repoUrl)
+                } else {
+                    project.logger.info "  Not pre-caching credentials because the Git credential.helper is not configured."
+                }
+            } else {
+                project.logger.info "  Not pre-caching credentials because the 'my-credentials' plugin is not applied."
+            }
+        } else {
+            project.logger.info "  Not pre-caching credentials because the repo URL is not HTTP(S): ${repoUrl}."
+        }
+
+        boolean result = tryCheckout(repoUrl, destinationDir, repoBranch)
 
         if (!result) {
             deleteEmptyDir(destinationDir)
-            CredentialSource myCredentialsExtension = project.extensions.findByName("my") as CredentialSource
-            if (myCredentialsExtension != null) {
-                println "  Authentication failed. Trying credentials from 'my-credentials' plugin..."
-                cacheCredentials(myCredentialsExtension.username, myCredentialsExtension.password, repoUrl)
-                println "  Cached Mercurial credentials. Trying again..."
-                result = TryCheckout(repoUrl, destinationDir, repoBranch)
-                if (!result) {
-                    deleteEmptyDir(destinationDir)
-
-                    if (credentialHelperIsConfigured()) {
-                        throw new RuntimeException(
-                                "Failed to clone ${repoUrl} even after pre-caching credentials. " +
-                                        "The mercurial_keyring IS configured. If your password changed recently, " +
-                                        "try running 'credential-store.exe' which should be in the root of your workspace, " +
-                                        "then try again."
-                        )
-                    } else {
-                        throw new RuntimeException(
-                                "Failed to clone ${repoUrl}. The mercurial_keyring is NOT configured. " +
-                                        "Please configure it and try again."
-                        )
-                    }
-                }
-            } else {
+            if (!repoSupportsAuthentication) {
                 throw new RuntimeException(
-                        "Failed to clone ${repoUrl}.  Cannot re-try with authentication " +
-                                "because the 'my-credentials' plugin is not applied. " +
-                                "Please apply the 'my-credentials' plugin and try again."
+                    "Failed to clone ${repoUrl}.  Could not try with authentication " +
+                    "because repo URL is not HTTP(S): ${repoUrl}."
+                )
+            }
+            if (myCredentialsExtension == null) {
+                throw new RuntimeException(
+                    "Failed to clone ${repoUrl}.  Could not try with authentication " +
+                    "because the 'my-credentials' plugin is not applied. " +
+                    "Please apply the 'my-credentials' plugin and try again."
                 )
             }
+            if (credentialHelperIsConfigured) {
+                throw new RuntimeException(
+                    "Failed to clone ${repoUrl} even after caching credentials. " +
+                    "The Git credential.helper IS configured. If your password changed recently, " +
+                    "try running 'credential-store.exe' which should be in the root of your workspace, then try again."
+                )
+            }
+            throw new RuntimeException(
+                "Failed to clone ${repoUrl}. Cannot try with authentication " +
+                "because the Git credential.helper is NOT configured. " +
+                "Please configure it and try again."
+            )
         }
 
         // Update to a specific revision if necessary.
@@ -136,11 +144,9 @@
         result
     }
 
-    private boolean credentialHelperIsConfigured() {
-        return gitCommand.execute { ExecSpec spec ->
-            spec.args "config --get credential.helper"
-        }.readLines().any {
-            it.startsWith("wincred")
-        }
+    private boolean getCredentialHelperIsConfigured() {
+        ScmHelper.getGitConfigValue(gitCommand, project.projectDir, "credential.helper")
+            .readLines().collect { it.trim() }.any { !it.isEmpty() }
     }
+
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/GitRepository.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/GitRepository.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/GitRepository.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,17 +2,13 @@
 
 import org.gradle.process.ExecSpec
 
-class GitRepository implements SourceControlRepository {
-    private final File workingCopyDir
-    private final Command gitCommand
+import java.nio.file.Files
 
-    public GitRepository(Command gitCommand, File workingCopyDir) {
-        this.gitCommand = gitCommand
-        this.workingCopyDir = workingCopyDir
-    }
+class GitRepository extends SourceControlRepositoryBase {
+    public static SourceControlType TYPE = new Type()
 
-    public File getLocalDir() {
-        workingCopyDir.absoluteFile
+    public GitRepository(Command scmCommand, File workingCopyDir) {
+        super(scmCommand, workingCopyDir)
     }
 
     public String getProtocol() {
@@ -21,24 +17,12 @@
 
     public String getUrl() {
         // May need to strip "username[:password]@" from URL.
-        File localWorkingCopyDir = workingCopyDir // capture private for closure
-        String command_result = gitCommand.execute({ ExecSpec spec ->
-            spec.workingDir = localWorkingCopyDir
-            spec.args(
-                    "config",
-                    "--get",
-                    "remote.origin.url"
-            )
-        }, {int error_code ->
-            // Error code 1 means the section or key is invalid, probably just no remote set, so don't throw.
-            return (error_code != 1)
-        })
-        return command_result
+        return ScmHelper.getGitConfigValue(scmCommand, workingCopyDir, "remote.origin.url")
     }
 
     public String getRevision() {
         File localWorkingCopyDir = workingCopyDir // capture private for closure
-        return gitCommand.execute { ExecSpec spec ->
+        return scmCommand.execute { ExecSpec spec ->
             spec.workingDir = localWorkingCopyDir
             spec.args(
                 "rev-parse", // Execute the "rev-parse" command,
@@ -50,10 +34,39 @@
     public boolean hasLocalChanges() {
         // Execute git status with added, removed or modified files
         File localWorkingCopyDir = workingCopyDir // capture private for closure
-        String changes = gitCommand.execute { ExecSpec spec ->
+        String changes = scmCommand.execute { ExecSpec spec ->
             spec.workingDir = localWorkingCopyDir
             spec.args "status", "--porcelain", "--untracked-files=no"
         }
         changes.trim().length() > 0
     }
+
+    protected boolean ignoresFileInternal(File file) {
+        int exitValue = 0
+        scmCommand.execute({ ExecSpec spec ->
+            spec.workingDir = workingCopyDir
+            spec.args "check-ignore", "-q", file.absolutePath
+        }, {
+            exitValue = it
+            return (it != 0 && it != 1) // 0 = is ignored, 1 = is NOT ignored, 128 (or other) = error
+        })
+        return (exitValue == 0)
+    }
+
+    private static class Type implements SourceControlType {
+        @Override
+        String getStateDirName() {
+            return ".git"
+        }
+
+        @Override
+        String getExecutableName() {
+            return "git"
+        }
+
+        @Override
+        Class<SourceControlRepository> getRepositoryClass() {
+            return GitRepository.class
+        }
+    }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/HgDependency.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/HgDependency.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/HgDependency.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,25 +1,20 @@
 package holygradle.scm
 
-import holygradle.buildscript.BuildScriptDependencies
 import holygradle.custom_gradle.plugin_apis.CredentialSource
 import holygradle.source_dependencies.SourceDependency
 import holygradle.source_dependencies.SourceDependencyHandler
 import org.gradle.api.Project
-import org.gradle.process.ExecResult
 import org.gradle.process.ExecSpec
 
 class HgDependency extends SourceDependency {
-    private final BuildScriptDependencies buildScriptDependencies
     private final Command hgCommand
-    
+
     public HgDependency(
         Project project,
         SourceDependencyHandler sourceDependency,
-        BuildScriptDependencies buildScriptDependencies,
         Command hgCommand
     ) {
         super(project, sourceDependency)
-        this.buildScriptDependencies = buildScriptDependencies
         this.hgCommand = hgCommand
     }
     
@@ -27,27 +22,14 @@
     public String getFetchTaskDescription() {
         "Retrieves an Hg Clone for '${sourceDependency.name}' into your workspace."
     }
-    
-    private void cacheCredentials(String username, String password, String repoUrl) {
-        String credUrl = repoUrl.split("@")[0]
-        String credentialStorePath = buildScriptDependencies.getPath("credential-store").path
-        // println "${credentialStorePath} ${credUrl} ${username} <password>"
-        ExecResult execResult = project.exec { ExecSpec spec ->
-            spec.setIgnoreExitValue true
-            spec.commandLine credentialStorePath, "${username}@@${credUrl}@Mercurial", username, password
-        }
-        if (execResult.getExitValue() == -1073741515) {
-            println "-"*80
-            println "Failed to cache Mercurial credentials. This is probably because you don't have the " +
-                    "Visual C++ 2010 Redistributable installed on your machine. Please download and " +
-                    "install the x86 version before continuing. Here's the link: "
-            println "    http://www.microsoft.com/download/en/details.aspx?id=5555"
-            println "-"*80
-        }
-        execResult.assertNormalExitValue()
+
+    private void cacheCredentials(CredentialSource credentialSource, String credentialBasis, String repoUrl) {
+        final String credUrl = repoUrl.split("@")[0]
+        final String credentialName = "${credentialSource.username(credentialBasis)}@@${credUrl}@Mercurial"
+        ScmHelper.storeCredential(project, credentialSource, credentialName, credentialBasis)
     }
 
-    private boolean TryCheckout(String repoUrl, File destinationDir, String repoBranch) {
+    private boolean tryCheckout(String repoUrl, File destinationDir, String repoBranch) {
         Collection<String> args = ["clone"]
         if (repoBranch != null) { 
             args.add("--branch")
@@ -57,13 +39,17 @@
         args.add(repoUrl)
         args.add(destinationDir.path)
 
+        project.logger.debug "tryCheckout: checking out with command line ${args}."
+
         try {
             hgCommand.execute { ExecSpec spec ->
                 spec.workingDir = project.projectDir
                 spec.args args
             }
-        } catch ( RuntimeException ex ) {
-            println(ex.message)
+        } catch (RuntimeException ex) {
+            project.logger.error "Checkout of ${repoUrl} branch ${repoBranch} failed: ${ex.message}. " +
+                                     "Full exception is recorded at debug logging level."
+            project.logger.debug("Checkout of ${repoUrl} branch ${repoBranch} failed", ex)
             return false
         }
         return true
@@ -75,42 +61,47 @@
     }
     
     @Override
-    protected boolean DoCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
+    protected boolean doCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
+        boolean result = tryCheckout(repoUrl, destinationDir, repoBranch)
 
-        boolean result = TryCheckout(repoUrl, destinationDir, repoBranch)
-        
         if (!result) {
             deleteEmptyDir(destinationDir)
+            boolean repoSupportsAuthentication = ScmHelper.repoSupportsAuthentication(repoUrl)
+            if (!repoSupportsAuthentication) {
+                throw new RuntimeException(
+                    "Failed to clone ${repoUrl}.  Cannot re-try with authentication " +
+                    "because repo URL is not HTTP(S): ${repoUrl}."
+                )
+            }
             CredentialSource myCredentialsExtension = project.extensions.findByName("my") as CredentialSource
-            if (myCredentialsExtension != null) {
-                println "  Authentication failed. Trying credentials from 'my-credentials' plugin..."
-                cacheCredentials(myCredentialsExtension.username, myCredentialsExtension.password, repoUrl)
-                println "  Cached Mercurial credentials. Trying again..."
-                result = TryCheckout(repoUrl, destinationDir, repoBranch)
-                if (!result) {
-                    deleteEmptyDir(destinationDir)
-
-                    if (keyringIsConfigured(destinationDir)) {
-                        throw new RuntimeException(
-                            "Failed to clone ${repoUrl} even after pre-caching credentials. " +
-                            "The mercurial_keyring IS configured. If your password changed recently, " +
-                            "try running 'credential-store.exe' which should be in the root of your workspace, " +
-                            "then try again."
-                        )
-                    } else {
-                        throw new RuntimeException(
-                            "Failed to clone ${repoUrl}. The mercurial_keyring is NOT configured. " +
-                            "Please configure it and try again."
-                        )
-                    }
-                }
-            } else {
+            if (myCredentialsExtension == null) {
                 throw new RuntimeException(
                     "Failed to clone ${repoUrl}.  Cannot re-try with authentication " +
                     "because the 'my-credentials' plugin is not applied. " +
                     "Please apply the 'my-credentials' plugin and try again."
                 )
             }
+            project.logger.info "  Authentication failed. Trying credentials from 'my-credentials' plugin..."
+            cacheCredentials(myCredentialsExtension, sourceDependency.credentialBasis, repoUrl)
+            project.logger.info "  Cached Mercurial credentials. Trying again..."
+            result = tryCheckout(repoUrl, destinationDir, repoBranch)
+            if (!result) {
+                deleteEmptyDir(destinationDir)
+
+                if (keyringIsConfigured(destinationDir)) {
+                    throw new RuntimeException(
+                        "Failed to clone ${repoUrl} even after pre-caching credentials. " +
+                        "The mercurial_keyring IS configured. If your password changed recently, " +
+                        "try running 'credential-store.exe' which should be in the root of your workspace, " +
+                        "then try again."
+                    )
+                } else {
+                    throw new RuntimeException(
+                        "Failed to clone ${repoUrl}. The mercurial_keyring is NOT configured. " +
+                        "Please configure it and try again."
+                    )
+                }
+            }
         }
         
         // Update to a specific revision if necessary.
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/HgRepository.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/HgRepository.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/HgRepository.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,19 +2,13 @@
 
 import org.gradle.process.ExecSpec
 
-import java.util.regex.Matcher
-
-class HgRepository implements SourceControlRepository {
-    private final File workingCopyDir
-    private final Command hgCommand
+import java.nio.file.Files
 
-    public HgRepository(Command hgCommand, File workingCopyDir) {
-        this.hgCommand = hgCommand
-        this.workingCopyDir = workingCopyDir
-    }
+class HgRepository extends SourceControlRepositoryBase {
+    public static SourceControlType TYPE = new Type()
 
-    public File getLocalDir() {
-        workingCopyDir.absoluteFile
+    public HgRepository(Command scmCommand, File workingCopyDir) {
+        super(scmCommand, workingCopyDir)
     }
     
     public String getProtocol() {
@@ -22,21 +16,36 @@
     }
     
     public String getUrl() {
-        // TODO 2016-04-15 HughG: Instead of this, run "hg paths default" and capture the output.
-        // May need to strip "username[:password]@" from URL.
-        File hgrc = new File(workingCopyDir, "/.hg/hgrc")
-        String url = "unknown"
-        if (hgrc.exists()) {
-            hgrc.text.eachLine {
-                Matcher match = it =~ /default = (.+)/
-                if (match.size() != 0) {
-                    final List<String> matches = match[0] as List<String>
-                    url = matches[1]
-                }
-                return
+        File localWorkingCopyDir = workingCopyDir // capture private for closure
+        ExecSpec savedSpec = null
+        String defaultPath = scmCommand.execute(
+            { ExecSpec spec ->
+                savedSpec = spec // so we can access the configured error stream
+                spec.workingDir = localWorkingCopyDir
+                spec.args(
+                        "paths", // Execute the "paths" command,
+                        "default" // asking for the default push target
+                )
+            },
+            { int exitValue ->
+                String errorString = savedSpec.errorOutput.toString().replaceAll('[\\r\\n]', '')
+                boolean defaultRemoteNotFound = (exitValue == 1) && (errorString == 'not found!')
+                // Throw if there's a non-zero exit value, unless it's just because there's no default remote,
+                // which is perfectly valid for a new, never-pushed repo.
+                return (exitValue == 0) || !defaultRemoteNotFound
             }
+        )
+        if (defaultPath.trim().isEmpty()) {
+            return "unknown"
         }
-        url
+        URL defaultUrl = new URL(defaultPath)
+        URL defaultUrlWithoutUserInfo = new URL(
+            defaultUrl.protocol,
+            defaultUrl.host,
+            defaultUrl.port,
+            defaultUrl.file
+        )
+        return defaultUrlWithoutUserInfo.toString()
     }
 
     public String getRevision() {
@@ -45,7 +54,7 @@
         // copy is modified, which we will remove.
 
         File localWorkingCopyDir = workingCopyDir // capture private for closure
-        String minimalNode = hgCommand.execute { ExecSpec spec ->
+        String minimalNode = scmCommand.execute { ExecSpec spec ->
                 spec.workingDir = localWorkingCopyDir
                 spec.args(
                     "id", // Execute the "id" command,
@@ -56,7 +65,7 @@
             minimalNode = minimalNode[0..-2] // Drop the last character.
         }
 
-        return hgCommand.execute { ExecSpec spec ->
+        return scmCommand.execute { ExecSpec spec ->
             spec.workingDir = localWorkingCopyDir
             spec.args(
                 "log",                      // Execute log command,
@@ -70,10 +79,42 @@
     public boolean hasLocalChanges() {
         // Execute hg status with added, removed or modified files
         File localWorkingCopyDir = workingCopyDir // capture private for closure
-        String changes = hgCommand.execute { ExecSpec spec ->
+        String changes = scmCommand.execute { ExecSpec spec ->
             spec.workingDir = localWorkingCopyDir
             spec.args "status", "-amrdC"
         }
         changes.trim().length() > 0
     }
+
+    protected boolean ignoresFileInternal(File file) {
+        List<String> ignoredFileLines = scmCommand.execute { ExecSpec spec ->
+            spec.workingDir = workingCopyDir
+            spec.args "status", "-i", file.absolutePath
+        }.readLines()
+        if (ignoredFileLines.isEmpty()) {
+            return false
+        }
+        String line = ignoredFileLines[0]
+        String fileRelativePath = workingCopyDir.toPath().relativize(file.toPath())
+        // We do a startsWith check (instead of ==) because "file" might be a directory, in which case we'll get the
+        // filename of the first file in the folder.
+        return (line == "I " + fileRelativePath)
+    }
+
+    private static class Type implements SourceControlType {
+        @Override
+        String getStateDirName() {
+            return ".hg"
+        }
+
+        @Override
+        String getExecutableName() {
+            return "hg"
+        }
+
+        @Override
+        Class<SourceControlRepository> getRepositoryClass() {
+            return HgRepository.class
+        }
+    }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/ScmHelper.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/ScmHelper.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,123 @@
+package holygradle.scm
+
+import holygradle.custom_gradle.plugin_apis.CredentialSource
+import holygradle.custom_gradle.plugin_apis.Credentials
+import holygradle.io.FileHelper
+import org.gradle.api.Project
+import org.gradle.process.ExecSpec
+
+// TODO 2017-03-28 HughG: Refactor credential methods out to a separate class.
+
+class ScmHelper {
+    private static final String CREDENTIAL_BASIS_FILE_PATH = "holygradle/credential-bases.txt"
+
+    public static String getGitConfigValue(Command gitCommand, File workingDir, String configKey) {
+        return gitCommand.execute({ ExecSpec spec ->
+            spec.workingDir = workingDir
+            spec.args "config", "--get", configKey
+        }, {int error_code ->
+            // Error code 1 means the section or key is invalid, probably just no remote set, so don't throw.
+            return (error_code != 1)
+        })
+    }
+
+    private static Map<String, Set<String>> readCredentialBasisFile(Project project) {
+        Map<String, Set<String>> bases = [:].withDefault { new LinkedHashSet<String>() }
+        File basisFile = new File(project.gradle.gradleUserHomeDir, CREDENTIAL_BASIS_FILE_PATH)
+        if (!basisFile.exists()) {
+            return bases
+        }
+
+        int lineIndex = 0
+        String currentBasis = null
+        basisFile.eachLine { String line ->
+            ++lineIndex
+            final String trimmedLine = line.trim()
+            if (trimmedLine.empty || line[0] == '#') {
+                // Ignore blank and comment lines.
+            } else if (Character.isWhitespace(line.charAt(0))) {
+                if (currentBasis == null) {
+                    project.logger.warn "WARNING: Ignoring entry '${trimmedLine}' on line ${lineIndex} of " +
+                                            "${basisFile.absolutePath} because no basis line has been encountered yet."
+                } else {
+                    bases[currentBasis] << trimmedLine
+                }
+            } else {
+                // Warn the user if we haven't seen any entries under the current basis, before we set the next.
+                if (currentBasis != null && bases[currentBasis].empty) {
+                    project.logger.warn "WARNING: Basis credential ${currentBasis} in ${basisFile.absolutePath} " +
+                                            "has no credentials listed under it."
+                }
+                currentBasis = line
+            }
+        }
+        return bases
+    }
+
+    private static void writeCredentialBasisFile(Project project, Map<String, Set<String>> credentialsByBasis) {
+        File basisFile = new File(project.gradle.gradleUserHomeDir, CREDENTIAL_BASIS_FILE_PATH)
+        FileHelper.ensureMkdirs(basisFile.parentFile, "create folder for ${basisFile.name}")
+        basisFile.withPrintWriter { pw ->
+            pw.println "# This is a machine-generated Holy Gradle Credential Basis file."
+            pw.println "#"
+            pw.println "# It contains a mapping from credential basis names to credential names."
+            pw.println "# Credential bases are stored in the Windows Credential Manager as"
+            pw.println "# 'Intrepid - <name>'.  Associated are credentials filled in from that name"
+            pw.println "# where the credentialBasis is set on a sourceDependency; credential-store.exe"
+            pw.println "# reads this file to update all associated credentials as a group."
+            pw.println "#"
+            pw.println "# Lines starting with '#' are comments.  Comments and blank lines are ignored."
+            pw.println "# Lines starting with other non-whitespace characters are the names of bases."
+            pw.println "# Lines which follow a basis and start with whitespace are the names of"
+            pw.println "# credentials associated with that basis."
+
+            credentialsByBasis.each { basis, credentials ->
+                pw.println basis
+                credentials.each { credential ->
+                    pw.print "\t"
+                    pw.println credential
+                }
+            }
+        }
+    }
+
+    // Update credential basis file if necessary.
+    private static void updateCredentialBasisFile(Project project, String credentialName, String credentialBasis) {
+        // Read contents of basis file.
+        Map<String, Set<String>> credentialsByBasis = readCredentialBasisFile(project)
+
+        // Ensure the credential name is associated with one and only one basis.
+        boolean changed = credentialsByBasis[credentialBasis].add(credentialName)
+        credentialsByBasis.each { String basis, Set<String> credentials ->
+            if (basis != credentialName) {
+                changed |= credentials.remove(credentialName)
+            }
+        }
+
+        // Write file, if the mapping is effectively changed.
+        if (changed) {
+            writeCredentialBasisFile(project, credentialsByBasis)
+        }
+
+    }
+
+    public static void storeCredential(
+        Project project,
+        CredentialSource credentialSource,
+        String credentialName,
+        String credentialBasis
+    ) {
+        updateCredentialBasisFile(project, credentialName, credentialBasis)
+        final username = credentialSource.username(credentialBasis)
+        final password = credentialSource.password(credentialBasis)
+        if (username == null || password == null) {
+            throw new RuntimeException("Failed to get username and password for credential basis ${credentialBasis}")
+        }
+        credentialSource.credentialStore.writeCredential(credentialName, new Credentials(username, password))
+        project.logger.info "  Cached credential '${credentialName}' from basis '${credentialBasis}'."
+    }
+
+    public static boolean repoSupportsAuthentication(String repoUrl) {
+        return new URL(repoUrl).protocol in ["http", "https"]
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepositories.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepositories.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepositories.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,41 +1,110 @@
 package holygradle.scm
 
-import org.gradle.api.DefaultTask
+import holygradle.source_dependencies.SourceDependencyHandler
 import org.gradle.api.Project
-import org.gradle.api.Task
+
+import java.util.function.Function
 
 public class SourceControlRepositories {
-    private static final String TOOL_SETUP_TASK_NAME = "setUpSourceControlTools"
+    private static final List<SourceControlType> ALL_REPOSITORY_TYPES =
+        [SvnRepository.TYPE, HgRepository.TYPE, GitRepository.TYPE]
 
     public static SourceControlRepository create(
-        Project rootProject,
-        File location,
-        boolean useDummyIfNecessary = false
+        Project project
     ) {
-        File svnFile = new File(location, ".svn")
-        File hgFile = new File(location, ".hg")
-        File gitFile = new File(location, ".git")
-        if (([svnFile, hgFile, gitFile].count { it.exists() }) > 1){
-            throw new RuntimeException(
-                "${location} contains a combination of Subversion '.svn', Mercurial '.hg' and/or Git '.git' folders, " +
-                    "which is not supported, because it is impossible to tell which to use for source version information."
-            )
-        }
+        File location = project.projectDir
+        File repoLocation = findSourceControlDir(location)
+        List<SourceControlType> repoTypesAtLocation = getRepositoryTypesAtLocation(repoLocation)
+
+        switch (repoTypesAtLocation.size()) {
+            case 0:
+                return new DummySourceControl()
+            case 1:
+                SourceControlRepository repo = getRepositoryOfType(repoTypesAtLocation[0], makeCommandLineFactory(project), repoLocation)
+                if (repoLocation == location) {
+                    return repo
+                }
 
-        if (svnFile.exists()) {
-            new SvnRepository(new CommandLine("svn.exe", rootProject.&exec), location)
-        } else if (hgFile.exists()) {
-            new HgRepository(new CommandLine("hg.exe", rootProject.&exec), location)
-        } else if (gitFile.exists()) {
-            new GitRepository(new CommandLine("git.exe", rootProject.&exec), location)
-        } else if (useDummyIfNecessary) {
-            new DummySourceControl()
-        } else {
-            null
+                // The original "location" exists in a folder within a directory hierarchy which is under some kind
+                // of source control working copy directory hierarchy, but it might be in an ignored folder, in
+                // which case it isn't really under source control.
+                //
+                // If we're searching upward then we're in a Gradle project, so we must have at least one file
+                // (settings and/or build script) in the location folder.  This is relevant because some source
+                // control systems (Git and Mercurial) don't let you find the ignored status of folders, so we need
+                // to ask about a normal file.
+                if (repo.ignoresFile(project.buildFile)) {
+                    return new DummySourceControl()
+                } else {
+                    return repo
+                }
+
+            default:
+                throw new RuntimeException(
+                        "${repoLocation} contains a combination of folders from " +
+                                ALL_REPOSITORY_TYPES.collect {it.stateDirName} +
+                                ", which is not supported, because it is impossible to tell which to use."
+                )
         }
     }
 
+    public static SourceControlRepository create(
+        SourceDependencyHandler handler
+    ) {
+        // We don't use handler..getSourceDependencyProject(...).projectDir, because source dependencies don't have
+        // to contain a Gradle project.  We don't search upward or allow a dummy SourceControlRepository because we
+        // expect source dependencies to be in their own repos.
+        File repoLocation = handler.destinationDir
+        List<SourceControlType> repoTypesAtLocation = getRepositoryTypesAtLocation(repoLocation)
+        switch (repoTypesAtLocation.size()) {
+            case 0:
+                return new DummySourceControl()
+            case 1:
+                return getRepositoryOfType(repoTypesAtLocation[0], makeCommandLineFactory(handler.project), repoLocation)
+            default:
+                throw new RuntimeException(
+                    "${repoLocation} contains a combination of folders from " +
+                    ALL_REPOSITORY_TYPES.collect {it.stateDirName} +
+                    ", which is not supported, because it is impossible to tell which to use."
+                )
+        }
+    }
+
+    private static Function<String, Command> makeCommandLineFactory(Project project) {
+        return { String executableName -> new CommandLine(project.logger, executableName, project.&exec) }
+    }
+
+    /**
+     * Find the source control repository root folder which contains {@code location}.
+     * @param location
+     * @return
+     */
+    private static File findSourceControlDir(File location) {
+        for (File d = location; d.parentFile != null; d = d.parentFile) {
+            if (!getRepositoryTypesAtLocation(d).isEmpty()) {
+                return d
+            }
+        }
+        return location
+    }
+
+    private static List<SourceControlType> getRepositoryTypesAtLocation(File location) {
+        return ALL_REPOSITORY_TYPES.findAll {
+            new File(location, it.stateDirName).exists()
+        }
+    }
+
+    private static SourceControlRepository getRepositoryOfType(
+        SourceControlType type,
+        Function<String, Command> commandFactory,
+        File repoLocation
+    ) {
+        return type.repositoryClass
+            .getConstructor(Command, File)
+            .newInstance(commandFactory.apply(type.executableName), repoLocation)
+    }
+
     public static SourceControlRepository createExtension(Project project) {
-        project.extensions.add("sourceControl", create(project, project.projectDir, true)) as SourceControlRepository
+        project.extensions.add("sourceControl", create(project)) as SourceControlRepository
     }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepository.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepository.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepository.groovy	Fri May 03 13:55:15 2019 +0100
@@ -10,4 +10,13 @@
     String getRevision()
     
     boolean hasLocalChanges()
+
+    /**
+     * Returns true if and only if the source control system is definitely currently ignoring this file.
+     * @param file
+     * @return True if and only if the source control system is definitely currently ignoring this file.
+     * @throws IllegalArgumentException if the argument does not exist or is something other than a normal file
+     * (for example, a directory)
+     */
+    boolean ignoresFile(File file)
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepositoryBase.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlRepositoryBase.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,38 @@
+package holygradle.scm
+
+import java.nio.file.Files
+
+abstract class SourceControlRepositoryBase implements SourceControlRepository {
+    protected final File workingCopyDir
+    protected final Command scmCommand
+
+    public SourceControlRepositoryBase(Command scmCommand, File workingCopyDir) {
+        this.scmCommand = scmCommand
+        this.workingCopyDir = workingCopyDir
+    }
+
+    public final File getLocalDir() {
+        workingCopyDir.absoluteFile
+    }
+
+    @Override
+    public final boolean ignoresFile(File file) {
+        if (file == null) {
+            throw new NullPointerException("file must not be null")
+        }
+        if (!file.exists()) {
+            throw new IllegalArgumentException(
+                "Cannot check whether repo ignores file ${file} because it does not exist"
+            )
+        }
+        if (!Files.isRegularFile(file.toPath())) {
+            throw new IllegalArgumentException(
+                "Cannot check whether repo ignores file ${file} because it is not a regular file"
+            )
+        }
+
+        return ignoresFileInternal(file)
+    }
+
+    protected abstract boolean ignoresFileInternal(File file)
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlType.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SourceControlType.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,7 @@
+package holygradle.scm
+
+interface SourceControlType {
+    String getStateDirName()
+    String getExecutableName()
+    Class<SourceControlRepository> getRepositoryClass()
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SvnDependency.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/SvnDependency.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SvnDependency.groovy	Fri May 03 13:55:15 2019 +0100
@@ -19,7 +19,7 @@
     
     @Override
     public String getFetchTaskDescription() {
-        "Retrieves an SVN Checkout for '${sourceDependency.name}' into your workspace."
+        "Retrieves an SVN checkout for '${sourceDependency.name}' into your workspace."
     }
     
     private boolean TryCheckout(
@@ -56,7 +56,7 @@
         if (writeVersion) {
             writeVersionInfoFile()
         }
-        return true
+        return result
     }
     
     private boolean TryCheckout(File destinationDir, String repoUrl, String repoRevision, File svnConfigDir) {
@@ -80,32 +80,37 @@
     }
     
     @Override
-    protected boolean DoCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
+    protected boolean doCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch) {
         File svnConfigDir = getSvnConfigDir()
         
         boolean result = TryCheckout(destinationDir, repoUrl, repoRevision, svnConfigDir)
         
         if (!result) {
             CredentialSource myCredentialsExtension = project.extensions.findByName("my") as CredentialSource
-            if (myCredentialsExtension != null) {
-                println "  Authentication failed. Using credentials from 'my-credentials' plugin..."
-                result = TryCheckout(
-                    destinationDir,
-                    repoUrl,
-                    repoRevision,
-                    svnConfigDir,
-                    myCredentialsExtension.username,
-                    myCredentialsExtension.password
+            if (myCredentialsExtension == null) {
+                throw new RuntimeException(
+                    "Failed to ${getSvnCommandName()} ${repoUrl}.  Could not try with authentication " +
+                    "because the 'my-credentials' plugin is not applied. " +
+                    "Please apply the 'my-credentials' plugin and try again."
                 )
-                if (!result) {
-                    deleteEmptyDir(destinationDir)
-                    println "  Well, that didn't work. Your \"Domain Credentials\" are probably out of date."
-                    println "  Have you changed your password recently? If so then please try running "
-                    println "  'credential-store.exe' which should be in the root of your workspace."
-                    throw new RuntimeException("SVN authentication failure.")
-                }
-            } else {
-                println "  Authentication failed. Please apply the 'my-credentials' plugin."
+            }
+            project.logger.info "  Authentication failed. Using credentials from 'my-credentials' plugin..."
+            final String credentialBasis = sourceDependency.credentialBasis
+            result = TryCheckout(
+                destinationDir,
+                repoUrl,
+                repoRevision,
+                svnConfigDir,
+                myCredentialsExtension.username(credentialBasis),
+                myCredentialsExtension.username(credentialBasis)
+            )
+            if (!result) {
+                deleteEmptyDir(destinationDir)
+                throw new RuntimeException(
+                    "Failed to clone ${repoUrl} even after using credentials from 'my-credentials' plugin. " +
+                    "If your password changed recently, " +
+                    "try running 'credential-store.exe' which should be in the root of your workspace, then try again."
+                )
             }
         }
         
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/scm/SvnRepository.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/scm/SvnRepository.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/scm/SvnRepository.groovy	Fri May 03 13:55:15 2019 +0100
@@ -4,17 +4,11 @@
 
 import java.util.regex.Matcher
 
-class SvnRepository implements SourceControlRepository {
-    private final File workingCopyDir
-    private final Command svnCommand
+class SvnRepository extends SourceControlRepositoryBase {
+    public static SourceControlType TYPE = new Type()
 
-    public SvnRepository(Command hgCommand, File localPath) {
-        this.svnCommand = hgCommand
-        workingCopyDir = localPath
-    }
-
-    public File getLocalDir() {
-        workingCopyDir
+    public SvnRepository(Command scmCommand, File workingCopyDir) {
+        super(scmCommand, workingCopyDir)
     }
     
     public String getProtocol() {
@@ -23,7 +17,7 @@
     
     public String getUrl() {
         String url = "unknown"
-        String info = svnCommand.execute { ExecSpec spec ->
+        String info = scmCommand.execute { ExecSpec spec ->
             spec.workingDir = workingCopyDir
             spec.args "info"
         }
@@ -37,7 +31,7 @@
     
     public String getRevision() {
         String revision = "unknown"
-        String info = svnCommand.execute { ExecSpec spec ->
+        String info = scmCommand.execute { ExecSpec spec ->
             spec.workingDir = workingCopyDir
             spec.args "info"
         }
@@ -50,10 +44,48 @@
     }
     
     public boolean hasLocalChanges() {
-        String changes = svnCommand.execute { ExecSpec spec ->
+        String changes = scmCommand.execute { ExecSpec spec ->
             spec.workingDir = workingCopyDir
             spec.args "status", "--quiet", "--ignore-externals"
         }
         changes.trim().length() > 0
     }
+
+    protected boolean ignoresFileInternal(final File file) {
+        // If the file is explicitly ignored, "svn status" will output a line starting with "I".  However, if it's
+        // somewhere under an ignored folder, then "svn status" for any file under that folder will output nothing on
+        // standard output (and a warning on standard error: "svn: warning: W155010: The node 'filename' was not found"),
+        // in which case we keep looking upward until we hit the working copy root (which we don't check, because a repo
+        // which ignores its root folder seems like madness!).
+        File maybeIgnoredFile = file.absoluteFile
+        while (maybeIgnoredFile != workingCopyDir) {
+            String status = scmCommand.execute { ExecSpec spec ->
+                spec.workingDir = workingCopyDir
+                spec.args "status", maybeIgnoredFile.toString()
+            }
+            if (status == "") {
+                maybeIgnoredFile = maybeIgnoredFile.parentFile
+            } else {
+                return status.startsWith("I")
+            }
+        }
+    }
+
+    private static class Type implements SourceControlType {
+        @Override
+        String getStateDirName() {
+            return ".svn"
+        }
+
+        @Override
+        String getExecutableName() {
+            return "svn"
+        }
+
+        @Override
+        Class<SourceControlRepository> getRepositoryClass() {
+            return SvnRepository.class
+        }
+    }
+
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/source_dependencies/FetchSourceDependencyTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/FetchSourceDependencyTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/FetchSourceDependencyTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -22,22 +22,27 @@
         return sourceDependency
     }
 
-    
     public void initialize(SourceDependency sourceDependency) {
         this.sourceDependency = sourceDependency
         url = sourceDependency.getUrl()
         destinationDir = sourceDependency.getDestinationDir()
+        // If the destination folder already exists, don't try to fetch the source again.  If it doesn't exist (for
+        // example, because the user deleted it, or the previous checkout failed), always try to check out.  (Without
+        // the "upToDateWhen" call, a failed fetch seems to cause this task to be treated as UP-TO-DATE in future runs,
+        // even though the output folder doesn't exist.  That happens even if I set the output folder as a task output
+        // dir.)
         onlyIf {
-            !destinationDir.exists()
+            def destinationDirExists = destinationDir.exists()
+            if (destinationDirExists) {
+                println "Not fetching '${sourceDependency.url}' because target folder '${destinationDir}' exists"
+            }
+            return !destinationDirExists
         }
+        outputs.upToDateWhen { false }
     }
         
     @TaskAction
-    public void Checkout() {
-        sourceDependency.Checkout()
-    }
-    
-    public String getSourceDirName() {
-        sourceDependency.sourceDependency.name
+    public void checkout() {
+        sourceDependency.checkout()
     }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/source_dependencies/RecursivelyFetchSourceTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/RecursivelyFetchSourceTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/RecursivelyFetchSourceTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -64,20 +64,11 @@
                 newSourceDependenciesWereFetched
             )
         if (needToReRun) {
-            if (runningUnderDaemon) {
-                // The daemon is being used so we can't terminate the process cleanly and force a re-run.
-                throw new RuntimeException(
-                    NEW_SUBPROJECTS_MESSAGE + " Please re-run this task to fetch transitive dependencies."
-                )
-            } else {
-                // We're not using the daemon, so we can exit the process and return a special exit code
-                // which will cause the process to be rerun by the gradle wrapper.
-                println "-"*80
-                println NEW_SUBPROJECTS_MESSAGE
-                println "Rerunning this task..."
-                println "-"*80
-                System.exit(123456)
-            }
+            File newFile = new File(project.rootDir, "/.restart")
+            newFile.createNewFile()
+            throw new RuntimeException(
+                    NEW_SUBPROJECTS_MESSAGE + " Now re-running this build due to new source dependencies."
+            )
         }
     }
 
@@ -121,8 +112,4 @@
         }
     }
 
-    public boolean isRunningUnderDaemon() {
-        String command = System.getProperty("sun.java.command").split(" ")[0]
-        return command.contains("daemon")
-    }
-}
\ No newline at end of file
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependency.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependency.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependency.groovy	Fri May 03 13:55:15 2019 +0100
@@ -5,7 +5,7 @@
 import holygradle.Helper
 
 abstract class SourceDependency {
-    public final SourceDependencyHandler sourceDependency
+    protected final SourceDependencyHandler sourceDependency
     public final Project project
 
     public SourceDependency(Project project, SourceDependencyHandler sourceDependency) {
@@ -36,9 +36,9 @@
 
     protected abstract String getCommandName()
     
-    protected abstract boolean DoCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch)
+    protected abstract boolean doCheckout(File destinationDir, String repoUrl, String repoRevision, String repoBranch)
     
-    public void Checkout() {
+    public void checkout() {
         String[] urlSplit = url.split("@")
         String urlOnly = url
         String revision = null // meaning trunk
@@ -57,7 +57,7 @@
         String revText = (revision == null) ? "head" : "rev: $revision"
         println "${commandName} from '${urlOnly}' ($branchText, $revText) to '<workspace>/${relativePath}'..."
         
-        boolean result = DoCheckout(destinationDir, urlOnly, revision, branchName)
+        boolean result = doCheckout(destinationDir, urlOnly, revision, branchName)
         
         if (result) {
             println "  ${commandName} succeeded."
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,13 +2,13 @@
 
 import holygradle.Helper
 import holygradle.IntrepidPlugin
-import holygradle.buildscript.BuildScriptDependencies
+import holygradle.custom_gradle.plugin_apis.CredentialSource
 import holygradle.custom_gradle.util.CamelCase
 import holygradle.dependencies.DependencyHandler
 import holygradle.scm.CommandLine
+import holygradle.scm.GitDependency
 import holygradle.scm.HgDependency
 import holygradle.scm.SvnDependency
-import holygradle.scm.GitDependency
 import org.gradle.api.Project
 import org.gradle.api.Task
 import org.gradle.api.artifacts.ModuleVersionIdentifier
@@ -22,6 +22,7 @@
     public String protocol = null
     public String url = null
     public String branch = null
+    public String credentialBasis = CredentialSource.DEFAULT_CREDENTIAL_TYPE
     public Boolean writeVersionInfoFile = null
     public boolean export = false
     private File destinationDir
@@ -35,7 +36,8 @@
 
     public SourceDependencyHandler(String depName, Project project) {
         super(depName, project)
-        destinationDir = new File(project.projectDir, depName).getCanonicalFile()
+        destinationDir = absolutePath.canonicalFile
+        project.afterEvaluate { validate() }
     }
 
     public File getDestinationDir() {
@@ -115,40 +117,17 @@
         }
     }
 
-    public Task createFetchTask(Project project, BuildScriptDependencies buildScriptDependencies) {
+    public Task createFetchTask(Project project) {
         SourceDependency sourceDependency
         if (protocol == "svn") {
-            def hgCommand = new CommandLine(
-                "svn.exe",
-                project.&exec
-            )
-            sourceDependency = new SvnDependency(
-                project,
-                this,
-                hgCommand
-            )
+            def svnCommand = new CommandLine(project.logger, "svn.exe", project.&exec)
+            sourceDependency = new SvnDependency(project, this, svnCommand)
         } else if (protocol == "hg") {
-            def hgCommand = new CommandLine(
-                "hg.exe",
-                project.&exec
-            )
-            sourceDependency = new HgDependency(
-                project,
-                this,
-                buildScriptDependencies,
-                hgCommand
-            )
+            def hgCommand = new CommandLine(project.logger, "hg.exe", project.&exec)
+            sourceDependency = new HgDependency(project, this, hgCommand)
         } else if (protocol == "git") {
-            def gitCommand = new CommandLine(
-                "git.exe",
-                project.&exec
-            )
-            sourceDependency = new GitDependency(
-                project,
-                this,
-                buildScriptDependencies,
-                gitCommand
-            )
+            def gitCommand = new CommandLine(project.logger, "git.exe", project.&exec)
+            sourceDependency = new GitDependency(project, this, gitCommand)
         } else {
             throw new RuntimeException("Unsupported protocol: " + protocol)
         }
@@ -161,10 +140,11 @@
     }
 
     /**
-     * Returns the module version ID of the source dependency, unless it doesn't have a Gradle project, in which case
-     * throws RuntimeException.
+     * Returns the module version ID of the source dependency, unless there is no configuration mapping to it (in which
+     * case returns {@code null}), or unless it has configuration mappings doesn't have a Gradle project which is
+     * included in the build (in which case throws RuntimeException).
      * @return The module version ID of the source dependency.
-     * @throws RuntimeException if the source dependency does not have a Gradle project.
+     * @throws RuntimeException if the source dependency has configuration mappings but does not have a Gradle project.
      */
     public ModuleVersionIdentifier getDependencyId() {
         ModuleVersionIdentifier identifier = null
@@ -186,11 +166,32 @@
         identifier
     }
 
+    /**
+     * Returns the module version ID of the source dependency as a string, unless there is no configuration mapping to
+     * it (in which case returns {@code null}), or unless it has configuration mappings doesn't have a Gradle project
+     * which is included in the build (in which case throws RuntimeException).
+     * @return The module version ID string of the source dependency.
+     * @throws RuntimeException if the source dependency has configuration mappings but does not have a Gradle project.
+     */
     public String getDependencyCoordinate() {
-        return dependencyId.toString()
+        return dependencyId?.toString()
     }
 
     public Project getSourceDependencyProject() {
         project.rootProject.findProject(targetName)
     }
+
+    void validate() {
+        Project dependencyProject = project.rootProject.findProject(targetName)
+        if (configurationMappings.size() == 0) {
+            if (dependencyProject == null) {
+                project.logger.debug "${project} has a source dependency on ${name}, which is not a Gradle project " +
+                     "in this build -- it is a non-Gradle source checkout"
+            } else {
+                project.logger.warn "WARNING: ${project} has a source dependency on ${name}, which is a project in " +
+                    "this build, but there is no configuration mapping.  This is probably a mistake.  It means that, " +
+                    "when ${project.name} is published, there will be no real dependency on ${targetName}."
+            }
+        }
+    }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyTaskHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyTaskHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/source_dependencies/SourceDependencyTaskHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -34,7 +34,7 @@
                     name,
                     type: SourceDependencyTask
                 ) { SourceDependencyTask it ->
-                    it.initialize(invocations.find()) // finds the first task
+                    it.initialize(invocations.first())
                 }
             } else {
                 LinkedHashMap<SourceDependencyInvocationHandler, Task> invocationsWithTasks = [:]
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateHandler.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -40,8 +40,7 @@
 class PackedDependenciesStateHandler implements PackedDependenciesStateSource {
     private final Project project
     private final DependenciesStateHandler dependenciesStateHandler
-    private Map<ModuleIdentifier, UnpackModule> unpackModulesMap = null
-    private Collection<UnpackModule> unpackModules = null
+    private Map<Configuration, Collection<UnpackModule>> unpackModules = null
 
     public static PackedDependenciesStateHandler createExtension(Project project) {
         project.extensions.packedDependenciesState = new PackedDependenciesStateHandler(project)
@@ -84,42 +83,25 @@
         project.logger.debug("    starting with unpackModules ${unpackModules.keySet().sort().join('\r\n')}")
         project.logger.debug("    and packedDependencies ${packedDependencies*.name.sort().join('\r\n')}")
 
-        Set<ResolvedDependenciesVisitor.ResolvedDependencyId> dependencyConfigurationsAlreadySeen =
-            new HashSet<ResolvedDependenciesVisitor.ResolvedDependencyId>()
-
         ResolvedDependenciesVisitor.traverseResolvedDependencies(
             dependencies,
             { ResolvedDependency resolvedDependency ->
-                // Visit this dependency only if: we've haven't seen it already for the configuration we're
-                // processing, it's not a module we're building from source (because we don't want to include those
-                // as UnpackModules).
+                // Visit this dependency only if: it's not a module we're building from source (because we don't want to
+                // include those as UnpackModules).
                 //
-                // Visit this dependency's children only if: we've haven't seen it already for the configuration
-                // we're processing.
+                // (Previously we wouldn't re-visit the module or its children if we'd already seen this
+                // resolvedDependency.configuration of this module.  However, this check was removed in 45f38934dea9
+                // for ticket GR #6279 (mis-labelled in the commit) because ...TODO )
 
                 ModuleVersionIdentifier id = resolvedDependency.module.id
-
-                final ResolvedDependenciesVisitor.ResolvedDependencyId newId =
-                    new ResolvedDependenciesVisitor.ResolvedDependencyId(id, resolvedDependency.configuration)
-                project.logger.debug("Adding ${newId} to ${dependencyConfigurationsAlreadySeen}")
-                final boolean isNewModuleConfiguration = dependencyConfigurationsAlreadySeen.add(newId)
-                if (!isNewModuleConfiguration) {
-                    project.logger.debug(
-                        "collectUnpackModules: Skipping ${id}, conf ${resolvedDependency.configuration}, " +
-                        "because it has already been visited"
-                    )
-                }
-
-                final boolean moduleIsInBuild = dependenciesStateHandler.isModuleInBuild(id)
-                if (moduleIsInBuild) {
+                final boolean isNonBuildModule = !dependenciesStateHandler.isModuleInBuild(id)
+                if (!isNonBuildModule) {
                     project.logger.debug("collectUnpackModules: Skipping ${id} because it is part of this build")
                 }
 
-                final boolean isNewNonBuildModuleConfiguration = isNewModuleConfiguration && !moduleIsInBuild
-
                 return new ResolvedDependenciesVisitor.VisitChoice(
-                    isNewNonBuildModuleConfiguration,
-                    isNewNonBuildModuleConfiguration
+                    isNonBuildModule,
+                    isNonBuildModule
                 )
             },
             { ResolvedDependency resolvedDependency ->
@@ -138,15 +120,18 @@
                     project.logger.debug("collectUnpackModules: created module for ${id.module}")
                 }
 
-                // Find a parent UnpackModuleVersion instance i.e. one which has a dependency on 'this'
-                // UnpackModuleVersion. There will only be a parent if this is a transitive dependency, and not if it
-                // is a direct dependency of the project.
-                UnpackModuleVersion parentUnpackModuleVersion =
-                    resolvedDependency.getParents().findResult { parentDependency ->
-                        ModuleVersionIdentifier parentDependencyVersion = parentDependency.module.id
-                        UnpackModule parentUnpackModule = unpackModules[parentDependencyVersion.module]
-                        parentUnpackModule?.getVersion(parentDependencyVersion)
+                // Find all parent UnpackModuleVersion instances, i.e., ones which have a dependency on 'this'
+                // UnpackModuleVersion. There will only be parents if this is a transitive dependency, and not if it
+                // is only a direct dependency of the project.
+                Set<UnpackModuleVersion> parents = new HashSet<>()
+                for (parentDependency in resolvedDependency.parents) {
+                    ModuleVersionIdentifier parentDependencyVersion = parentDependency.module.id
+                    UnpackModule parentUnpackModule = unpackModules[parentDependencyVersion.module]
+                    UnpackModuleVersion version = parentUnpackModule?.getVersion(parentDependencyVersion)
+                    if (version != null) {
+                        parents.add(version)
                     }
+                }
 
                 // We only have PackedDependencyHandlers for direct dependencies of a project.  If this resolved
                 // dependency is a transitive dependency, "thisPackedDep" will be null.
@@ -157,16 +142,17 @@
                     // resolved dependency version. We know that there can only be one resolved version per
                     // configuration so by checking the configuration matches we can be sure this is it.
                     return (it.groupName == id.group) &&
-                        (it.dependencyName == id.name) &&
-                        (it.configurationMappings.any { entry ->
-                            originalConf.hierarchy.any { it.name == entry.key }
-                        })
+                            (it.dependencyName == id.name) &&
+                            (it.configurationMappings.any { entry ->
+                                originalConf.hierarchy.any { it.name == entry.key }
+                            })
                 }
 
                 // Find or create an UnpackModuleVersion instance.
                 UnpackModuleVersion unpackModuleVersion
                 if (unpackModule.versions.containsKey(id.version)) {
                     unpackModuleVersion = unpackModule.versions[id.version]
+                    unpackModuleVersion.addParents(parents)
                     // If the same module appears as both a direct packed dependency (for which the path is explicitly
                     // specified by the user) and a transitive packed dependency (for which the path is inferred from
                     // its ancestors), we want to use the explicitly specified path.  Because UnpackModuleVersion
@@ -176,26 +162,32 @@
                         // It's possible for someone to specify the same version of the same module at two different
                         // paths, using two different packed dependencies.  However, we regard that as too complicated
                         // and confusing, and don't allow it.  If they really need it to appear to be in two places they
-                        // can create explicit symlinks.
+                        // can create explicit links.
                         final PackedDependencyHandler existingPackedDep = unpackModuleVersion.packedDependency
-                        if (existingPackedDep != null && existingPackedDep != thisPackedDep) {
-                            throw new RuntimeException(
-                                "Module version ${id} is specified by packed dependencies at both path " +
-                                "'${existingPackedDep.name}' and '${thisPackedDep.name}'.  " +
-                                "A single version can only be specified at one path.  If you need it to appear at " +
-                                "more than one location you can explicitly create links."
-                            )
+                        if (existingPackedDep != null) {
+                            // If the existing packed dep is the same as the one we found, we don't need to change it.
+                            // If it's different, fail.
+                            if (existingPackedDep != thisPackedDep) {
+                                throw new RuntimeException(
+                                    "Module version ${id} is specified by packed dependencies at both path " +
+                                        "'${existingPackedDep.name}' and '${thisPackedDep.name}'.  " +
+                                        "A single version can only be specified at one path.  If you need it to " +
+                                        "appear at " +
+                                        "more than one location you can explicitly create links."
+                                )
+                            }
+                        } else {
+                            // There was no existing packed dep, so we fill it in.
+                            unpackModuleVersion.packedDependency = thisPackedDep
                         }
-                        unpackModuleVersion.packedDependency = thisPackedDep
                     }
                 } else {
-                    unpackModuleVersion = new UnpackModuleVersion(project, id, parentUnpackModuleVersion, thisPackedDep)
+                    unpackModuleVersion = new UnpackModuleVersion(project, id, parents, thisPackedDep)
                     unpackModule.versions[id.version] = unpackModuleVersion
                     project.logger.debug(
-                        "collectUnpackModules: created version for ${id} " +
-                        "(pUMV = ${parentUnpackModuleVersion}, tPD = ${thisPackedDep?.name})"
+                            "collectUnpackModules: created version for ${id} " +
+                                    "(parents = ${parents}, tPD = ${thisPackedDep?.name})"
                     )
-
                 }
 
                 project.logger.debug("collectUnpackModules: adding ${id.module} originalConf ${originalConf.name} artifacts ${resolvedDependency.moduleArtifacts}")
@@ -209,19 +201,27 @@
      *
      * @return The transitive set of unpacked modules used by the project.
      */
-    public Collection<UnpackModule> getAllUnpackModules() {
-        if (unpackModulesMap == null) {
+    public Map<Configuration, Collection<UnpackModule>> getAllUnpackModules() {
+        if (unpackModules == null) {
             unpackModules = initializeAllUnpackModules()
         }
         unpackModules
     }
 
-    private ArrayList initializeAllUnpackModules() {
+    private Map<Configuration, Collection<UnpackModule>> initializeAllUnpackModules() {
         project.logger.debug("getAllUnpackModules for ${project}")
 
         final packedDependencies = project.packedDependencies as Collection<PackedDependencyHandler>
+        // Build a map of all unpack modules per configuration.  This allows us to force an unpack module to have only
+        // one location per configuration (by setting its packedDependency or its parents) but allow different locations
+        // for different configurations.  (A different configuration may have some, but not all, module versions
+        // different.  If the same version of a transitive dependency appears in more that one configuration, we want to
+        // link it next to its originating packed dependency/-ies in *all* configurations, not only in the first one we
+        // happen to process.)
+        Map<Configuration, Map<ModuleIdentifier, UnpackModule>> configurationUnpackModulesMap =
+            [:].withDefault { new HashMap<ModuleIdentifier, UnpackModule>() }
+
         // Build a list (without duplicates) of all artifacts the project depends on.
-        unpackModulesMap = [:]
         project.configurations.each((Closure){ Configuration conf ->
             Set<ResolvedDependency> firstLevelDeps =
                 ConfigurationHelper.getFirstLevelModuleDependenciesForMaybeOptionalConfiguration(conf)
@@ -229,38 +229,38 @@
                 conf,
                 firstLevelDeps,
                 packedDependencies,
-                unpackModulesMap
+                configurationUnpackModulesMap[conf]
             )
         })
 
         // Build a map of target locations to module versions
+        List<UnpackModule> flattenedUnpackModules = configurationUnpackModulesMap.values().collect { it.values() }.flatten()
         Map<File, Collection<UnpackModuleVersion>> targetLocations =
             [:].withDefault { new ArrayList<UnpackModuleVersion>() }
-        unpackModulesMap.values().each { UnpackModule module ->
+        flattenedUnpackModules.each { UnpackModule module ->
             module.versions.each { String versionStr, UnpackModuleVersion versionInfo ->
                 File targetPath = versionInfo.targetPathInWorkspace.canonicalFile
                 targetLocations[targetPath].add(versionInfo)
             }
         }
 
-        // Check if any target locations are used by more than one module/version.  (We use "inject", instead of "any",
+        // Check if any target locations are used by more than one module/version with different unpack entries.  It's
+        // okay if there are multiple but they all unpack to the same thing/place.  (We use "inject", instead of "any",
         // because we want to keep checking even after we find a problem, so we can log them all.)
         boolean foundTargetClash = targetLocations.inject(false) {
             boolean found, File target, Collection<UnpackModuleVersion> versions
              ->
-            final boolean thisTargetHasClashes = versions.size() > 1
+            final Set<UnpackDirEntry> uniqueUnpackDirEntries = versions.collect { it.getUnpackDirEntry() }.toSet()
+            final boolean thisTargetHasClashes = uniqueUnpackDirEntries.size() > 1
             if (thisTargetHasClashes) {
                 project.logger.error(
                     "In ${project}, location '${target}' is targeted by multiple dependencies/versions:"
                 )
-                versions.each { UnpackModuleVersion version ->
-                    project.logger.error("    ${version.fullCoordinate} in configurations ${version.originalConfigurations}")
-                    while (version.parent != null) {
-                        version = version.parent
-                        project.logger.error("        which is from ${version.fullCoordinate}")
-                    }
-                    project.logger.error("        which is from packed dependency ${version.packedDependency.name}")
+                versions.each {
+                    logUnpackModuleVersionAncestry(it, 1)
+                    project.logger.debug("    "+ it.getUnpackEntry().toString())
                 }
+                project.logger.debug("  Unique unpack dir entries: " + uniqueUnpackDirEntries)
             }
             return found || thisTargetHasClashes
         }
@@ -268,7 +268,22 @@
             throw new RuntimeException("Multiple different dependencies/versions are targeting the same locations.")
         }
 
-        unpackModules = new ArrayList(unpackModulesMap.values())
+        def map = new HashMap<Configuration, Collection<UnpackModule>>()
+        unpackModules = configurationUnpackModulesMap.collectEntries(map) { [it.key, it.value.values()] }
         unpackModules
     }
+
+    private void logUnpackModuleVersionAncestry(UnpackModuleVersion version, int indent) {
+        String prefix = "    " * indent
+        project.logger.error("${prefix}${version.fullCoordinate} in configurations ${version.originalConfigurations}")
+        PackedDependencyHandler packedDependency = version.packedDependency
+        if (packedDependency != null) {
+            project.logger.error("${prefix}  directly from packed dependency ${packedDependency.name}")
+        }
+        version.parents.each { parent ->
+            project.logger.error("${prefix}  indirectly from ${version.fullCoordinate}")
+            logUnpackModuleVersionAncestry(parent, indent + 1)
+        }
+
+    }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateSource.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateSource.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/PackedDependenciesStateSource.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,10 +1,12 @@
 package holygradle.unpacking
 
+import org.gradle.api.artifacts.Configuration
+
 public interface PackedDependenciesStateSource {
     /**
      * Returns a collection of objects representing the transitive set of unpacked modules used by a project.
      *
      * @return The transitive set of unpacked modules used by a project.
      */
-    public Collection<UnpackModule> getAllUnpackModules()
+    public Map<Configuration, Collection<UnpackModule>> getAllUnpackModules()
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/SpeedyUnpackManyTask.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/unpacking/SpeedyUnpackManyTask.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/SpeedyUnpackManyTask.groovy	Fri May 03 13:55:15 2019 +0100
@@ -20,16 +20,17 @@
     extends DefaultTask
 {
     private Unzipper unzipper
-    private Map<ModuleVersionIdentifier, UnpackEntry> entries = new HashMap<ModuleVersionIdentifier, UnpackEntry>()
+    private Map<ModuleVersionIdentifier, Set<UnpackEntry>> entries =
+        new HashMap<ModuleVersionIdentifier, Set<UnpackEntry>>().withDefault { new HashSet<UnpackEntry>() }
 
     public void initialize(
         Unzipper unzipper
     ) {
         this.unzipper = unzipper
         dependsOn unzipper.dependencies
-        Collection<UnpackEntry> localEntries = entries.values() // capture private for closure
+        Collection<Set<UnpackEntry>> localEntrySets = entries.values() // capture private for closure
         doLast {
-            localEntries.each { processEntry it }
+            localEntrySets.each { set -> set.each { processEntry it } }
         }
     }
 
@@ -38,10 +39,12 @@
         // task's inputs/outputs during task execution.
         ext.lazyConfiguration = { Task it ->
             logger.debug "${it.path} before adding entries: inputs=${inputs.files.files}; outputs=${outputs.files.files}"
-            source.allUnpackModules.each { UnpackModule module ->
-                module.versions.values().each { UnpackModuleVersion versionInfo ->
-                    // Add the unpack entry to unpack the module to the cache or directly to the workspace.
-                    addEntry(versionInfo)
+            source.allUnpackModules.values().each { Collection<UnpackModule> modules ->
+                modules.each { UnpackModule module ->
+                    module.versions.values().each { UnpackModuleVersion versionInfo ->
+                        // Add the unpack entry to unpack the module to the cache or directly to the workspace.
+                        addEntry(versionInfo)
+                    }
                 }
             }
             logger.debug "${it.path} after adding entries: inputs=${inputs.files.files}; outputs=${outputs.files.files}"
@@ -51,36 +54,32 @@
     public void addEntry(UnpackModuleVersion versionInfo) {
         logger.debug "Adding entry for ${versionInfo}"
         addEntry(versionInfo.moduleVersion, versionInfo.unpackEntry)
-        if (versionInfo.parent != null) {
-            addEntry(versionInfo.parent)
+        versionInfo.parents.each {
+            parent -> addEntry(parent)
         }
     }
 
     public void addEntry(ModuleVersionIdentifier id, UnpackEntry entry) {
-        if (entries.containsKey(id)) {
-            if (entries[id] != entry) {
-                throw new RuntimeException("Attempted to add inconsistent ${entry} to replace ${entries[id]} for ${id}")
+        if (entries[id].add(entry)) {
+            // We haven't seen an equivalent entry yet, so configure the task to unpack this entry's files, too.
+
+            logger.debug "Adding ${id} inputs ${entry.zipFiles}"
+            inputs.files entry.zipFiles
+            if (entry.applyUpToDateChecks) {
+                // Use Gradle's normal pattern for copying files from a ZIP file to the filesystem.
+                entry.zipFiles.each { File zipFile ->
+                    project.zipTree(zipFile).visit { FileVisitDetails fileDetails ->
+                        final File file = new File(entry.unpackDir, fileDetails.path)
+                        logger.debug "Adding ${id} output ${file}"
+                        outputs.file(file)
+                    }
+                }
+            } else {
+                // Just check the special "info file" to decide whether the unzipped contents are up to date.
+                final File infoFile = getInfoFile(entry)
+                logger.debug "Adding ${id} output ${infoFile}"
+                outputs.file infoFile
             }
-            return
-        } else {
-            entries[id] = entry
-        }
-        logger.debug "Adding ${id} inputs ${entry.zipFiles}"
-        inputs.files entry.zipFiles
-        if (entry.applyUpToDateChecks) {
-            // Use Gradle's normal pattern for copying files from a ZIP file to the filesystem.
-            entry.zipFiles.each { File zipFile ->
-                project.zipTree(zipFile).visit { FileVisitDetails fileDetails ->
-                    final File file = new File(entry.unpackDir, fileDetails.path)
-                    logger.debug "Adding ${id} output ${file}"
-                    outputs.file(file)
-                }
-            }
-        } else {
-            // Just check the special "info file" to decide whether the unzipped contents are up to date.
-            final File infoFile = getInfoFile(entry)
-            logger.debug "Adding ${id} output ${infoFile}"
-            outputs.file infoFile
         }
     }
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackDirEntry.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackDirEntry.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,65 @@
+package holygradle.unpacking
+
+/**
+ * Describes where and how to unpack the ZIP files for a given {@link UnpackModuleVersion}.
+ */
+class UnpackDirEntry {
+    /**
+     * The location to which to unpack all the ZIP files.
+     */
+    public final File unpackDir
+
+    /**
+     * If true, unpacking tasks should use Gradle's built-in "up-to-date checking" mechanisms to compare the files in
+     * inside the ZIP files with the files in the {@link #unpackDir} before unpacking.  Otherwise, they may use
+     * some quicker short-cut mechanism.
+     */
+    public final boolean applyUpToDateChecks
+
+    /**
+     * If true, the unpacked files should be marked as readonly; otherwise, they may be read-write.
+     */
+    public final boolean makeReadOnly
+
+    public UnpackDirEntry(File unpackDir, boolean applyUpToDateChecks, boolean makeReadOnly) {
+        this.unpackDir = unpackDir
+        this.applyUpToDateChecks = applyUpToDateChecks
+        this.makeReadOnly = makeReadOnly
+
+        if (unpackDir == null) {
+            throw new NullPointerException("unpackDir is null in UnpackEntry")
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "UnpackDirEntry{" +
+            "unpackDir=" + unpackDir +
+            ", applyUpToDateChecks=" + applyUpToDateChecks +
+            ", makeReadOnly=" + makeReadOnly +
+            '}'
+    }
+
+    @Override
+    public boolean equals(o) {
+        if (this.is(o)) return true
+        if (getClass() != o.class) return false
+
+        UnpackDirEntry that = (UnpackDirEntry) o
+
+        if (applyUpToDateChecks != that.applyUpToDateChecks) return false
+        if (makeReadOnly != that.makeReadOnly) return false
+        if (unpackDir != that.unpackDir) return false
+
+        return true
+    }
+
+    @Override
+    public int hashCode() {
+        int result
+        result = 31 * result + unpackDir.hashCode()
+        result = 31 * result + (applyUpToDateChecks ? 1 : 0)
+        result = 31 * result + (makeReadOnly ? 1 : 0)
+        return result
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackEntry.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackEntry.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackEntry.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,36 +1,22 @@
 package holygradle.unpacking
 
-class UnpackEntry {
+/**
+ * Extends {@link UnpackDirEntry} with a specific list of ZIP files.  The mulitple {@link UnpackModuleVersion} objects
+ * for the same module version (but from different configurations) should have equal {@link UnpackDirEntry} objects but
+ * may have different sets of ZIP files.  Thee contents of these ZIP files will be merged in the unpack dir.
+ */
+class UnpackEntry extends UnpackDirEntry {
     /**
      * The set of ZIP files to unpack.
      */
     public final Collection<File> zipFiles
 
-    /**
-     * The location to which to unpack all the {@link #zipFiles}.
-     */
-    public final File unpackDir
-
-    /**
-     * If true, unpacking tasks should use Gradle's built-in "up-to-date checking" mechanisms to compare the files in
-     * inside the {@link #zipFiles} with the files in the {@link #unpackDir} before unpacking.  Otherwise, they may use
-     * some quicker short-cut mechanism.
-     */
-    public final boolean applyUpToDateChecks
+    public UnpackEntry(Collection<File> zipFiles, File unpackDir, boolean applyUpToDateChecks, boolean makeReadOnly) {
+        super(unpackDir, applyUpToDateChecks, makeReadOnly)
+        this.zipFiles = zipFiles
 
-    /**
-     * If true, the unpacked files should be marked as readonly; otherwise, they may be read-write.
-     */
-    public final boolean makeReadOnly
-
-    public UnpackEntry(Collection<File> zipFiles, File unpackDir, boolean applyUpToDateChecks, boolean makeReadOnly) {
-        this.zipFiles = zipFiles
-        this.unpackDir = unpackDir
-        this.applyUpToDateChecks = applyUpToDateChecks
-        this.makeReadOnly = makeReadOnly
-
-        if (unpackDir == null) {
-            throw new NullPointerException("unpackDir is null in UnpackEntry")
+        if (zipFiles == null) {
+            throw new NullPointerException("zipFiles is null in UnpackEntry")
         }
     }
 
@@ -41,7 +27,7 @@
             ", unpackDir=" + unpackDir +
             ", applyUpToDateChecks=" + applyUpToDateChecks +
             ", makeReadOnly=" + makeReadOnly +
-            '}';
+            '}'
     }
 
     @Override
@@ -63,9 +49,7 @@
     public int hashCode() {
         int result
         result = zipFiles.hashCode()
-        result = 31 * result + unpackDir.hashCode()
-        result = 31 * result + (applyUpToDateChecks ? 1 : 0)
-        result = 31 * result + (makeReadOnly ? 1 : 0)
+        result = 31 * result + super.hashCode()
         return result
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackModuleVersion.groovy
--- a/intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackModuleVersion.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/main/groovy/holygradle/unpacking/UnpackModuleVersion.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,6 +2,8 @@
 
 import holygradle.Helper
 import holygradle.dependencies.PackedDependencyHandler
+
+import holygradle.dependencies.SourceOverrideHandler
 import org.gradle.api.Project
 import org.gradle.api.artifacts.ModuleVersionIdentifier
 import org.gradle.api.artifacts.ResolvedArtifact
@@ -14,18 +16,18 @@
     public final Map<ResolvedArtifact, Set<String>> artifacts = [:].withDefault { new HashSet<String>() }
     // The set of configurations in the containing project which lead to this module being included.
     public final Set<String> originalConfigurations = new HashSet<String>()
-    private UnpackModuleVersion parentUnpackModuleVersion
     private PackedDependencyHandler packedDependency00 = null
+    private Set<UnpackModuleVersion> parents = new HashSet<>()
 
     UnpackModuleVersion(
         Project project,
         ModuleVersionIdentifier moduleVersion,
-        UnpackModuleVersion parentUnpackModuleVersion,
+        Set<UnpackModuleVersion> parents,
         PackedDependencyHandler packedDependency00
     ) {
         this.project = project
         this.moduleVersion = moduleVersion
-        this.parentUnpackModuleVersion = parentUnpackModuleVersion
+        this.parents = parents
         this.packedDependency00 = packedDependency00
         if (packedDependency00 == null) {
             this.includeVersionNumberInPath = false
@@ -34,7 +36,7 @@
         }
 
         // Therefore we must have a parent. Not having a parent is an error.
-        if (packedDependency00 == null && parentUnpackModuleVersion == null) {
+        if (packedDependency00 == null && this.parents.size() == 0) {
             throw new RuntimeException("Module '${moduleVersion}' has no parent module.")
         }
     }
@@ -62,7 +64,10 @@
         "${moduleVersion.getGroup()}:${moduleVersion.getName()}:${moduleVersion.getVersion()}"
     }
 
-
+    public void addParents(Collection<UnpackModuleVersion> parents) {
+        this.parents.addAll(parents)
+    }
+    
     // This returns the packedDependencies entry corresponding to this dependency. This will
     // return null if no such entry exists, which would be the case if this is a transitive
     // dependency.
@@ -76,43 +81,108 @@
 
     // TODO: will need to track all parents because each one (unpacked to a different location in
     // the central cache) will need to create a link to this module in the cache.
-    public UnpackModuleVersion getParent() {
-        parentUnpackModuleVersion
+    public Collection<UnpackModuleVersion> getParents() {
+        parents
     }
 
     /**
-     * Returns an {@link UnpackEntry} object which describes how to unpack this module version in the context of the
-     * given {@code project}.  This is suitable for passing to
+     * Returns an {@link UnpackDirEntry} object which describes how and where to unpack this module version in the
+     * context of the given {@code project}.
+     * @return An {@link UnpackDirEntry} object which describes how and where to unpack this module version.
+     */
+    public UnpackDirEntry getUnpackDirEntry() {
+        return new UnpackDirEntry(
+            getUnpackDir(),
+            ShouldApplyUpToDateChecks(),
+            ShouldMakeReadonly()
+        )
+    }
+
+    /**
+     * Returns an {@link UnpackEntry} object which describes what files to unpack, and how and where, for this module
+     * version in the context of the given {@code project}.  This is suitable for passing to
      * {@link SpeedyUnpackManyTask#addEntry(ModuleVersionIdentifier,UnpackEntry)}
-     * @param project
-     * @return An {@link UnpackEntry} object which describes how to unpack this module version
+     * @return An {@link UnpackEntry} object which describes what files to unpack, and how and where, for this module
+     * version
      */
     public UnpackEntry getUnpackEntry() {
         return new UnpackEntry(
             artifacts.keySet()*.file,
             getUnpackDir(),
-            (boolean)getPackedDependency()?.shouldApplyUpToDateChecks(),
-            (boolean)getPackedDependency()?.shouldMakeReadonly()
+            ShouldApplyUpToDateChecks(),
+            ShouldMakeReadonly()
         )
     }
 
+    private boolean ShouldApplyUpToDateChecks() {
+        // If the packed dependency is null (ie if this is a transitive dependency), we should return the default
+        // value: false
+        return getPackedDependency() ? getPackedDependency().shouldApplyUpToDateChecks() : false
+    }
+
+    private boolean ShouldMakeReadonly() {
+        // If the packed dependency is null (ie if this is a transitive dependency), we should return the default
+        // value: true
+        return getPackedDependency() ? getPackedDependency().shouldMakeReadonly() : true
+    }
+
     // This returns the packedDependencies entry which configures some aspects of this module.
     // The entry could be specifically for this module, in the case where a project directly
     // specifies a dependency. Or this entry could be for a 'parent' packedDependency entry 
     // i.e. one which causes this module to be pulled in as a transitive dependency.
-    public PackedDependencyHandler getSelfOrAncestorPackedDependency() {
+    public Collection<PackedDependencyHandler> getSelfOrAncestorPackedDependencies() {
         if (packedDependency00 != null) {
-            return packedDependency00
+            return [packedDependency00]
         }
-        
+
         // If we don't return packedDependency00 above then this must be a transitive dependency.
         // Therefore we must have a parent. Not having a parent is an error.
-        if (parentUnpackModuleVersion == null) {
+        if (parents.size() == 0) {
             throw new RuntimeException("Error - module '${getFullCoordinate()}' has no parent module.")
         }
-        return parentUnpackModuleVersion.getSelfOrAncestorPackedDependency()
+
+        return parents.collectMany { p -> p.getSelfOrAncestorPackedDependencies()}
+    }
+
+    private <TSource, TValue> TValue getUniqueValue(
+        String methodName,
+        Collection<TSource> sources,
+        Closure<TValue> getValue
+    ) {
+        Map<TSource, TValue> values = sources.collectEntries { [it, getValue(it)] }
+        Collection<TValue> uniqueValues = values.values().toSet()
+
+        // If there is not exactly one result, throw an error
+        if (uniqueValues.size() != 1) {
+            throw new RuntimeException("Error - module '${getFullCoordinate()}' has different parent results for ${methodName}: ${values.collect { "${it.value} from ${it.key}" }}")
+        }
+        return uniqueValues.iterator().next()
     }
-    
+
+    private String getParentRelativePath(UnpackModuleVersion module) {
+        getUniqueValue("getParentRelativePath", parents) { UnpackModuleVersion it ->
+            it.getRelativePathForDependency(module)
+        }
+    }
+
+    private String getParentTargetPath(Project project) {
+        getUniqueValue("getParentTargetPath", parents) { UnpackModuleVersion it ->
+            it.getTargetPathInWorkspace()
+        }.toString()
+    }
+
+    private String getParentModuleVersion() {
+        getUniqueValue("getParentModuleVersion", parents) { UnpackModuleVersion it ->
+            it.moduleVersion
+        }.toString()
+    }
+
+    private String getParentModuleVersions() {
+        parents.collect {
+            it.moduleVersion
+        }.join(", ")
+    }
+
     // Return the name of the directory that should be constructed in the workspace for the unpacked artifacts. 
     // Depending on some other configuration, this directory name could be used for a link or a real directory.
     public String getTargetDirName() {
@@ -140,17 +210,18 @@
         } else {
             // If we don't return above then this must be a transitive dependency.
             // Recursively navigate up the parent hierarchy, appending relative paths.
-            return new File(
-                parentUnpackModuleVersion.targetPathInWorkspace.parentFile,
-                targetDirName
-            )
+            return getUniqueValue("getTargetPathInWorkspace", parents) { UnpackModuleVersion it ->
+                new File(it.targetPathInWorkspace.parentFile, targetDirName).canonicalFile
+            }
         }
     }
 
     // If true this module should be unpacked to the central cache, otherwise it should be unpacked
     // directly to the workspace.
     private boolean shouldUnpackToCache() {
-        getSelfOrAncestorPackedDependency().shouldUnpackToCache()
+        getUniqueValue("shouldUnpackToCache", getSelfOrAncestorPackedDependencies()) { PackedDependencyHandler it ->
+            it.shouldUnpackToCache()
+        }.booleanValue()
     }
 
     /**
@@ -158,16 +229,31 @@
      * A link should be created if
      * <ul>
      *     <li>the relevant {@code packedDependencies} entry has {@code unpackToCache = true} (the default);</li>
-     *     <li>that entry has not had {@code noCreateLinkToCache() called on it; and</li>
+     *     <li>that entry has not had {@code noCreateSymlinkToCache() called on it; and</li>
      *     <li>this module version actually has any artifacts -- if not, nothing will be unpacked in the cache, so there
-     *     will be no folder to which to make a link.</li>
- *     </ul>
-     * @return A flag indicating whether to create a link to the unpack cache for this version.
+     *     will be no folder to which to make a symlink.</li>
+     * </ul>
+     * @return A flag indicating whether to create a symlink to the unpack cache for this version.
      */
     public boolean shouldCreateLinkToCache() {
-        getSelfOrAncestorPackedDependency().shouldCreateLinkToCache() && hasArtifacts()
+        getUniqueValue("shouldCreateLinkToCache", getSelfOrAncestorPackedDependencies()) { PackedDependencyHandler it ->
+            it.shouldCreateLinkToCache()
+        }.booleanValue() && hasArtifacts()
     }
 
+    public File getLinkDir() {
+        def sourceOverrideHandler = project.rootProject.sourceOverrides.find { SourceOverrideHandler handler ->
+            handler.dummyDependencyCoordinate == fullCoordinate
+        }
+
+        if (sourceOverrideHandler != null) {
+            new File(sourceOverrideHandler.from)
+        } else {
+            getUnpackDir()
+        }
+    }
+
+
     // Return the location to which the artifacts will be unpacked. This could be to the global unpack 
     // cache or it could be to somewhere in the workspace.
     public File getUnpackDir() {
@@ -189,7 +275,7 @@
                 "n/a" :
                 packedDependency00.getFullTargetPathWithVersionNumber(moduleVersion.getVersion())
             ) +
-            "', parentUnpackModuleVersion=" + parentUnpackModuleVersion?.moduleVersion +
+            "', parentUnpackModuleVersions={" + parents + // getParentModuleVersions() +
             '}';
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/HelperTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/HelperTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/HelperTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -63,6 +63,20 @@
         checkSourceDependencies(["http://B", "http://C", "http://D"], projectA)
     }
 
+    @Test
+    public void testPathToVersion() {
+        String shortPath = "C:\\Temp"
+        String longPath = "C:\\Program Files (x86)\\Microsoft SDKs\\Cpp Azure Mobile SDK for Visual Studio 2013\\SDK\\lib\\x86\\Release"
+
+        String shortVersion = Helper.convertPathToVersion(shortPath)
+        String longVersion = Helper.convertPathToVersion(longPath)
+
+        assertThat(shortVersion, startsWith("SOURCE_"))
+        assertEquals(shortVersion.length(), 15)
+        assertThat(longVersion, startsWith("SOURCE_"))
+        assertEquals(longVersion.length(), 15)
+    }
+
     private static void checkSourceDependencies(Iterable<String> expectedUrls, Project project) {
         assertThat(
             Helper.getTransitiveSourceDependencies(project)*.url.sort().unique() as String[],
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/SettingsFileIntegrationTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/SettingsFileIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/SettingsFileIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -4,7 +4,7 @@
 import holygradle.source_dependencies.RecursivelyFetchSourceTask
 import holygradle.test.AbstractHolyGradleIntegrationTest
 import holygradle.test.WrapperBuildLauncher
-import holygradle.testUtil.HgUtil
+import holygradle.testUtil.ScmUtil
 import org.apache.commons.io.FileUtils
 import org.gradle.api.Project
 import org.gradle.testfixtures.ProjectBuilder
@@ -82,14 +82,14 @@
 
     private void initRepo(File src1Dir) {
         Project project1 = ProjectBuilder.builder().withProjectDir(src1Dir).build()
-        HgUtil.hgExec(project1, "init")
-        HgUtil.hgExec(project1, "add", "build.gradle")
-        HgUtil.hgExec(
+        ScmUtil.hgExec(project1, "init")
+        ScmUtil.hgExec(project1, "add", "build.gradle")
+        ScmUtil.hgExec(
             project1,
             "commit",
             "-m", "Initial test state.",
             "-u", "TestUser"
         )
-        HgUtil.hgExec(project1, "phase", "--public", "tip")
+        ScmUtil.hgExec(project1, "phase", "--public", "tip")
     }
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -3,6 +3,7 @@
 import holygradle.test.AbstractHolyGradleIntegrationTest
 import holygradle.test.RegressionFileHelper
 import holygradle.test.WrapperBuildLauncher
+import org.junit.Ignore
 import org.junit.Test
 
 class PackedDependenciesIntegrationTest extends AbstractHolyGradleIntegrationTest {
@@ -31,25 +32,14 @@
         final projectDir = new File(getTestDir(), "unpacking_modules_to_same_location")
         invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
             launcher.forTasks("fetchAllDependencies")
-            launcher.expectFailure(RegressionFileHelper.toStringWithPlatformLineBreaks(
-                """In root project 'unpacking_modules_to_same_location', location '${projectDir.absolutePath}\\extlib' is targeted by multiple dependencies/versions:
-    holygradle.test:example-framework:1.1 in configurations [bar]
-        which is from packed dependency sub/../extlib
-    holygradle.test:external-lib:1.1 in configurations [foo, bar]
-        which is from holygradle.test:example-framework:1.1
-        which is from packed dependency sub/../extlib
-
-FAILURE: Build failed with an exception.
-
-* What went wrong:
-Multiple different dependencies/versions are targeting the same locations."""
-            ))
+            launcher.expectFailure("""Multiple different dependencies/versions are targeting the same locations.""")
         }
     }
 
     @Test
-    public void testSameModuleVersionAtMultipleLocations() {
-        final projectDir = new File(getTestDir(), "unpacking_one_version_to_many_locations")
+    @Ignore
+    public void testSameModuleVersionInSameConfigurationAtMultipleLocations() {
+        final projectDir = new File(getTestDir(), "same_module_same_conf_multi_target")
         invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
             launcher.forTasks("fetchAllDependencies")
             launcher.expectFailure(RegressionFileHelper.toStringWithPlatformLineBreaks(
@@ -57,8 +47,17 @@
 
 * What went wrong:
 Module version holygradle.test:external-lib:1.1 is specified by packed dependencies at both path 'sub/extlib' and """ +
-"'extlib'.  A single version can only be specified at one path.  If you need it to appear at more than one " +
-"location you can explicitly create links."
+                    "'extlib'.  A single version can only be specified at one path.  If you need it to appear at more than one " +
+                    "location you can explicitly create links."
             ))
         }
-    }}
+    }
+    @Test
+    public void testSameModuleVersionInDifferentConfigurationsAtMultipleLocations() {
+        final projectDir = new File(getTestDir(), "same_module_diff_conf_multi_target")
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            // This should work, because they're in different configurations.
+        }
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/same_module_diff_conf_multi_target/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/same_module_diff_conf_multi_target/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,26 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories {
+    ivy {
+        url "..\\..\\..\\testUtil\\repository\\"
+    }
+}
+
+packedDependencies {
+    "extlib" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+    "sub/extlib" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "bar->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/same_module_same_conf_multi_target/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/same_module_same_conf_multi_target/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,25 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories {
+    ivy {
+        url "..\\..\\..\\testUtil\\repository\\"
+    }
+}
+
+packedDependencies {
+    "extlib" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+    "sub/extlib" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/unpacking_one_version_to_many_locations/build.gradle
--- a/intrepid-plugin/src/test/groovy/holygradle/dependencies/PackedDependenciesIntegrationTest/unpacking_one_version_to_many_locations/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,26 +0,0 @@
-buildscript {
-    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
-}
-gplugins.apply()
-
-configurations {
-    foo
-    bar
-}
-
-repositories {
-    ivy {
-        url "..\\..\\..\\testUtil\\repository\\"
-    }
-}
-
-packedDependencies {
-    "extlib" {
-        dependency "holygradle.test:external-lib:1.1"
-        configuration "foo->compile"
-    }
-    "sub/extlib" {
-        dependency "holygradle.test:external-lib:1.1"
-        configuration "bar->compile"
-    }
-}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,358 @@
+package holygradle.dependencies
+
+import holygradle.Helper
+import holygradle.io.Link
+import holygradle.io.FileHelper
+import holygradle.test.AbstractHolyGradleIntegrationTest
+import holygradle.test.RegressionFileHelper
+import holygradle.test.WrapperBuildLauncher
+import org.apache.commons.io.FileUtils
+import org.junit.Test
+
+import static org.junit.Assert.assertFalse
+import static org.junit.Assert.assertTrue
+
+class ReplaceWithSourceIntegrationTest extends AbstractHolyGradleIntegrationTest {
+    @Test
+    public void twoLevels() {
+        String projectName = "projectA"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "external-lib")
+
+        if (projectDir.exists()) {
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+        }
+
+        File sourceFile1 = new File(frameworkDirectory, "a_source_file.txt")
+
+        File sourceFile2 = new File(externalDirectory, "another_source_file.txt")
+
+        assertTrue("Dependency 1 is correctly linked to source", sourceFile1.exists())
+        assertTrue("Dependency 2 is correctly linked to source", sourceFile2.exists())
+    }
+
+    @Test
+    public void oneLevelWithNestedSourceDependencies() {
+        String projectName = "projectB"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File frameworkDirectory = new File(projectDir, "framework")
+        File anotherDirectory = new File(projectDir, "another-lib")
+        File externalDirectory = new File(projectDir, "external-lib")
+
+        if (projectDir.exists()) {
+            Link.delete(frameworkDirectory)
+            Link.delete(anotherDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+        }
+
+        File sourceFile1 = new File(frameworkDirectory, "a_source_file.txt")
+
+        assertTrue("Dependency 1 is correctly linked to source", sourceFile1.exists())
+        assertTrue("Dependency 2 is correctly linked to another-lib via source", anotherDirectory.exists())
+        assertFalse("Dependency 2 is correctly not linked to external-lib via binary", externalDirectory.exists())
+    }
+
+    @Test
+    public void oneLevelWithNestedSourceVersionConflict() {
+        String projectName = "projectC"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure(
+                "Could not resolve all dependencies for configuration ':bar'.",
+                "A conflict was found between the following modules:",
+                "- holygradle.test:external-lib:1.0",
+                "- holygradle.test:external-lib:1.1"
+            )
+        }
+    }
+
+    @Test
+    public void oneLevelWithNestedSourceVersionConflictMultipleConfigurations() {
+        String projectName = "projectD"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "ext_11")
+        File externalLibDirectory = new File(projectDir, "external-lib")
+
+        if (projectDir.exists()) {
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            Link.delete(externalLibDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+        }
+    }
+
+    /**
+     * This tests that, if you have two source overrides, and one has a dependency on a different (non-overridden)
+     * version of the other in some connected configurations, then we spot that conflict and fail the build.
+     */
+    @Test
+    public void incompatibleTransitiveDependencies() {
+        String projectName = "projectE"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File applicationDirectory = new File(projectDir, "application")
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(applicationDirectory)
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        String expectedDummyVersion =
+            Helper.convertPathToVersion(new File(projectDir, "../" + projectName + "source/ext-1.1").toString())
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure(
+                    """Caused by: org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.VersionConflictException: A conflict was found between the following modules:""")
+
+            // This error message has changed. It would be better to include the following lines in the expected error message:
+            //"""\n - holygradle.test:external-lib:${expectedDummyVersion}""" +
+            //"""\n - holygradle.test:external-lib:1.0""")
+        }
+    }
+
+    /**
+     * This tests that, if you have two source overrides, and each both have a dependency on a different
+     * (non-overridden) version of the same module in some connected configurations, then we spot that conflict and fail
+     * the build.
+     */
+    @Test
+    public void incompatibleSourceOverrideTransitiveDependencies() {
+        String projectName = "projectJ"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File applicationDirectory = new File(projectDir, "application")
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(applicationDirectory)
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure(
+                    """Caused by: org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.VersionConflictException: A conflict was found between the following modules:""")
+
+            // This error message has changed. It would be better to include the following lines in the expected error message:
+            //"""\n - holygradle.test:external-lib:1.1""" +
+            //"""\n - holygradle.test:external-lib:1.0""")
+        }
+    }
+
+    /**
+     * This tests that, if you have a direct dependency on one (non-overridden) version of a module, and a source
+     * override of another module which has a direct dependency on a different (non-overridden) version of that module,
+     * then we spot that conflict and fail the build.
+     */
+    @Test
+    public void incompatibleDirectVsSourceOverrideTransitiveDependencies() {
+        String projectName = "projectK"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File applicationDirectory = new File(projectDir, "application")
+        File frameworkDirectory = new File(projectDir, "framework")
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(applicationDirectory)
+            Link.delete(frameworkDirectory)
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure(
+                    """Caused by: org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.VersionConflictException: A conflict was found between the following modules:""")
+
+                    // This error message has changed. It would be better to include the following lines in the expected error message:
+                    //"""\n - holygradle.test:external-lib:1.1""" +
+                    //"""\n - holygradle.test:external-lib:1.0""")
+        }
+    }
+
+    @Test
+    public void customIvyFileGenerator() {
+        String projectName = "projectF"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        File customFile = new File(externalDirectory, "custom")
+        File sourceOverrideFile = new File(externalDirectory, "generateSourceOverrideDetails")
+        File gradlewFile = new File(externalDirectory, "gradlew")
+
+        if (projectDir.exists()) {
+            customFile.delete()
+            sourceOverrideFile.delete()
+            gradlewFile.delete()
+
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+        }
+
+        assertTrue(customFile.exists())
+        assertFalse(sourceOverrideFile.exists())
+        assertFalse(gradlewFile.exists())
+    }
+
+    @Test
+    public void gradlewBatIvyFileGeneratorFallback() {
+        String projectName = "projectG"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File externalDirectory = new File(projectDir, "ext_11")
+        File gradlewFile = new File(externalDirectory, "gradlew")
+
+        if (projectDir.exists()) {
+            gradlewFile.delete()
+
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+        }
+
+        assertTrue(gradlewFile.exists())
+        assertTrue(gradlewFile.text.contains("generateDescriptorFileForIvyPublication"))
+        assertTrue(gradlewFile.text.contains("summariseAllDependencies"))
+    }
+
+    @Test
+    public void noIvyFileGeneration() {
+        String projectName = "projectH"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(externalDirectory)
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure(
+                "No Ivy file generation available for 'ext_11'. Please ensure your source override contains " +
+                "a generateSourceOverrideDetails.bat, or a compatible gradlew.bat, " +
+                "or else provide a custom generation method in your build.gradle"
+            )
+        }
+    }
+
+    @Test
+    public void failsWithNoUnpackToCache() {
+        String projectName = "projectI"
+        File templateDir = new File(getTestDir(), projectName + "In")
+        File projectDir = new File(getTestDir(), projectName)
+        File externalDirectory = new File(projectDir, "ext_11")
+
+        if (projectDir.exists()) {
+            Link.delete(externalDirectory)
+            externalDirectory.delete()
+            FileHelper.ensureDeleteDirRecursive(projectDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+        copySourceFiles(projectName)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+            launcher.expectFailure("A source override can not be applied to a packed dependency with unpackToCache = false")
+        }
+    }
+
+    @Test
+    public void cantPublishWithSourceOverrides() {
+        // Todo
+    }
+
+    @Test
+    public void overrideIsNotAPackedDependency() {
+        // Todo: Decide what to do in this case
+    }
+
+    private void copySourceFiles(String project) {
+        File templateDir = new File(getTestDir(), "sourceIn")
+        File sourceDir = new File(getTestDir(), project + "source")
+
+        if (sourceDir.exists()) {
+            FileHelper.ensureDeleteDirRecursive(sourceDir)
+        }
+
+        FileUtils.copyDirectory(templateDir, sourceDir)
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectEIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectEIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,39 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that the transitive dependencies of a source override are correctly checked against 
+// local dependencies. This will happen if a source override resolves dependencies differently
+// to the local project (e.g. if it has different repos configured or uses source dependencies).
+sourceOverrides {
+    "application" {
+        dependency "holygradle.test:example-application:1.0"
+        from "../projectEsource/application-1.0"
+    }
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.0"
+        from "../projectEsource/ext-1.1"
+    }
+}
+
+packedDependencies {
+    "application" {
+        dependency "holygradle.test:example-application:1.0"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.0"
+        configuration "bar->compile,compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectFIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectFIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,41 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that if a custom ivy file generator exists then it is used instead of 
+// generateSourceOverrideDetails.bat or gw.bat
+sourceOverrides {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        from "../projectFsource/ext-1.1-bat"
+        ivyFileGenerator { handler ->
+            File customFile = new File(handler.from, "custom")
+            customFile.text = "PASS"
+            println("Custom File: ${customFile}")
+            
+            println("+"*30)
+            println("Ivy File: ${new File(handler.from, "build/publications/ivy/ivy.xml")}")
+            return [
+                new File(handler.from, "build/publications/ivy/ivy.xml"),
+                new File(handler.from, "all-dependencies.xml")
+            ]
+        }
+    }
+}
+
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectGIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectGIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,29 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that if a custom ivy file generator exists then it is used instead of 
+// generateSourceOverrideDetails.bat or gw.bat
+sourceOverrides {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        from "../projectGsource/ext-1.1-gwbat"
+    }
+}
+
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectHIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectHIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,29 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that a build fails if there is no ivy file generation method available in a source
+// override.
+sourceOverrides {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        from "../projectHsource/ext-1.1-nobat"
+    }
+}
+
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectIIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectIIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,30 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that a build fails if there is no ivy file generation method available in a source
+// override.
+sourceOverrides {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        from "../projectIsource/ext-1.1"
+    }
+}
+
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+        unpackToCache = false
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectJIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectJIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,38 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that the transitive dependencies of a source override are correctly checked against 
+// transitive dependencies of other source overrides.
+sourceOverrides {
+    "application" {
+        dependency "holygradle.test:example-application:1.0"
+        from "../projectJsource/application-1.0"
+    }
+    "framework" {
+        dependency "holygradle.test:another-application:1.0"
+        from "../projectJsource/another-application-1.0-alt-1.1"
+    }
+}
+
+packedDependencies {
+    "application" {
+        dependency "holygradle.test:example-application:1.0"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+    "framework" {
+        dependency "holygradle.test:another-application:1.0"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectKIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/ProjectKIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,34 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// This tests that the transitive dependencies of a source override are correctly checked against 
+// transitive dependencies of other source overrides.
+sourceOverrides {
+    "framework" {
+        dependency "holygradle.test:another-application:1.0"
+        from "../projectKsource/another-application-1.0-alt-1.1"
+    }
+}
+
+packedDependencies {
+    "external-lib" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "bar->compile"
+    }
+    "framework" {
+        dependency "holygradle.test:another-application:1.0"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectAIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectAIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,34 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+sourceOverrides {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        from "../projectAsource/ext-1.1"
+    }
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        from "../projectAsource/framework-1.1"
+    }
+}
+
+// This is testing two levels of source override where the modules are in the same configuration.
+// The external library should be overridden despite being a transitive dependency of framework 1.1.
+packedDependencies {
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectBIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectBIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,31 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+sourceOverrides {
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        from "../projectBsource/framework-1.1-altlib-1.0"
+    }
+}
+
+// This is testing one level of source override where the overridden module has it's own 
+// dependencies. We should see the binary dependencies of the replaced source, not the binary
+// dependencies of this binary module.
+packedDependencies {
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectCIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectCIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,34 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+sourceOverrides {
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        from "../projectCsource/framework-1.1-extlib-1.0"
+    }
+}
+
+// This is testing one level of source override in the same configuration with another dependency
+// where the version differs. This should fail at dependency resolution time.
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "bar->compile"
+    }
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectDIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/projectDIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,34 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+    project.buildDir = new File(System.getProperty("java.io.tmpdir"), "gradle/${project.name}")
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+sourceOverrides {
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        from "../projectDsource/framework-1.1-extlib-1.0"
+    }
+}
+
+// This is testing one level of source override in a different configuration with another dependency
+// where the version differs. This should fail at symlink creation time.
+packedDependencies {
+    "ext_11" {
+        dependency "holygradle.test:external-lib:1.1"
+        configuration "foo->compile"
+    }
+    "framework" {
+        dependency "holygradle.test:example-framework:1.1"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/a_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/a_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+  <Configuration name="compileVc10Debug">
+    <Dependency name="another-framework" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="compileVc10Release">
+    <Dependency name="another-framework" group="holygradle.test" version="1.0" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="everything">
+    <Dependency name="another-framework" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="another-framework" group="holygradle.test" version="1.0" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.0" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="source"/>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="another-application" revision="1.0" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="another-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="another-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="another-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="another-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+	<dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+	<dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="another-application" revision="1.0" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="another-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="another-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="another-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="another-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/another-application-1.0-alt-1.1/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/a_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/a_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+  <Configuration name="compileVc10Debug">
+    <Dependency name="example-framework" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.1" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="compileVc10Release">
+    <Dependency name="example-framework" group="holygradle.test" version="1.0" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.1" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="everything">
+    <Dependency name="example-framework" group="holygradle.test" version="1.0" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="example-framework" group="holygradle.test" version="1.0" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.1" configuration="compileVc10Debug" isSource="false" absolutePath=""/>
+    <Dependency name="external-lib" group="holygradle.test" version="1.1" configuration="compileVc10Release" isSource="false" absolutePath=""/>
+  </Configuration>
+  <Configuration name="source"/>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-application" revision="1.0" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-application" revision="1.0" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/application-1.0/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/another_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/another_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/publications/ivy/ivy-old.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/publications/ivy/ivy-old.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20150820161044"/>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+echo FAIL > generateSourceOverrideDetails
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/gradlew.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-bat/gradlew.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+echo FAIL > gradlew
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/another_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/another_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/publications/ivy/ivy-old.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/publications/ivy/ivy-old.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20150820161044"/>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/gradlew.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-gwbat/gradlew.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+echo %* > gradlew
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-nobat/another_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1-nobat/another_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/another_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/another_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/publications/ivy/ivy-old.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/publications/ivy/ivy-old.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20150820161044"/>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="external-lib" revision="1.1" status="release" publication="20130319123748"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile,testRuntime"/>
+    <conf name="testRuntime" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="external-lib-Debug" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-Release" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-src" type="zip" ext="zip" conf="compile"/>
+    <artifact name="external-lib-buildScript" type="zip" ext="zip" conf="everything"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/ext-1.1/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/a_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/a_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="another-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="another-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="another-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="another-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-altlib-1.0/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/a_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/a_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1-extlib-1.0/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/a_source_file.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/a_source_file.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+Source Code!
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/all-dependencies.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/all-dependencies.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configurations>
+</Configurations>
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/holygradle/flat-ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/holygradle/flat-ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/publications/ivy/ivy.empty.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/publications/ivy/ivy.empty.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20150820161044"/>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/publications/ivy/ivy.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/build/publications/ivy/ivy.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-framework" revision="1.1" status="release" publication="20130321140835"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.1" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/generateSourceOverrideDetails.bat
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/ReplaceWithSourceIntegrationTest/sourceIn/framework-1.1/generateSourceOverrideDetails.bat	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,47 @@
+package holygradle.dependencies
+
+import com.google.common.io.Files
+import holygradle.io.FileHelper
+import holygradle.test.AbstractHolyGradleIntegrationTest
+import holygradle.test.WrapperBuildLauncher
+import org.apache.commons.io.FileUtils
+import org.junit.Test
+
+import static org.junit.Assert.assertTrue
+
+/**
+ * Integration tests for {@link holygradle.dependencies.SummariseAllDependenciesTask}
+ */
+class SummariseAllDependenciesIntegrationTest extends AbstractHolyGradleIntegrationTest {
+    @Test
+    public void test() {
+        File templateDir = new File(getTestDir(), "projectAIn")
+        File projectDir = new File(getTestDir(), "projectA")
+
+        File outputFile = new File(projectDir, "build/holygradle/flat-ivy.xml")
+
+        if (projectDir.exists()) {
+            assertTrue("Removed existing ${projectDir}", projectDir.deleteDir())
+        }
+
+        FileUtils.copyDirectory(templateDir, projectDir)
+
+        invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("summariseAllDependencies")
+        }
+
+        assertTrue(outputFile.exists())
+        println(regression.getOkFile("FlatIvyXml"))
+        Files.copy(outputFile, regression.getTestFile("FlatIvyXml"))
+
+        regression.replacePatterns(
+            "FlatIvyXml",
+            [
+                (~/revision="(.+?)"/): "revision=\"dummy\"",
+                (~/publication="([0-9]+)"/): "publication=\"dummy\""
+            ]
+        )
+
+        regression.checkForRegression("FlatIvyXml")
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,29 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+}
+gplugins.apply()
+
+configurations {
+    foo
+    bar
+}
+
+repositories.ivy {
+    url "..\\..\\..\\testUtil\\repository\\"
+}
+
+// We just need a source dependency to make sure it gets represented as a dependency in the flat-ivy.xml, so we don't
+// really need to fetch anything.
+sourceDependencies {
+    "subproj" {
+        hg "https://dummy-url/"
+        configuration "foo->foo"
+    }
+}
+
+packedDependencies {
+    "application" {
+        dependency "holygradle.test:example-application:1.0"
+        configuration "bar->compileVc10Debug,compileVc10Release"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/settings.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+include 'subproj'
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/subproj/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest/ProjectAIn/subproj/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,19 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories.ivy {
+    url "..\\..\\..\\..\\testUtil\\repository\\"
+}
+
+packedDependencies {
+    "another-lib" {
+        dependency "holygradle.test:another-lib:1.0"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest_FlatIvyXml.ok.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/dependencies/SummariseAllDependenciesIntegrationTest_FlatIvyXml.ok.txt	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,18 @@
+<ivy-module version="2.0">
+  <info organisation="" module="projectA" revision="dummy" status="release" publication="dummy"/>
+  <configurations>
+    <conf name="buildScript" visibility="public"/>
+    <conf name="foo" visibility="public"/>
+    <conf name="bar" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="projectA-buildScript" type="zip" ext="zip" conf="buildScript"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="example-application" version="1.0" conf="bar-&gt;compileVc10Debug,compileVc10Release" transitive="false"/>
+    <dependency org="holygradle.test" name="example-framework" version="1.0" conf="bar-&gt;compileVc10Debug,compileVc10Release" transitive="false"/>
+    <dependency org="holygradle.test" name="external-lib" version="1.0" conf="bar-&gt;compile" transitive="false"/>
+    <dependency org="projectA" name="subproj" version="unspecified" conf="foo-&gt;foo" transitive="false"/>
+    <dependency org="holygradle.test" name="another-lib" version="1.0" conf="foo-&gt;compile" transitive="false"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/links/LinksToCacheTaskTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/links/LinksToCacheTaskTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/links/LinksToCacheTaskTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -2,6 +2,7 @@
 
 import holygradle.dependencies.PackedDependenciesSettingsHandler
 import holygradle.dependencies.PackedDependencyHandler
+import holygradle.dependencies.SourceOverrideHandler
 import holygradle.test.AbstractHolyGradleTest
 import holygradle.unpacking.DummyBuildScriptDependencies
 import holygradle.unpacking.UnpackModuleVersion
@@ -11,7 +12,6 @@
 import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Test
 import static org.junit.Assert.*
-import static org.hamcrest.core.IsEqual.*
 
 class LinksToCacheTaskTest extends AbstractHolyGradleTest {
     /**
@@ -34,7 +34,7 @@
         UnpackModuleVersion version = new UnpackModuleVersion(
             project,
             new DefaultModuleVersionIdentifier("org", moduleName, moduleVersion),
-            parent,
+            ((parent == null) ? [] : [parent]).toSet(),
             (parent == null) ? new PackedDependencyHandler(moduleName) : null
         )
         if (addDummyArtifact) {
@@ -49,6 +49,8 @@
         PackedDependenciesSettingsHandler.findOrCreatePackedDependenciesSettings(project).unpackedDependenciesCacheDir =
             new File("theUnpackCache")
         project.ext.buildScriptDependencies = new DummyBuildScriptDependencies(project)
+        project.extensions.create("packedDependenciesDefault", PackedDependencyHandler, "rootDefault")
+        SourceOverrideHandler.createContainer(project)
         project
     }
 
@@ -65,10 +67,11 @@
         UnpackModuleVersion apricot = getUnpackModuleVersion("apricot", "1.1")
 
         LinksToCacheTask task = makeLinksTask(project)
-        task.addUnpackModuleVersionWithAncestors(apricot)
+        task.addUnpackModuleVersion(apricot)
 
-        Collection<UnpackModuleVersion> versions = task.getOrderedVersions()
-        assertThat("Expected versions to be linked", versions.toArray(), equalTo([apricot].toArray()))
+        List<String> expectedLinkParts = ["apricot-1.1"]
+        Map<File, File> links = task.getLinks()
+        assertLinksMatch(links, expectedLinkParts)
     }
 
     /**
@@ -80,45 +83,46 @@
         UnpackModuleVersion apricot = getUnpackModuleVersion("apricot", "1.1", null, false)
 
         LinksToCacheTask task = makeLinksTask(project)
-        task.addUnpackModuleVersionWithAncestors(apricot)
+        task.addUnpackModuleVersion(apricot)
 
-        Collection<UnpackModuleVersion> versions = task.getOrderedVersions()
-        assertThat("Expected versions to be linked", versions.toArray(), equalTo([].toArray()))
+        List<String> expectedLinkParts = []
+        Map<File, File> links = task.getLinks()
+        assertLinksMatch(links, expectedLinkParts)
     }
 
     /**
-     * Test that the task returns the expected set of versions to create links for, when there are two versions, one
-     * a dependency of another.
+     * Test that the task returns the expected set of versions to create links for, when there are multiple versions.
      */
     @Test
-    public void testOneChildWithVersionsAddedInOrder() {
+    public void testMultipleVersions() {
         Project project = getProject()
         UnpackModuleVersion coconut = getUnpackModuleVersion("coconut", "1.3")
         UnpackModuleVersion date = getUnpackModuleVersion("date", "1.4", coconut)
 
-        LinksToCacheTask taskWithVersionsAddedInOrder = makeLinksTask(project)
-        taskWithVersionsAddedInOrder.addUnpackModuleVersionWithAncestors(coconut)
-        taskWithVersionsAddedInOrder.addUnpackModuleVersionWithAncestors(date)
+        LinksToCacheTask task = makeLinksTask(project)
+        task.addUnpackModuleVersion(coconut)
+        task.addUnpackModuleVersion(date)
 
-        Collection<UnpackModuleVersion> versions = taskWithVersionsAddedInOrder.getOrderedVersions()
-        assertThat("Expected versions to be linked", versions.toArray(), equalTo([coconut, date].toArray()))
+        List<String> expectedLinkParts = ["coconut-1.3", "date-1.4"]
+        Map<File, File> links = task.getLinks()
+        assertLinksMatch(links, expectedLinkParts)
     }
 
-    /**
-     * Test that the task returns the expected set of versions to create links for, when there are two versions, one
-     * a dependency of another, and the versions happen to be added out-of-order.
-     */
-    @Test
-    public void testOneChildWithVersionsAddedOutOfOrder() {
-        Project project = getProject()
-        UnpackModuleVersion coconut = getUnpackModuleVersion("coconut", "1.3")
-        UnpackModuleVersion date = getUnpackModuleVersion("date", "1.4", coconut)
-
-        LinksToCacheTask taskWithVersionsAddedInOrder = makeLinksTask(project)
-        taskWithVersionsAddedInOrder.addUnpackModuleVersionWithAncestors(date)
-        taskWithVersionsAddedInOrder.addUnpackModuleVersionWithAncestors(coconut)
-
-        Collection<UnpackModuleVersion> versions = taskWithVersionsAddedInOrder.getOrderedVersions()
-        assertThat("Expected versions to be linked", versions.toArray(), equalTo([coconut, date].toArray()))
+    private void assertLinksMatch(Map<File, File> links, Collection<String> expectedLinkParts) {
+        Set<String> remainingLinkParts = new HashSet<>()
+        remainingLinkParts.addAll(expectedLinkParts)
+        boolean linksMissing = false
+        links.each { File linkDir, File targetDir ->
+            def matchingExpectation = remainingLinkParts.find { targetDir.path.contains(it) }
+            if (matchingExpectation == null) {
+                linksMissing = true
+            } else {
+                remainingLinkParts.remove(matchingExpectation)
+            }
+        }
+        assertTrue(
+            "Expected links with targets matching ${expectedLinkParts} but got ${links}",
+            !linksMissing && remainingLinkParts.empty
+        )
     }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactBuildScriptHandlerIntegrationTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactBuildScriptHandlerIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactBuildScriptHandlerIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -4,7 +4,7 @@
 import holygradle.source_dependencies.RecursivelyFetchSourceTask
 import holygradle.test.AbstractHolyGradleIntegrationTest
 import holygradle.test.WrapperBuildLauncher
-import holygradle.testUtil.HgUtil
+import holygradle.testUtil.ScmUtil
 import org.gradle.api.Project
 import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Rule
@@ -84,12 +84,12 @@
         // Set up the project dir as a Mercurial repo.
         Project project = ProjectBuilder.builder().withProjectDir(projectADir).build()
         // Make the project dir into a repo, then add the extension.
-        HgUtil.hgExec(project, "init")
+        ScmUtil.hgExec(project, "init")
 
         // Add a file.
-        HgUtil.hgExec(project, "add", "build.gradle")
+        ScmUtil.hgExec(project, "add", "build.gradle")
         // Set the commit message, user, and date, so that the hash will be the same every time.
-        HgUtil.hgExec(
+        ScmUtil.hgExec(
             project,
             "commit",
             "-m", "Initial test state.",
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactsIntegrationTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactsIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/packaging/PackageArtifactsIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -5,7 +5,7 @@
 import holygradle.source_dependencies.RecursivelyFetchSourceTask
 import holygradle.test.AbstractHolyGradleIntegrationTest
 import holygradle.test.WrapperBuildLauncher
-import holygradle.testUtil.HgUtil
+import holygradle.testUtil.ScmUtil
 import org.apache.commons.io.FileUtils
 import org.gradle.api.Project
 import org.gradle.api.file.FileTree
@@ -80,10 +80,10 @@
         // Create a dummy project to provide access to FileTree methods
         Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
 
-        HgUtil.hgExec(project, "init", "srcDep1")
-        HgUtil.hgExec(project, "init", "srcDep2")
-        HgUtil.hgExec(project, "init", "noBuildFile")
-        HgUtil.hgExec(project, "init")
+        ScmUtil.hgExec(project, "init", "srcDep1")
+        ScmUtil.hgExec(project, "init", "srcDep2")
+        ScmUtil.hgExec(project, "init", "noBuildFile")
+        ScmUtil.hgExec(project, "init")
 
         // Run fAD to make sure the settings.gradle and settings-subprojects.txt are created.
         // First for srcDep1 ...
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest/projectA/build.gradle
--- a/intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest/projectA/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest/projectA/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -4,8 +4,8 @@
 gplugins.apply()
 
 configurations {
-    compile
-    runtime
+    compile { description = "Compile-time stuff" }
+    runtime { description = "Runtime stuff" }
 }
 
 group = "happydays"
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest_ProjectA_IvyXml.ok.txt
--- a/intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest_ProjectA_IvyXml.ok.txt	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/publishing/DefaultPublishPackagesExtensionIntegrationTest_ProjectA_IvyXml.ok.txt	Fri May 03 13:55:15 2019 +0100
@@ -3,8 +3,8 @@
   <info organisation="happydays" module="projectA" revision="3.3.3" status="release" publication="[timestamp]"/>
   <configurations>
     <conf name="buildScript" visibility="public"/>
-    <conf name="compile" visibility="public"/>
-    <conf name="runtime" visibility="public"/>
+    <conf name="compile" visibility="public" description="Compile-time stuff"/>
+    <conf name="runtime" visibility="public" description="Runtime stuff"/>
   </configurations>
   <publications>
     <artifact name="projectA-buildScript" type="zip" ext="zip" conf="buildScript"/>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/GitDependencyTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/scm/GitDependencyTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/GitDependencyTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,17 +1,16 @@
 package holygradle.scm
 
-import holygradle.buildscript.BuildScriptDependencies
+import holygradle.custom_gradle.plugin_apis.CredentialSource
+import holygradle.custom_gradle.plugin_apis.CredentialStore
+import holygradle.custom_gradle.plugin_apis.Credentials
 import holygradle.source_dependencies.SourceDependencyHandler
 import holygradle.test.AbstractHolyGradleTest
-import holygradle.testUtil.ExecUtil
 import org.gradle.api.Project
 import org.gradle.process.ExecSpec
 import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Test
 
-import static org.junit.Assert.*
-import static org.hamcrest.CoreMatchers.*;
-
+import static org.junit.Assert.assertEquals
 /**
  * Unit tests for {@link holygradle.scm.GitDependency}
  */
@@ -20,42 +19,78 @@
     public void test() {
         File projectDir = new File(getTestDir(), "project")
         Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
+
+        // Set up stub/spy objects.
+        String storedCredentialKey = null
+        Credentials storedCredentials = null
+        CredentialStore spyStore = [
+            writeCredential : { key, credentials ->
+                storedCredentialKey = key
+                storedCredentials = credentials
+            }
+        ] as CredentialStore
+        final String dummyUser = "dummy_user"
+        final String dummyPassword = "dummy_password"
+        project.extensions.add("my", [
+            getCredentialStore : { spyStore },
+            getUsername : { dummyUser },
+            getPassword : { dummyPassword },
+            username : { String credentialBasis -> dummyUser },
+            password : { String credentialBasis -> dummyPassword }
+        ] as CredentialSource)
         final String depDirName = "dep"
         final File depDir = new File(projectDir, depDirName)
+        final String dummyUrlString = "https://dummy_url"
         SourceDependencyHandler sourceDependencyHandler = new SourceDependencyHandler(depDirName, project)
-        sourceDependencyHandler.git "dummy_url@dummy_node"
+        sourceDependencyHandler.git "${dummyUrlString}@dummy_node"
         sourceDependencyHandler.branch = "some_branch"
-        // We're not checking out from a URL which requires authentication, so we can get away with not really setting
-        // up the BuildScriptDependencies.
-        BuildScriptDependencies buildScriptDependencies = BuildScriptDependencies.initialize(project)
 
-        // Set up a stub GitCommand which just records what calls were made.
-        List<ExecSpec> stubSpecs = []
-        final Command gitCommand = [
-            execute : { Closure configure ->
-                ExecSpec stubSpec = ExecUtil.makeStubExecSpec()
-                stubSpecs.add(stubSpec)
-                configure(stubSpec)
-                return ""
-            }
-        ] as Command
+        // Set up stub commands which just record what calls were made.  I would use Mockito for this but I don't want
+        // to check the arguments directly, I want to check the result of applying the closure arguments to something
+        // else.  I could do that with Mockito but it would probably take as much code effort, if not more.
+        final List<StubCommand.Effect> effects = []
+        final StubCommand gitCommand = new StubCommand('git', effects, { ExecSpec spec ->
+            def value = (spec.args == ['config', '--get', 'credential.helper']) ? "dummy_helper" : ""
+            return [0, value]
+        })
 
         GitDependency dependency = new GitDependency(
             project,
             sourceDependencyHandler,
-            buildScriptDependencies,
             gitCommand
         )
-        dependency.Checkout()
+        dependency.checkout()
+
+        println "StubCommand calls:"
+        effects.each { println it }
+        assertEquals("Expected number of calls", 3, effects.size())
 
-        ExecSpec cloneSpec = stubSpecs[0]
-        List<String> expectedCloneArgs = ["clone", "--branch", "some_branch", "--", "dummy_url", depDir.absolutePath]
-        assertThat("clone args", cloneSpec.args, is(equalTo(expectedCloneArgs as List<String>)))
-        assertEquals("clone working dir", projectDir.absolutePath, cloneSpec.workingDir.absolutePath)
+        List<String> configArgs = ["config", "--get", "credential.helper"]
+        assertEquals(
+            "Get the Git credential.helper config value",
+            gitCommand.makeEffect(configArgs, projectDir.absoluteFile, false),
+            effects[0]
+        )
 
-        ExecSpec updateSpec = stubSpecs[1]
-        assertThat("update args", updateSpec.args, is(equalTo(["checkout", "dummy_node"] as List<String>)))
-        assertEquals("update dir", depDir.absolutePath, updateSpec.workingDir.absolutePath)
+        final URL parsedUrl = new URL(dummyUrlString)
+        final String repoScheme = parsedUrl.getProtocol()
+        final String repoHost = parsedUrl.getHost()
+        final String credentialName = "git:${repoScheme}://${repoHost}"
+        assertEquals("Cached credential key", credentialName, storedCredentialKey)
+        assertEquals("Cached credentials", new Credentials(dummyUser, dummyPassword), storedCredentials)
+
+        List<String> cloneArgs = ["clone", "--branch", "some_branch", "--", dummyUrlString, depDir.absolutePath]
+        assertEquals(
+            "Clone the repo",
+            gitCommand.makeEffect(cloneArgs, projectDir.absoluteFile, null),
+            effects[1]
+        )
+
+        List<String> checkoutArgs = ["checkout", "dummy_node"]
+        assertEquals(
+            "Checkout the branch",
+            gitCommand.makeEffect(checkoutArgs, depDir.absoluteFile, null),
+            effects[2]
+        )
     }
-
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/HgDependencyTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/scm/HgDependencyTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/HgDependencyTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,17 +1,16 @@
 package holygradle.scm
 
-import holygradle.buildscript.BuildScriptDependencies
+import holygradle.custom_gradle.plugin_apis.CredentialSource
+import holygradle.custom_gradle.plugin_apis.CredentialStore
+import holygradle.custom_gradle.plugin_apis.Credentials
 import holygradle.source_dependencies.SourceDependencyHandler
 import holygradle.test.AbstractHolyGradleTest
-import holygradle.testUtil.ExecUtil
 import org.gradle.api.Project
 import org.gradle.process.ExecSpec
 import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Test
 
-import static org.junit.Assert.*
-import static org.hamcrest.CoreMatchers.*;
-
+import static org.junit.Assert.assertEquals
 /**
  * Unit tests for {@link holygradle.scm.HgDependency}
  */
@@ -20,42 +19,78 @@
     public void test() {
         File projectDir = new File(getTestDir(), "project")
         Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
+
+        // Set up stub/spy objects.
+        String storedCredentialKey = null
+        Credentials storedCredentials = null
+        CredentialStore spyStore = [
+            writeCredential : { key, credentials ->
+                storedCredentialKey = key
+                storedCredentials = credentials
+            }
+        ] as CredentialStore
+        final String dummyUser = "dummy_user"
+        final String dummyPassword = "dummy_password"
+        project.extensions.add("my", [
+            getCredentialStore : { spyStore },
+            getUsername : { dummyUser },
+            getPassword : { dummyPassword },
+            username : { String credentialBasis -> dummyUser },
+            password : { String credentialBasis -> dummyPassword }
+        ] as CredentialSource)
         final String depDirName = "dep"
         final File depDir = new File(projectDir, depDirName)
+        final String dummyUrlString = "https://dummy_url"
         SourceDependencyHandler sourceDependencyHandler = new SourceDependencyHandler(depDirName, project)
-        sourceDependencyHandler.hg "dummy_url@dummy_node"
+        sourceDependencyHandler.hg "${dummyUrlString}@dummy_node"
         sourceDependencyHandler.branch = "some_branch"
-        // We're not checking out from a URL which requires authentication, so we can get away with not really setting
-        // up the BuildScriptDependencies.
-        BuildScriptDependencies buildScriptDependencies = BuildScriptDependencies.initialize(project)
 
-        // Set up a stub HgCommand which just records what calls were made.
-        List<ExecSpec> stubSpecs = []
-        final Command hgCommand = [
-            execute : { Closure configure ->
-                ExecSpec stubSpec = ExecUtil.makeStubExecSpec()
-                stubSpecs.add(stubSpec)
-                configure(stubSpec)
-                return ""
+        // Set up stub commands which just record what calls were made.  I would use Mockito for this but I don't want
+        // to check the arguments directly, I want to check the result of applying the closure arguments to something
+        // else.  I could do that with Mockito but it would probably take as much code effort, if not more.
+        final List<StubCommand.Effect> effects = []
+        final StubCommand hgCommand = new StubCommand('hg', effects, { ExecSpec spec ->
+            if (storedCredentials == null) {
+                return [1, "In test: Credentials not cached yet"]
             }
-        ] as Command
+            return [0, ""]
+        })
 
         HgDependency dependency = new HgDependency(
             project,
             sourceDependencyHandler,
-            buildScriptDependencies,
             hgCommand
         )
-        dependency.Checkout()
+        dependency.checkout()
+
+        println "StubCommand calls:"
+        effects.each { println it }
+        assertEquals("Expected number of calls", 3, effects.size())
+
+        List<String> cloneArgs = ["clone", "--branch", "some_branch", "--", dummyUrlString, depDir.absolutePath]
+        assertEquals(
+            "Clone the repo (failing)",
+            hgCommand.makeEffect(cloneArgs, projectDir.absoluteFile, null),
+            effects[0]
+        )
 
-        ExecSpec cloneSpec = stubSpecs[0]
-        List<String> expectedCloneArgs = ["clone", "--branch", "some_branch", "--", "dummy_url", depDir.absolutePath]
-        assertThat("clone args", cloneSpec.args, is(equalTo(expectedCloneArgs as List<String>)))
-        assertEquals("clone working dir", projectDir.absolutePath, cloneSpec.workingDir.absolutePath)
+        final String credUrl = dummyUrlString.split("@")[0]
+        final String credentialName = "${dummyUser}@@${credUrl}@Mercurial"
+        assertEquals("Cached credential key", credentialName, storedCredentialKey)
+        assertEquals("Cached credentials", new Credentials(dummyUser, dummyPassword), storedCredentials)
 
-        ExecSpec updateSpec = stubSpecs[1]
-        assertThat("update args", updateSpec.args, is(equalTo(["update", "-r", "dummy_node"] as List<String>)))
-        assertEquals("update dir", depDir.absolutePath, updateSpec.workingDir.absolutePath)
+        assertEquals(
+            "Clone the repo (successfully)",
+            hgCommand.makeEffect(cloneArgs, projectDir.absoluteFile, null),
+            effects[1]
+        )
+
+        List<String> checkoutArgs = ["update", "-r", "dummy_node"]
+        assertEquals(
+            "Update to the revision",
+            hgCommand.makeEffect(checkoutArgs, depDir.absoluteFile, null),
+            effects[2]
+        )
     }
 
 }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesGitTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesGitTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,72 @@
+package holygradle.scm
+
+import holygradle.testUtil.ScmUtil
+import org.gradle.api.Project
+
+import java.nio.file.Path
+
+import static org.junit.Assert.*
+
+class SourceControlRepositoriesGitTest extends SourceControlRepositoriesTestBase {
+
+    @Override
+    protected File getRepoDir(String testName) {
+        return new File(getTestDir(), "testGit" + testName)
+    }
+
+    @Override
+    protected void prepareRepoDir(File repoDir) {
+        ScmUtil.gitExec(repoDir, "init")
+    }
+
+    @Override
+    protected void checkInitialState(Project project, File repoDir, SourceControlRepository sourceControl) {
+        // Add a file.
+        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
+        ScmUtil.gitExec(project, "add", EXAMPLE_FILE)
+        // Set the commit message, user, and date, so that the hash will be the same every time.
+        ScmUtil.gitExec(project,
+                        "commit",
+                        "-m", "Added another file."
+        )
+
+        assertTrue(
+            "A GitRepository instance has been created for ${project}",
+            sourceControl instanceof GitRepository
+        )
+        assertEquals("The master repo is ''", "", sourceControl.getUrl())
+        assertEquals(
+            "The SourceControlRepository reports its protocol correctly",
+            "git",
+            sourceControl.getProtocol()
+        )
+    }
+
+    @Override
+    protected void modifyWorkingCopy(Project project) {
+        new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
+            PrintWriter w -> w.println("two")
+        }
+    }
+
+    @Override
+    protected void checkStateWithAddedFile(Project project) {
+        SourceControlRepository sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
+
+        assertTrue("Local changes are detected correctly", sourceControl.hasLocalChanges())
+
+    }
+
+    @Override
+    protected void addDir(File repoDir, File dir) {
+        new File(dir, "dummy.txt").text = "Dummy file so this folder can be committed."
+        ScmUtil.gitExec(dir, "add", ".")
+        ScmUtil.gitExec(dir, "commit", ".", "-m", "'Add ${dir}'")
+    }
+
+    @Override
+    protected void ignoreDir(File repoDir, File dirToIgnore) {
+        Path relativePathToIgnore = repoDir.toPath().relativize(dirToIgnore.toPath())
+        new File(repoDir, ".gitignore").text = "/${relativePathToIgnore}/"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesHgTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesHgTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,189 @@
+package holygradle.scm
+
+import holygradle.io.FileHelper
+import holygradle.testUtil.ScmUtil
+import org.gradle.api.Project
+import org.gradle.testfixtures.ProjectBuilder
+import org.junit.Test
+
+import java.nio.file.Path
+
+import static org.junit.Assert.*
+/**
+ * Integration test of the HgRepository class.  Most of this test is actually in the "build.gradle" script which is
+ * launched.  This is because the test needs to run the version of Mercurial which the intrepid depends on, and the
+ * only easy way to do that is to run a build which uses the intrepid plugin.
+ */
+class SourceControlRepositoriesHgTest extends SourceControlRepositoriesTestBase {
+
+    @Override
+    protected File getRepoDir(String testName) {
+        return new File(getTestDir(), "testHg" + testName)
+    }
+
+    @Override
+    protected void prepareRepoDir(File repoDir) {
+        ScmUtil.hgExec(repoDir, "init")
+    }
+
+    @Override
+    protected void checkInitialState(Project project, File repoDir, SourceControlRepository sourceControl) {
+        // Add a file.
+        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
+        ScmUtil.hgExec(project, "add", EXAMPLE_FILE)
+        // Set the commit message, user and date, so that the hash will be the same every time.
+        ScmUtil.hgExec(project,
+                "commit",
+                "-m", "Added another file.",
+                "-u", "TestUser",
+                "-d", "2000-01-01"
+        )
+
+        assertTrue(
+            "An HgRepository instance has been created for the project",
+            sourceControl instanceof HgRepository
+        )
+
+        String expectedHash
+        String projectDirName = project.projectDir.name
+        switch (projectDirName) {
+            case "testHgBU":
+                expectedHash = "30c86257cd03bde0acb2e22f91512e589df605e9"
+                break
+            case "sub":
+                expectedHash = "c00b05e262a46c28648da50f19d23014672353bf"
+                break
+            case "ignored":
+                expectedHash = null
+                break
+            default:
+                throw new RuntimeException("Unsupported project dir ${projectDirName}")
+        }
+        assertEquals(
+            "First commit hash is as expected",
+            expectedHash,
+            sourceControl.getRevision()
+        )
+        assertEquals("The master repo is 'unknown'", "unknown", sourceControl.getUrl())
+        assertEquals(
+            "The SourceControlRepository reports its protocol correctly",
+            "hg",
+            sourceControl.getProtocol()
+        )
+    }
+
+    @Override
+    protected void modifyWorkingCopy(Project project) {
+        new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
+            PrintWriter w -> w.println("two")
+        }
+    }
+
+    @Override
+    protected void checkStateWithAddedFile(Project project) {
+        def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
+
+        assertTrue("Local changes are detected correctly", sourceControl.hasLocalChanges())
+    }
+
+    @Override
+    protected void addDir(File repoDir, File dir) {
+        new File(dir, "dummy.txt").text = "Dummy file so this folder can be committed."
+        ScmUtil.hgExec(dir, "add", ".")
+        // Set the commit message, user and date, so that the hash will be the same every time.
+        ScmUtil.hgExec(dir,
+                "commit", ".",
+                "-m", "'Add ${dir}'",
+                "-u", "TestUser",
+                "-d", "2000-01-01"
+        )
+    }
+
+    @Override
+    protected void ignoreDir(File repoDir, File dirToIgnore) {
+        Path relativePathToIgnore = repoDir.toPath().relativize(dirToIgnore.toPath())
+        new File(repoDir, ".hgignore").text = "^${relativePathToIgnore}/"
+    }
+
+    /**
+     * This is a regression test for GR #3780.  The HgRepository class would report the wrong revision for the working
+     * copy if it was not the most recent commit in the repo.  (This could be because it wasn't updated to the tip of
+     * a branch, or because a more recent commit exists on another branch.)  The bug was that it used "hg log -l 1" to
+     * return the node string for the most recent commit, instead of working from "hg id" to get the node of the
+     * working copy's parent.
+     */
+    @Test
+    public void testHgGetRevisionWithNewerCommit() {
+        ////////////////////////////////////////////////////////////////////////////////
+        // Create a repo to run the test in.
+        File projectDir = getRepoDir("tGRWNC")
+        FileHelper.ensureDeleteDirRecursive(projectDir)
+        FileHelper.ensureMkdirs(projectDir)
+
+        Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
+
+        // Make the project dir into a repo, then add the extension.
+        ScmUtil.hgExec(project, "init")
+        SourceControlRepositories.createExtension(project)
+
+
+        ////////////////////////////////////////////////////////////////////////////////
+        // Now run the actual test
+        def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
+
+        assertTrue(
+                "An HgRepository instance has been created for the project",
+                sourceControl instanceof HgRepository
+        )
+
+        // Add a file.
+        (new File(project.projectDir, ".hgignore")).withPrintWriter { PrintWriter w ->
+            w.println("^build/")
+            w.println("^.*\\.gradle/")
+        }
+        ScmUtil.hgExec(project, "add", ".hgignore")
+        // Set the commit message, user, and date, so that the hash will be the same every time.
+        ScmUtil.hgExec(project,
+                       "commit",
+                       "-m", "Initial test state.",
+                       "-u", "TestUser",
+                       "-d", "2000-01-01"
+        )
+
+        assertEquals(
+                "First commit hash is as expected",
+                "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
+                sourceControl.getRevision()
+        )
+        assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
+
+        // Add another file.
+        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
+        ScmUtil.hgExec(project, "add", EXAMPLE_FILE)
+        // Set the commit message, user, and date, so that the hash will be the same every time.
+        ScmUtil.hgExec(project,
+                       "commit",
+                       "-m", "Added another file.",
+                       "-u", "TestUser",
+                       "-d", "2000-01-02"
+        )
+
+        assertEquals(
+                "Second commit hash is as expected",
+                "2fbc9b5207fda8a526ce38d6bb1ae208b175cd64",
+                sourceControl.getRevision()
+        )
+
+        ScmUtil.hgExec(project,
+                       "update",
+                       "-r", "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
+                       )
+
+        assertEquals(
+                "Updating to first commit hash is detected as expected",
+                "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
+                sourceControl.getRevision()
+        )
+
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesSvnTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesSvnTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,110 @@
+package holygradle.scm
+
+import holygradle.io.FileHelper
+import holygradle.testUtil.ScmUtil
+import org.gradle.api.Project
+
+import static org.junit.Assert.assertEquals
+import static org.junit.Assert.assertTrue
+
+class SourceControlRepositoriesSvnTest extends SourceControlRepositoriesTestBase {
+    private static File getRepoServerDir(File repoDir) {
+        new File(repoDir.parentFile, repoDir.name + "_repo")
+    }
+
+    private static String getAsServerUrl(File dir) {
+        // On Windows, "svn checkout" requires the file URL to start with "file:///C:/..." for a repo on drive C, for
+        // example.  Java just turns file paths into "file:/C:/..." so we need to adjust that.
+        return dir.toURI().toString()
+                .replaceFirst("^file:/([a-zA-Z]:)", "file:///\$1")
+    }
+
+    @Override
+    protected File getRepoDir(String testName) {
+        return new File(getTestDir(), "testSvn" + testName)
+    }
+
+    @Override
+    protected void prepareRepoDir(File repoDir) {
+        File repoServerDir = getRepoServerDir(repoDir.absoluteFile)
+        FileHelper.ensureDeleteDirRecursive(repoServerDir)
+        ScmUtil.exec(repoDir, 'svnadmin', 'create', repoServerDir.toString())
+
+        String repoServerUrl = getAsServerUrl(repoServerDir)
+        ScmUtil.svnExec(repoDir, "checkout", repoServerUrl, ".")
+    }
+
+    @Override
+    protected void checkInitialState(Project project, File repoDir, SourceControlRepository sourceControl) {
+        // Add a file.
+        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
+        ScmUtil.svnExec(project, "add", EXAMPLE_FILE)
+        // Set the commit message, user, and date, so that the hash will be the same every time.
+        ScmUtil.svnExec(project,
+                "commit",
+                "-m", "Added another file."
+        )
+        // Update repo root so it isn't a mixed-revision working copy.
+        ScmUtil.svnExec(project, "update", repoDir.absolutePath)
+
+        assertTrue(
+                "An SvnRepository instance has been created for ${project}",
+                sourceControl instanceof SvnRepository
+        )
+
+        String expectedRevision
+        String projectDirName = project.projectDir.name
+        switch (projectDirName) {
+            case "testSvnBU":
+                expectedRevision = "1"
+                break
+            case "sub":
+                expectedRevision = "2"
+                break
+            case "ignored":
+                expectedRevision = null
+                break
+            default:
+                throw new RuntimeException("Unsupported project dir ${projectDirName}")
+        }
+        assertEquals("The initial revision is as expected", expectedRevision, sourceControl.getRevision())
+
+        assertEquals(
+                "The repo URL is as expected",
+                getAsServerUrl(getRepoServerDir(repoDir)),
+                sourceControl.getUrl() + "/"
+        )
+        assertEquals(
+                "The SourceControlRepository reports its protocol correctly",
+                "svn",
+                sourceControl.getProtocol()
+        )
+    }
+
+    @Override
+    protected void modifyWorkingCopy(Project project) {
+        new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
+            PrintWriter w -> w.println("two")
+        }
+    }
+
+    @Override
+    protected void checkStateWithAddedFile(Project project) {
+        SourceControlRepository sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
+
+        assertTrue(sourceControl.hasLocalChanges())
+    }
+
+    @Override
+    protected void addDir(File repoDir, File dir) {
+        ScmUtil.svnExec(dir, "add", ".")
+        ScmUtil.svnExec(dir, "commit", ".", "-m", "'Add ${dir}'")
+        // Update repo root so it isn't a mixed-revision working copy.
+        ScmUtil.svnExec(dir, "update", repoDir.absolutePath)
+    }
+
+    @Override
+    protected void ignoreDir(File repoDir, File dirToIgnore) {
+        ScmUtil.svnExec(repoDir, "propset", "svn:ignore", dirToIgnore.name, dirToIgnore.parentFile.absolutePath)
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,10 +1,8 @@
 package holygradle.scm
 
 import holygradle.io.FileHelper
+import holygradle.source_dependencies.SourceDependencyHandler
 import holygradle.test.AbstractHolyGradleTest
-import holygradle.testUtil.GitUtil
-import holygradle.testUtil.HgUtil
-import holygradle.testUtil.ZipUtil
 import org.gradle.api.Project
 import org.gradle.testfixtures.ProjectBuilder
 import org.junit.Test
@@ -12,236 +10,15 @@
 import static org.junit.Assert.*
 
 class SourceControlRepositoriesTest extends AbstractHolyGradleTest {
-    private static final String EXAMPLE_FILE = "ahoy.txt"
-
-    @Test
-    public void testSvn() {
-        File svnDir = ZipUtil.extractZip(getTestDir(), "test_svn")
-        
-        Project project = ProjectBuilder.builder().withProjectDir(svnDir).build()
-        SourceControlRepositories.createExtension(project)
-        SourceControlRepository sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
-        
-        assertTrue(sourceControl instanceof SvnRepository)
-        assertEquals("1", sourceControl.getRevision())
-        assertFalse(sourceControl.hasLocalChanges())
-        assertEquals("file:///C:/Projects/DependencyManagement/Project/test_svn_repo/trunk", sourceControl.getUrl())
-        assertEquals("svn", sourceControl.getProtocol())
-        assertEquals(svnDir.getCanonicalFile(), sourceControl.getLocalDir())
-        
-        File helloFile = new File(svnDir, "hello.txt")
-        helloFile.write("bonjour")
-        assertTrue(sourceControl.hasLocalChanges())
-    }
-
-    /**
-     * Integration test of the HgRepository class.  Most of this test is actually in the "build.gradle" script which is
-     * launched.  This is because the test needs to run the version of Mercurial which the intrepid depends on, and the
-     * only easy way to do that is to run a build which uses the intrepid plugin.
-     */
-    @Test
-    public void testHg() {
-        ////////////////////////////////////////////////////////////////////////////////
-        // Create a repo to run the test in.
-        File projectDir = new File(getTestDir(), "testHg")
-        FileHelper.ensureDeleteDirRecursive(projectDir)
-        FileHelper.ensureMkdirs(projectDir)
-
-        Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
-        // Make the project dir into a repo, then add the extension.
-        HgUtil.hgExec(project, "init")
-        SourceControlRepositories.createExtension(project)
-
-        // Add a file.
-        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
-        HgUtil.hgExec(project, "add", EXAMPLE_FILE)
-        // Set the commit message, user, and date, so that the hash will be the same every time.
-        HgUtil.hgExec(project,
-           "commit",
-           "-m", "Added another file.",
-           "-u", "TestUser",
-           "-d", "2000-01-01"
-        )
-
-        ////////////////////////////////////////////////////////////////////////////////
-        // Now run the actual test
-        def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
-
-        assertTrue(
-            "An HgRepository instance has been created for the project",
-            sourceControl instanceof HgRepository
-        )
-
-        assertEquals(
-            "First commit hash is as expected",
-            "30c86257cd03bde0acb2e22f91512e589df605e9",
-            sourceControl.getRevision()
-        )
-        assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
-        assertEquals("The master repo is 'unknown'", "unknown", sourceControl.getUrl())
-        assertEquals(
-            "The SourceControlRepository reports its protocol correctly",
-            "hg",
-            sourceControl.getProtocol()
-        )
-        assertEquals(
-            "The SourceControlRepository reports its directory correctly",
-            project.projectDir.getCanonicalFile(),
-            sourceControl.getLocalDir()
-        )
-
-        new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
-            PrintWriter w -> w.println("two")
-        }
-
-        assertTrue("Local changes are detected correctly", sourceControl.hasLocalChanges())
-    }
-
-    /**
-     * Integration test of the GitRepository class.
-     */
-    @Test
-    public void testGit() {
-        ////////////////////////////////////////////////////////////////////////////////
-        // Create a repo to run the test in.
-        File projectDir = new File(getTestDir(), "testGit")
-        FileHelper.ensureDeleteDirRecursive(projectDir)
-        FileHelper.ensureMkdirs(projectDir)
-
-        Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
-        // Make the project dir into a repo, then add the extension.
-        GitUtil.gitExec(project, "init")
-        SourceControlRepositories.createExtension(project)
-
-        // Add a file.
-        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
-        GitUtil.gitExec(project, "add", EXAMPLE_FILE)
-        // Set the commit message, user, and date, so that the hash will be the same every time.
-        GitUtil.gitExec(project,
-                "commit",
-                "-m", "Added another file."
-        )
-
-        ////////////////////////////////////////////////////////////////////////////////
-        // Now run the actual test
-        def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
-
-        assertTrue(
-                "A GitRepository instance has been created for the project",
-                sourceControl instanceof GitRepository
-        )
-        assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
-        assertEquals("The master repo is ''", "", sourceControl.getUrl())
-        assertEquals(
-                "The SourceControlRepository reports its protocol correctly",
-                "git",
-                sourceControl.getProtocol()
-        )
-        assertEquals(
-                "The SourceControlRepository reports its directory correctly",
-                project.projectDir.getCanonicalFile(),
-                sourceControl.getLocalDir()
-        )
-
-        new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
-            PrintWriter w -> w.println("two")
-        }
-
-        assertTrue("Local changes are detected correctly", sourceControl.hasLocalChanges())
-    }
-
-    /**
-     * This is a regression test for GR #3780.  The HgRepository class would report the wrong revision for the working
-     * copy if it was not the most recent commit in the repo.  (This could be because it wasn't updated to the tip of
-     * a branch, or because a more recent commit exists on another branch.)  The bug was that it used "hg log -l 1" to
-     * return the node string for the most recent commit, instead of working from "hg id" to get the node of the
-     * working copy's parent.
-     */
-    @Test
-    public void testHgGetRevisionWithNewerCommit() {
-        ////////////////////////////////////////////////////////////////////////////////
-        // Create a repo to run the test in.
-        File projectDir = new File(getTestDir(), "tGRWNC")
-        FileHelper.ensureDeleteDirRecursive(projectDir)
-        FileHelper.ensureMkdirs(projectDir)
-
-        Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
-
-        // Make the project dir into a repo, then add the extension.
-        HgUtil.hgExec(project, "init")
-        SourceControlRepositories.createExtension(project)
-
-
-        ////////////////////////////////////////////////////////////////////////////////
-        // Now run the actual test
-        def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
-
-        assertTrue(
-            "An HgRepository instance has been created for the project",
-            sourceControl instanceof HgRepository
-        )
-
-        // Add a file.
-        (new File(project.projectDir, ".hgignore")).withPrintWriter { PrintWriter w ->
-            w.println("^build/")
-            w.println("^.*\\.gradle/")
-        }
-        HgUtil.hgExec(project, "add", ".hgignore")
-        // Set the commit message, user, and date, so that the hash will be the same every time.
-        HgUtil.hgExec(project,
-           "commit",
-           "-m", "Initial test state.",
-           "-u", "TestUser",
-           "-d", "2000-01-01"
-        )
-
-        assertEquals(
-            "First commit hash is as expected",
-            "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
-            sourceControl.getRevision()
-        )
-        assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
-
-        // Add another file.
-        (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
-        HgUtil.hgExec(project, "add", EXAMPLE_FILE)
-        // Set the commit message, user, and date, so that the hash will be the same every time.
-        HgUtil.hgExec(project,
-           "commit",
-           "-m", "Added another file.",
-           "-u", "TestUser",
-           "-d", "2000-01-02"
-        )
-
-        assertEquals(
-            "Second commit hash is as expected",
-            "2fbc9b5207fda8a526ce38d6bb1ae208b175cd64",
-            sourceControl.getRevision()
-        )
-
-        HgUtil.hgExec(project,
-           "update",
-           "-r", "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
-       )
-
-        assertEquals(
-            "Updating to first commit hash is detected as expected",
-            "cd7b5c688d1504b029a7286c2c0124c86b1d39a2",
-            sourceControl.getRevision()
-        )
-
-    }
-
     @Test
     public void testDummy() {
         File dummyDir = new File(getTestDir(), "dummy")
+        Project project = prepareRepoDir(dummyDir)
 
-        Project project = ProjectBuilder.builder().withProjectDir(dummyDir).build()
-        SourceControlRepositories.createExtension(project)
         SourceControlRepository sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
 
         assertNotNull(sourceControl)
-        assertTrue(sourceControl instanceof DummySourceControl)
+        assertEquals("${project} sourceControl is of type ${DummySourceControl}", DummySourceControl, sourceControl.getClass())
         assertEquals(null, sourceControl.getRevision())
         assertFalse(sourceControl.hasLocalChanges())
         assertEquals(null, sourceControl.getUrl())
@@ -252,8 +29,24 @@
     @Test
     public void testGetWithoutDummy() {
         File dummyDir = new File(getTestDir(), "dummy")
-        Project project = ProjectBuilder.builder().withProjectDir(dummyDir).build()
-        SourceControlRepository repo = SourceControlRepositories.create(project, dummyDir)
-        assertNull(repo)
+        Project project = prepareRepoDir(dummyDir)
+
+        Collection<SourceDependencyHandler> sourceDependencies = SourceDependencyHandler.createContainer(project)
+
+        // Make a dummy source dependency pointing to an already-existing folder.
+        final SourceDependencyHandler handler = sourceDependencies.create("dummySourceDep")
+        FileHelper.ensureMkdirs(handler.destinationDir)
+
+        SourceControlRepository repo = SourceControlRepositories.create(handler)
+        assertTrue("Expect no repo for an empty source dependency directory; got ${repo}", repo instanceof DummySourceControl)
+    }
+
+    private Project prepareRepoDir(File repoDir) {
+        FileHelper.ensureDeleteDirRecursive(repoDir)
+        FileHelper.ensureMkdirs(repoDir)
+        Project project = ProjectBuilder.builder().withProjectDir(repoDir).build()
+        new File(repoDir, "build.gradle").text = "/* Dummy Gradle build file. */"
+        SourceControlRepositories.createExtension(project)
+        return project
     }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTestBase.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/SourceControlRepositoriesTestBase.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,97 @@
+package holygradle.scm
+
+import holygradle.io.FileHelper
+import holygradle.test.AbstractHolyGradleTest
+import org.gradle.api.Project
+import org.gradle.testfixtures.ProjectBuilder
+import org.junit.Test
+
+import static org.junit.Assert.*
+
+abstract class SourceControlRepositoriesTestBase extends AbstractHolyGradleTest {
+    protected static final String EXAMPLE_FILE = "ahoy.txt"
+
+    @Test
+    public void testBasicUsage() {
+        File repoDir = getRepoDir("BU")
+        FileHelper.ensureDeleteDirRecursive(repoDir)
+        File projectDir = repoDir
+        FileHelper.ensureMkdirs(projectDir)
+        prepareRepoDir(repoDir)
+        Project project = prepareProjectDir(projectDir)
+
+        checkInitialState(project, repoDir)
+        modifyWorkingCopy(project)
+        checkStateWithAddedFile(project)
+    }
+
+    @Test
+    public void testProjectInSubDir() {
+        File repoDir = getRepoDir("PISD")
+        FileHelper.ensureDeleteDirRecursive(repoDir)
+        File projectDir = new File(repoDir, "sub")
+        FileHelper.ensureMkdirs(projectDir)
+        prepareRepoDir(repoDir)
+        addDir(repoDir, projectDir)
+        Project project = prepareProjectDir(projectDir)
+
+        checkInitialState(project, repoDir)
+        modifyWorkingCopy(project)
+        checkStateWithAddedFile(project)
+    }
+
+    @Test
+    public void testProjectInIgnoredSubDir() {
+        File repoDir = getRepoDir("PIISD")
+        FileHelper.ensureDeleteDirRecursive(repoDir)
+        File projectDir = new File(repoDir, "ignored")
+        FileHelper.ensureMkdirs(projectDir)
+        prepareRepoDir(repoDir)
+        new File(repoDir, "dummy.txt").text = "Dummy file so this folder can be ignored."
+        ignoreDir(repoDir, projectDir)
+        Project project = prepareProjectDir(projectDir)
+
+        checkNoSourceRepository(project)
+    }
+
+    protected abstract File getRepoDir(String testName)
+    protected abstract void prepareRepoDir(File repoDir)
+    private static Project prepareProjectDir(File projectDir) {
+        Project project = ProjectBuilder.builder().withProjectDir(projectDir).build()
+        new File(projectDir, "build.gradle").text = "/* Dummy Gradle build file. */"
+        SourceControlRepositories.createExtension(project)
+        return project
+    }
+
+    protected void checkInitialState(Project project, File repoDir) {
+        SourceControlRepository sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository
+
+        assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
+        assertEquals(
+            "The SourceControlRepository reports its directory correctly",
+            repoDir.getCanonicalFile(),
+            sourceControl.getLocalDir()
+        )
+
+        checkInitialState(project, repoDir, sourceControl)
+    }
+
+    protected abstract void checkInitialState(Project project, File repoDir, SourceControlRepository sourceControl)
+    protected abstract void modifyWorkingCopy(Project project)
+    protected abstract void checkStateWithAddedFile(Project project)
+
+    protected abstract void addDir(File repoDir, File dir)
+
+    protected abstract void ignoreDir(File repoDir, File dirToIgnore)
+
+    private static void checkNoSourceRepository(Project project) {
+        SourceControlRepository sourceControl =
+            project.extensions.findByName("sourceControl") as SourceControlRepository
+        assertEquals(
+            "${project} sourceControl is of type ${DummySourceControl}",
+            DummySourceControl,
+            sourceControl.getClass()
+        )
+    }
+
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/StubCommand.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/scm/StubCommand.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,92 @@
+package holygradle.scm
+
+import holygradle.testUtil.ExecUtil
+import org.gradle.process.ExecSpec
+
+class StubCommand implements Command {
+    private final String name
+    private final List<Effect> effects
+    private final Closure doExec
+
+    StubCommand(String name, List<Effect> effects, Closure doExec) {
+        this.name = name
+        this.effects = effects
+        this.doExec = doExec
+    }
+
+    StubCommand(String name, List<Effect> effects) {
+        this(name, effects, {[0, ""]})
+    }
+
+    @Override
+    String execute(Closure configureExecSpec) {
+        ExecSpec execSpec = ExecUtil.makeStubExecSpec().<ExecSpec> with(configureExecSpec)
+        def (int exitValue, String output) = doExec(execSpec)
+        effects.add(new Effect(execSpec, null))
+        if (exitValue != 0) { throw new RuntimeException("Exit value was ${exitValue}") }
+        return output
+    }
+
+    @Override
+    String execute(Closure configureExecSpec, Closure throwForExitValue) {
+        ExecSpec execSpec = ExecUtil.makeStubExecSpec().<ExecSpec> with(configureExecSpec)
+        def (int exitValue, String output) = doExec(execSpec)
+        def shouldThrow = (exitValue != 0) && throwForExitValue(exitValue)
+        effects.add(new Effect(execSpec, shouldThrow))
+        if (shouldThrow) { throw new RuntimeException("Exit value was ${exitValue}") }
+        return output
+    }
+
+    Effect makeEffect(List<String> args, File workingDir, Boolean shouldThrow) {
+        return new Effect(args, workingDir, shouldThrow)
+    }
+
+    class Effect {
+        public final List<String> args
+        public final File workingDir
+        public final Boolean shouldThrow
+
+        Effect(List<String> args, File workingDir, Boolean shouldThrow) {
+            this.args = args
+            this.workingDir = workingDir
+            this.shouldThrow = shouldThrow
+        }
+
+        Effect(ExecSpec execSpec, Boolean shouldThrow) {
+            this.args = execSpec.args
+            this.workingDir = execSpec.workingDir
+            this.shouldThrow = shouldThrow
+        }
+
+        @Override
+        public String toString() {
+            return "Effect{" +
+                "for=" + name +
+                ", args=" + args +
+                ", workingDir=" + workingDir +
+                ", shouldThrow=" + shouldThrow +
+                '}'
+        }
+
+        boolean equals(o) {
+            if (this.is(o)) return true
+            if (getClass() != o.class) return false
+
+            Effect effect = (Effect) o
+
+            if (args != effect.args) return false
+            if (shouldThrow != effect.shouldThrow) return false
+            if (workingDir != effect.workingDir) return false
+
+            return true
+        }
+
+        int hashCode() {
+            int result
+            result = args.hashCode()
+            result = 31 * result + workingDir.hashCode()
+            result = 31 * result + (shouldThrow != null ? shouldThrow.hashCode() : 0)
+            return result
+        }
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/scm/test_svn.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/scm/test_svn.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/source_dependencies/ProjectDependenciesIntegrationTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/source_dependencies/ProjectDependenciesIntegrationTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/source_dependencies/ProjectDependenciesIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -29,12 +29,12 @@
         File projectDir = new File(getTestDir(), "conflict")
         invokeGradle(projectDir) { WrapperBuildLauncher launcher ->
             launcher.forTasks("extractPackedDependencies")
-            launcher.expectFailure(RegressionFileHelper.toStringWithPlatformLineBreaks(
-"""> A conflict was found between the following modules:
-   - holygradle.test:external-lib:1.0
-   - holygradle.test:external-lib:1.1
-"""
-            ))
+            launcher.expectFailure(
+                    """Caused by: org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.VersionConflictException: A conflict was found between the following modules:""")
+
+            // This error message has changed. It would be better to include the following lines in the expected error message:
+            //"""\n - holygradle.test:external-lib:${expectedDummyVersion}""" +
+            //"""\n - holygradle.test:external-lib:1.0""")
         }
     }
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/GitUtil.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/testUtil/GitUtil.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,17 +0,0 @@
-package holygradle.testUtil
-
-import org.gradle.api.Project
-import org.gradle.process.ExecSpec
-
-/**
- * Test helper related to Git.
- */
-class GitUtil {
-    public static void gitExec(Project project, Object ... args) {
-        project.exec { ExecSpec spec ->
-            spec.workingDir = project.projectDir
-            spec.executable = "git.exe"
-            spec.args = args.toList()
-        }
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/HgUtil.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/testUtil/HgUtil.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,17 +0,0 @@
-package holygradle.testUtil
-
-import org.gradle.api.Project
-import org.gradle.process.ExecSpec
-
-/**
- * Test helper related to Mercurial.
- */
-class HgUtil {
-    public static void hgExec(Project project, Object ... args) {
-        project.exec { ExecSpec spec ->
-            spec.workingDir = project.projectDir
-            spec.executable = "hg.exe"
-            spec.args = args.toList()
-        }
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/ScmUtil.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/ScmUtil.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,53 @@
+package holygradle.testUtil
+
+import org.gradle.api.Project
+import org.gradle.process.ExecSpec
+
+/**
+ * Test helper related to Mercurial.
+ */
+class ScmUtil {
+    public static void exec(Project project, String executable, String ... args) {
+        println "exec for ${project} in ${project.projectDir}: ${executable} ${args}"
+        project.exec { ExecSpec spec ->
+            spec.workingDir = project.projectDir
+            spec.executable = executable
+            spec.args = args.toList()
+        }
+    }
+
+    public static void exec(File workingDir, String executable, String ... args) {
+        println "exec in ${workingDir}: ${executable} ${args}"
+        int exitCode = new ProcessBuilder([executable] + args.toList())
+            .directory(workingDir)
+            .start()
+            .waitFor()
+        if (exitCode != 0) {
+            throw new RuntimeException("Process '${executable}' exited with code '${exitCode}'")
+        }
+    }
+
+    public static void svnExec(Project project, String ... args) {
+        exec(project, "svn", args)
+    }
+
+    public static void svnExec(File workingDir, String ... args) {
+        exec(workingDir, "svn", args)
+    }
+
+    public static void hgExec(Project project, String ... args) {
+        exec(project, "hg", args)
+    }
+
+    public static void hgExec(File workingDir, String ... args) {
+        exec(workingDir, "hg", args)
+    }
+
+    public static void gitExec(Project project, String ... args) {
+        exec(project, "git", args)
+    }
+
+    public static void gitExec(File workingDir, String ... args) {
+        exec(workingDir, "git", args)
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/ZipUtil.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/testUtil/ZipUtil.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,17 +0,0 @@
-package holygradle.testUtil
-
-import holygradle.io.FileHelper
-import net.lingala.zip4j.core.ZipFile
-
-/**
- * Utilities for unit tests, related to ZIP files.
- */
-public class ZipUtil {
-    public static File extractZip(File zipParentDir, String zipName) {
-        File zipDir = new File(zipParentDir, zipName)
-        FileHelper.ensureDeleteDirRecursive(zipDir)
-        ZipFile zipFile = new ZipFile(new File(zipParentDir.parentFile, zipName + ".zip"))
-        zipFile.extractAll(zipDir.path)
-        zipDir
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-buildScript-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-buildScript-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-buildScript-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-buildScript-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+5787D324A00EC266B28ACA9C7033DDE6FD3D853E
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Debug-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Debug-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Debug-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Debug-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+347EF607A9D1297B9259CEF7D0B719BF11709059
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Release-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Release-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Release-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-compileVc10Release-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+347EF607A9D1297B9259CEF7D0B719BF11709059
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-source-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-source-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-source-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/another-application-source-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+80E3D4756FB83A951D72E7AEF43CC10201FB94F7
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/ivy-1.0.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/ivy-1.0.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="another-application" revision="1.0" status="release" publication="20130321140802"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="another-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="another-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="another-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="another-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="another-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/ivy-1.0.xml.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-application/1.0/ivy-1.0.xml.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+4AC4A7FC9280907F6FACB549C253543EBB00048B
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-buildScript-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-buildScript-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-buildScript-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-buildScript-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+A285C4A5114019E495D2D018DD0580AF4F8B9F19
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Debug-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Debug-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Debug-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Debug-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+1bf5e74b2ae867e888c79cd92533bae6777206a6
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Release-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Release-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Release-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-compileVc10Release-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+1bf5e74b2ae867e888c79cd92533bae6777206a6
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-source-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-source-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-source-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/another-framework-source-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+6c5cf9e00e58a121d8ce0fcc1239ae1855d377ff
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/ivy-1.0.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/ivy-1.0.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="another-framework" revision="1.0" status="release" publication="20130321140802"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="another-framework-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="another-framework-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="another-framework-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="another-framework-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Debug-&gt;compile"/>
+    <dependency org="holygradle.test" name="external-lib" rev="1.0" conf="compileVc10Release-&gt;compile"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/ivy-1.0.xml.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/another-framework/1.0/ivy-1.0.xml.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+B49F465567DE5465DED60A0575616FBF3F02D376
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-buildScript-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-buildScript-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-buildScript-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-buildScript-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+ECD613D050AEE05ACCCFDCFFF6D0F1336198EE20
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Debug-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Debug-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Debug-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Debug-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+347EF607A9D1297B9259CEF7D0B719BF11709059
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Release-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Release-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Release-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-compileVc10Release-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+347EF607A9D1297B9259CEF7D0B719BF11709059
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-source-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-source-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-source-1.0.zip.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/example-application-source-1.0.zip.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+80E3D4756FB83A951D72E7AEF43CC10201FB94F7
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/ivy-1.0.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/ivy-1.0.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="example-application" revision="1.0" status="release" publication="20130321140802"/>
+  <configurations>
+    <conf name="compileVc10Debug" visibility="public"/>
+    <conf name="compileVc10Release" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compileVc10Debug,compileVc10Release,source"/>
+    <conf name="source" visibility="public"/>
+  </configurations>
+  <publications>
+    <artifact name="example-application-compileVc10Debug" type="zip" ext="zip" conf="compileVc10Debug"/>
+    <artifact name="example-application-compileVc10Release" type="zip" ext="zip" conf="compileVc10Release"/>
+    <artifact name="example-application-buildScript" type="zip" ext="zip" conf="everything"/>
+    <artifact name="example-application-source" type="zip" ext="zip" conf="source"/>
+  </publications>
+  <dependencies>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Debug-&gt;compileVc10Debug"/>
+    <dependency org="holygradle.test" name="example-framework" rev="1.0" conf="compileVc10Release-&gt;compileVc10Release"/>
+  </dependencies>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/ivy-1.0.xml.sha1
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/example-application/1.0/ivy-1.0.xml.sha1	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+A32192590FEBBD979AD0C1DD1B42E2AE3BE1EE66
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/long-name-lib/1.0/ivy-1.0.xml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/long-name-lib/1.0/ivy-1.0.xml	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ivy-module version="2.0">
+  <info organisation="holygradle.test" module="long-name-lib" revision="1.0" status="release" publication="20180111140802"/>
+  <configurations>
+    <conf name="compile" visibility="public"/>
+    <conf name="everything" visibility="public" extends="compile"/>
+  </configurations>
+  <publications>
+    <artifact name="long-name-lib" type="zip" ext="zip" conf="compile"/>
+  </publications>
+</ivy-module>
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/long-name-lib/1.0/long-name-lib-1.0.zip
Binary file intrepid-plugin/src/test/groovy/holygradle/testUtil/repository/holygradle.test/long-name-lib/1.0/long-name-lib-1.0.zip has changed
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/unpacking/SpeedyUnpackManyTaskIntegrationTest.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/unpacking/SpeedyUnpackManyTaskIntegrationTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,27 @@
+package holygradle.unpacking
+
+import holygradle.test.AbstractHolyGradleIntegrationTest
+import holygradle.test.WrapperBuildLauncher
+import org.junit.Test
+
+class SpeedyUnpackManyTaskIntegrationTest extends AbstractHolyGradleIntegrationTest{
+
+    @Test
+    void testUnpackLongFilePath() {
+        invokeGradle(new File(getTestDir(), "unpackLongFileName")) { WrapperBuildLauncher launcher ->
+            launcher.forTasks("fetchAllDependencies")
+
+            //launcher.addArguments("--debug")
+
+            // Test was originally intended to catch failures relating to long file paths in order to fail more informatively,
+            // however cannot reproduce this problem. If the issue arises again this can be added in to test the plugin fails
+            // appropriately.
+            /*
+            launcher.expectFailure(
+                    "Some error message about the path being too long"
+            )
+            */
+        }
+    }
+}
+
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/unpacking/SpeedyUnpackManyTaskIntegrationTest/unpackLongFileName/build.gradle
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/intrepid-plugin/src/test/groovy/holygradle/unpacking/SpeedyUnpackManyTaskIntegrationTest/unpackLongFileName/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,21 @@
+buildscript {
+    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"
+}
+gplugins.apply()
+
+configurations {
+    foo
+}
+
+repositories {
+    ivy {
+        url "..\\..\\..\\testUtil\\repository\\"
+    }
+}
+
+packedDependencies {
+    './long-name-lib' {
+        dependency "holygradle.test:long-name-lib:1.0"
+        configuration "foo->compile"
+    }
+}
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d intrepid-plugin/src/test/groovy/holygradle/unpacking/UnpackModuleVersionTest.groovy
--- a/intrepid-plugin/src/test/groovy/holygradle/unpacking/UnpackModuleVersionTest.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/intrepid-plugin/src/test/groovy/holygradle/unpacking/UnpackModuleVersionTest.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,6 +1,7 @@
 package holygradle.unpacking
 
 import holygradle.dependencies.PackedDependenciesSettingsHandler
+import holygradle.dependencies.SourceOverrideHandler
 import holygradle.test.*
 import org.junit.Test
 import org.gradle.api.Project
@@ -40,8 +41,8 @@
         new UnpackModuleVersion(
             project,
             new DefaultModuleVersionIdentifier("org", moduleName, moduleVersion),
-            parent,
-            (parent == null) ? new PackedDependencyHandler(moduleName) : null
+            ((parent == null) ? [] : [parent]).toSet(),
+            (parent == null) ? new PackedDependencyHandler(moduleName, project) : null
         )
     }
     
@@ -50,6 +51,8 @@
         PackedDependenciesSettingsHandler.findOrCreatePackedDependenciesSettings(project).unpackedDependenciesCacheDir =
             new File("theUnpackCache")
         project.ext.buildScriptDependencies = new DummyBuildScriptDependencies(project)
+        project.extensions.create("packedDependenciesDefault", PackedDependencyHandler, "rootDefault")
+        SourceOverrideHandler.createContainer(project)
         project
     }
     
@@ -61,9 +64,9 @@
         assertEquals("org:apricot:1.1", apricot.getFullCoordinate())
         assertNotNull("getPackedDependency not null", apricot.getPackedDependency())
         assertEquals("apricot", apricot.getPackedDependency().name)
-        assertNotNull("getSelfOrAncestorPackedDependency not null", apricot.getSelfOrAncestorPackedDependency())
-        assertEquals("apricot", apricot.getSelfOrAncestorPackedDependency().name)
-        assertNull("getParent is null", apricot.getParent())
+        assertEquals("getSelfOrAncestorPackedDependency has a single entry", apricot.getSelfOrAncestorPackedDependencies().size(), 1)
+        assertEquals("apricot", apricot.getSelfOrAncestorPackedDependencies().first().name)
+        assertEquals("getParent is empty", apricot.getParents().size(), 0)
 
         UnpackEntry unpackEntry = apricot.getUnpackEntry()
         File unpackCache = PackedDependenciesSettingsHandler.findOrCreatePackedDependenciesSettings(project).unpackedDependenciesCacheDir
@@ -93,11 +96,11 @@
     public void testSingleModuleIncludeVersionNumberInPath() {
         Project project = makeProject()
 
-        PackedDependencyHandler eggfruitPackedDep = new PackedDependencyHandler("../bowl/eggfruit-<version>-tasty")
+        PackedDependencyHandler eggfruitPackedDep = new PackedDependencyHandler("../bowl/eggfruit-<version>-tasty", project)
         UnpackModuleVersion eggfruit = new UnpackModuleVersion(
             project,
             new DefaultModuleVersionIdentifier("org", "eggfruit", "1.5"),
-            null,
+            new HashSet<UnpackModuleVersion>(),
             eggfruitPackedDep
         )
         
@@ -128,8 +131,8 @@
         UnpackModuleVersion coconut = getUnpackModuleVersion(project, "coconut", "1.3")
         UnpackModuleVersion date = getUnpackModuleVersion(project, "date", "1.4", coconut)
         
-        assertNotNull("getParent not null", date.getParent())
-        assertEquals(coconut, date.getParent())
+        assertNotEquals("getParents not empty", date.getParents().size(), 0)
+        assertEquals([coconut].toSet(), date.getParents())
 
         UnpackEntry unpackEntry = coconut.getUnpackEntry()
         File unpackCache =
@@ -139,7 +142,7 @@
         assertFalse("applyUpToDateChecks", unpackEntry.applyUpToDateChecks)
         assertTrue("makeReadOnly", unpackEntry.makeReadOnly)
 
-        assertEquals(coconut.getPackedDependency(), date.getSelfOrAncestorPackedDependency())
+        assertEquals(coconut.getPackedDependency(), date.getSelfOrAncestorPackedDependencies().first())
         
         File targetPath = new File(project.projectDir, "coconut")
         assertEquals(targetPath, coconut.getTargetPathInWorkspace())
diff -r 9b75eaff9e23 -r 48a0dd8dac1d my-credentials-plugin/src/main/groovy/holygradle/credentials/MyCredentialsPlugin.groovy
--- a/my-credentials-plugin/src/main/groovy/holygradle/credentials/MyCredentialsPlugin.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/my-credentials-plugin/src/main/groovy/holygradle/credentials/MyCredentialsPlugin.groovy	Fri May 03 13:55:15 2019 +0100
@@ -18,6 +18,7 @@
          * Dependencies
          **************************************/
 
+        // TODO 2017-03-28 HughG: Use BuildScriptDependencies to get this instead.
         ResolvedArtifact credentialStoreArtifact = null
         // credential-store is declared as attached to the 'compile' configuration in this plugin's
         // build.gradle, but 'runtime' extends 'compile', and we're using it here at runtime.
@@ -30,7 +31,6 @@
                 }
             }
         }
-        String credentialStorePath = credentialStoreArtifact.getFile().path
         
         // Copy the credential-store to the root of the workspace.
         if (project == project.rootProject) {
@@ -49,7 +49,7 @@
          **************************************/
             
         // Define 'my' DSL to allow user to retrieve secure user-specific settings.
-        MyHandler.defineExtension(project, credentialStorePath)
+        MyHandler.defineExtension(project)
         
         /**************************************
          * Tasks
diff -r 9b75eaff9e23 -r 48a0dd8dac1d my-credentials-plugin/src/main/groovy/holygradle/credentials/MyHandler.groovy
--- a/my-credentials-plugin/src/main/groovy/holygradle/credentials/MyHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/my-credentials-plugin/src/main/groovy/holygradle/credentials/MyHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,22 +1,20 @@
 package holygradle.credentials
 
 import holygradle.custom_gradle.plugin_apis.CredentialSource
+import holygradle.custom_gradle.plugin_apis.CredentialStore
+import holygradle.custom_gradle.plugin_apis.Credentials
 import org.gradle.api.Project
-import org.gradle.process.ExecResult
-import org.gradle.process.ExecSpec
 
 class MyHandler implements CredentialSource {
     private final Project project
-    private final String credentialStorePath
-    private final String separator = "&&&"
-    private final String defaultCredentialType = "Domain Credentials"
-    private Map<String,String> credentialsCache = [:]
-    
-    public static MyHandler defineExtension(Project project, String credentialStorePath) {
+    private final CredentialStore credentialStore = new WindowsCredentialStore()
+    private Map<String, Credentials> credentialsCache = [:]
+
+    public static MyHandler defineExtension(Project project) {
         MyHandler myExtension
 
         if (project == project.rootProject) {
-            myExtension = project.extensions.create("my", MyHandler, project, credentialStorePath)
+            myExtension = project.extensions.create("my", MyHandler, project)
             project.my.extensions.instructions = project.container(InstructionsHandler) { String instructionName ->
                 project.my.extensions.create(instructionName, InstructionsHandler, instructionName)
             }
@@ -24,117 +22,92 @@
             myExtension = project.rootProject.extensions.findByName("my") as MyHandler
             project.extensions.add("my", myExtension)
         }
-        
+
         myExtension
     }
-    
-    public MyHandler(Project project, String credentialStorePath) {
+
+    public MyHandler(Project project) {
         this.project = project
-        this.credentialStorePath = credentialStorePath
     }
-        
-    // This method returns username&&&password (raw)
-    private String getCachedCredentials(String credStorageKey) {
-        String credStorageValue = null
+
+    @Override
+    public CredentialStore getCredentialStore() {
+        return credentialStore
+    }
+
+    private Credentials getCachedCredentials(String credStorageKey) {
+        project.logger.debug "getCachedCredentials(${credStorageKey}) START: cache = ${credentialsCache}"
+
+        Credentials credStorageValue
         if (credentialsCache.containsKey(credStorageKey)) {
             credStorageValue = credentialsCache[credStorageKey]
             project.logger.info("Requested credentials for '${credStorageKey}'. Found in cache.")
         } else {
-            String credStoreExe = credentialStorePath
-            OutputStream credentialStoreOutput = new ByteArrayOutputStream()
-            ExecResult execResult = project.exec { ExecSpec spec ->
-                spec.setIgnoreExitValue true
-                spec.commandLine credStoreExe, credStorageKey
-                spec.setStandardOutput credentialStoreOutput
-            }
-            if (execResult.getExitValue() == 0) {
-                credStorageValue = credentialStoreOutput.toString()
+            credStorageValue = credentialStore.readCredential(credStorageKey)
+            if (credStorageValue != null) {
                 credentialsCache[credStorageKey] = credStorageValue
                 project.logger.info("Requested credentials for '${credStorageKey}'. Retrieved from Credential Manager")
-            } else {
-                project.logger.warn(
-                    "WARNING: Requested credentials for '${credStorageKey}' from Credential Manager but failed"
-                )
             }
         }
+
+        project.logger.debug "getCachedCredentials(${credStorageKey}) END: credStorageValue = ${credStorageValue}, " +
+             "cache = ${credentialsCache}"
+
         credStorageValue
     }
-    
-    private Credentials getCredentials(String credentialType, boolean forceAskUser = false) {
+
+    private Credentials getCredentials(String credentialType) {
         if (project.usingLocalArtifacts) {
             return new Credentials("empty", "empty")
         }
-        
-        String username = System.getProperty("user.name").toLowerCase()
-        String password
+
+        String defaultUsername = System.getProperty("user.name").toLowerCase()
         String credStorageKey = getCredentialStorageKey(credentialType)
-        String credStorageValue = getCachedCredentials(credStorageKey)
+        Credentials credentials = getCachedCredentials(credStorageKey)
 
-        if (forceAskUser || credStorageValue == null) {
-            return getCredentialsFromUserAndStore(credentialType, username)
+        if (credentials == null) {
+            credentials = getCredentialsFromUserAndStore(credentialType, defaultUsername)
         }
 
-        String[] credentials = credStorageValue.split(separator)
-        username = credentials[0]
-        if (credentials.size() == 3) {
-            project.logger.info("Warning: Attempting to get credentials from store, got 3 fields")
-            username = credentials[1]
-            password = credentials[2]
-        } else if (credentials.size() == 1) {
-            password = ""
-        } else {
-            password = credentials[1]
-        }
+        return credentials
+    }
 
-        return new Credentials(username, password)
-    }
-    
     private static String getCredentialStorageKey(String credentialType) {
         "Intrepid - ${credentialType}"
     }
-    
+
     private Credentials getCredentialsFromUserAndStore(String credentialType, String currentUserName) {
         InstructionsHandler instructionsHandler = project.my.instructions.findByName(credentialType)
-        Collection<String> instructions = null
-        if (instructionsHandler != null) {
-            instructions = instructionsHandler.getInstructions()
-        }
-        Credentials userCred = CredentialsForm.getCredentialsFromUser(credentialType, instructions, currentUserName, 60 * 3)
+        final String title = "Intrepid - ${credentialType}".toString()
+        Credentials userCred =
+            CredentialsForm.getCredentialsFromUser(title, instructionsHandler?.instructions, currentUserName, 60 * 3)
         if (userCred == null) {
             println "No change to credentials '${credentialType}'."
             return null
         } else {
-            String credStoreExe = credentialStorePath
             String credStorageKey = getCredentialStorageKey(credentialType)
-            GString credStorageValue = "${userCred.userName}${separator}${userCred.password}"
-            credentialsCache[credStorageKey] = credStorageValue
-            ExecResult result = project.exec { ExecSpec spec ->
-                spec.setIgnoreExitValue true
-                spec.commandLine credStoreExe, credStorageKey, userCred.userName, userCred.password
-                spec.setStandardOutput new ByteArrayOutputStream()
-            }
-            if (result.getExitValue() != 0) {
-                println "Got exit code ${result.getExitValue()} while running ${credStoreExe} to store credentials."
-                println "Maybe you need to install the x86 CRT?"
-                throw new RuntimeException("Failed to store credentials.")
-            }
+            credentialStore.writeCredential(credStorageKey, userCred)
             println "Saved '${credentialType}' credentials for user '${userCred.userName}'."
             return userCred
         }
     }
 
+    @Override
     public String getUsername() {
-        username(defaultCredentialType)
+        username(DEFAULT_CREDENTIAL_TYPE)
     }
-    
+
+    @Override
     public String getPassword() {
-        password(defaultCredentialType)
+        password(DEFAULT_CREDENTIAL_TYPE)
     }
-    
+
+    @Override
     public String username(String credentialType) {
         getCredentials(credentialType)?.userName
     }
-    
+
+    @Override
     public String password(String credentialType) {
         getCredentials(credentialType)?.password
     }
diff -r 9b75eaff9e23 -r 48a0dd8dac1d my-credentials-plugin/src/main/groovy/holygradle/credentials/WindowsCredentialStore.groovy
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/my-credentials-plugin/src/main/groovy/holygradle/credentials/WindowsCredentialStore.groovy	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,30 @@
+package holygradle.credentials
+
+import holygradle.custom_gradle.plugin_apis.CredentialStore
+import holygradle.custom_gradle.plugin_apis.Credentials
+import holygradle.jna.platform.win32.W32Errors
+import holygradle.jna.platform.win32.Win32Exception
+import holygradle.jna.platform.win32.WinCred
+import holygradle.jna.platform.win32.WinCredUtil
+import holygradle.jna.platform.win32.WinError
+
+class WindowsCredentialStore implements CredentialStore {
+    @Override
+    public Credentials readCredential(String key) {
+        final credential
+        try {
+            credential = WinCredUtil.readCredential(key)
+        } catch (Win32Exception e) {
+            if (e.HR.intValue() == W32Errors.HRESULT_FROM_WIN32(WinError.ERROR_NOT_FOUND).intValue()) {
+                return null
+            }
+            throw e
+        }
+        return new Credentials(credential.username, credential.password)
+    }
+
+    @Override
+    public Credentials writeCredential(String key, Credentials credentials) {
+        WinCredUtil.writeCredential(key, credentials.userName, credentials.password, WinCred.CRED_PERSIST_ENTERPRISE)
+    }
+}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d my-credentials-plugin/src/main/java/holygradle/credentials/Credentials.java
--- a/my-credentials-plugin/src/main/java/holygradle/credentials/Credentials.java	Sat Jun 10 22:29:31 2017 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,35 +0,0 @@
-package holygradle.credentials;
-
-/**
- * Simple holder class for username and password.
- */
-public final class Credentials {
-    public final String userName;
-    public final String password;
-
-    public Credentials(String userName, String password) {
-        this.userName = userName;
-        this.password = password;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        Credentials that = (Credentials) o;
-
-        if (password != null ? !password.equals(that.password) : that.password != null) return false;
-        //noinspection RedundantIfStatement
-        if (userName != null ? !userName.equals(that.userName) : that.userName != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = userName != null ? userName.hashCode() : 0;
-        result = 31 * result + (password != null ? password.hashCode() : 0);
-        return result;
-    }
-}
diff -r 9b75eaff9e23 -r 48a0dd8dac1d my-credentials-plugin/src/main/java/holygradle/credentials/CredentialsForm.java
--- a/my-credentials-plugin/src/main/java/holygradle/credentials/CredentialsForm.java	Sat Jun 10 22:29:31 2017 +0100
+++ b/my-credentials-plugin/src/main/java/holygradle/credentials/CredentialsForm.java	Fri May 03 13:55:15 2019 +0100
@@ -1,5 +1,7 @@
 package holygradle.credentials;
 
+import holygradle.custom_gradle.plugin_apis.*;
+
 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.*;
diff -r 9b75eaff9e23 -r 48a0dd8dac1d readme.md
--- a/readme.md	Sat Jun 10 22:29:31 2017 +0100
+++ b/readme.md	Fri May 03 13:55:15 2019 +0100
@@ -1,9 +1,9 @@
 This repository contains the source for "The Holy Gradle", a set of [Gradle](http://www.gradle.org/)
 plugins and associated utilities for using Gradle with C++-style modules on Windows.
 
-[User documentation](http://holygradle.bitbucket.org/) generally reflects the tip of the repo but
+[User documentation](http://holygradle.bitbucket.io/) generally reflects the tip of the repo but
 may be somewhat out of date.
 
 [Developer documentation](developer-readme.md) is in this repo.
 
-The GNU GENERAL PUBLIC LICENSE applies to this software. See [license.txt](license.txt).
+The GNU GENERAL PUBLIC LICENSE applies to this software. See [license.txt](license.txt).
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d settings.gradle
--- a/settings.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,3 +1,7 @@
+rootProject.name = 'holy-gradle-plugins'
+
+rootProject.name = 'holy-gradle-plugins'
+
 include 'intrepid-plugin', 'devenv-plugin', 'custom-gradle-core-plugin', 'my-credentials-plugin', 'unit-test-plugin', 'artifactory-manager-plugin', 'stamper-plugin'
 include 'credential-store'
 include 'integration'
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d stamper-plugin/src/main/groovy/holygradle/stamper/Replacer.groovy
--- a/stamper-plugin/src/main/groovy/holygradle/stamper/Replacer.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/stamper-plugin/src/main/groovy/holygradle/stamper/Replacer.groovy	Fri May 03 13:55:15 2019 +0100
@@ -14,14 +14,17 @@
 
     private String filePattern
     private File file
+    private String charsetName
     private Collection<Pair> regexFindAndReplace = []
     
-    Replacer(String filePattern) {
+    Replacer(String filePattern, String charsetName) {
         this.filePattern = filePattern
+        this.charsetName = charsetName
     }
 
-    Replacer(File file) {
+    Replacer(File file, String charsetName) {
         this.file = file
+        this.charsetName = charsetName
     }
     
     void replaceRegex(Pattern regex, String replacementString) {
@@ -39,7 +42,7 @@
     }
     
     void doStringReplacementInFile(File file) {
-        String origRcText = file.text
+        String origRcText = file.getText(charsetName)
         String rcText = origRcText
         for (replacement in regexFindAndReplace) {
             if (replacement.replacement) {
@@ -49,7 +52,7 @@
             }
         }
         if (origRcText != rcText) {
-            file.write(rcText)
+            file.write(rcText, charsetName)
         }    
     }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d stamper-plugin/src/main/groovy/holygradle/stamper/StampingHandler.groovy
--- a/stamper-plugin/src/main/groovy/holygradle/stamper/StampingHandler.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/stamper-plugin/src/main/groovy/holygradle/stamper/StampingHandler.groovy	Fri May 03 13:55:15 2019 +0100
@@ -3,6 +3,7 @@
 import holygradle.custom_gradle.plugin_apis.StampingProvider
 import org.gradle.api.Project
 import org.gradle.util.ConfigureUtil
+import java.nio.charset.Charset
 
 class StampingHandler implements StampingProvider {
     private Project project
@@ -12,20 +13,21 @@
     public String taskDescription = "Stamp things"
     private String taskName = "stampFiles"
     private boolean runPriorToBuild = false
+    private String charsetName = Charset.defaultCharset().name()
     
     StampingHandler(Project project) {
         this.project = project
     }
 
     public Replacer files(String filePattern, Closure config) {
-        Replacer replacer = new Replacer(filePattern)
+        Replacer replacer = new Replacer(filePattern, charsetName)
         ConfigureUtil.configure(config, replacer)
         this.patternReplacers.add(replacer)
         return replacer
     }
 
     public Replacer file(String filePath, Closure config) {
-        Replacer replacer = new Replacer(new File(project.projectDir, filePath))
+        Replacer replacer = new Replacer(new File(project.projectDir, filePath), charsetName)
         ConfigureUtil.configure(config, replacer)
         this.fileReplacers.add(replacer)
         return replacer
@@ -57,4 +59,12 @@
     public void setRunPriorToBuild(boolean runPriorToBuild) {
         this.runPriorToBuild = runPriorToBuild
     }
+
+    String getCharsetName() {
+        return this.charsetName
+    }
+
+    public void setCharsetName(String charsetName) {
+        this.charsetName = charsetName
+    }
 }
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d utils/artifactory-plugins/build.gradle
--- a/utils/artifactory-plugins/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/utils/artifactory-plugins/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,8 +1,11 @@
 /**
- * Note: This project doesn't need to be built or deployed, because Artifactory loads plugins from source.  This
- * build.gradle file is just here to help IntelliJ fond all the dependencies, to get syntax highlighting correct.
+ * Note: This project doesn't need to be built to a JAR, because Artifactory loads plugins from source.  However, it
+ * does have a "deploy" task which prepares all the plugins for deployment onto the server (but doesn't actually deploy
+ * them).
+ *
+ * TODO: Put the dependencies which need to be deployed into a separate configuration (from the ones which are built in
+ * to the Artifactory WAR) and automatically copy them into the deploy folder under "plugins/lib".
  */
-
 group = "holygradle"
 
 apply plugin: "groovy"
@@ -10,12 +13,23 @@
 dependencies {
     compile localGroovy()
 
-    // These libraries can be found in // from http://repo.jfrog.org/artifactory/libs-releases/org/artifactory/artifactory-papi/
-    compile "org.slf4j:slf4j-api:1.7.5" // (also from repo1)
+    // ----------------------------------------------------------------------------------------------------------------
+    // These modules do not need to be deployed to Artifactory, because they're included in the Artifactory WAR.  They
+    // are just here to allow IntelliJ etc. to find references.
+
+    // These libraries can be found in http://repo.jfrog.org/artifactory/libs-releases/org/artifactory/artifactory-papi/
+    // (or Maven Central).
+    compile "org.slf4j:slf4j-api:1.7.5"
     compile "org.artifactory:artifactory-papi:4.7.7"
 
+    // These modules can be found on Maven Central
+    compile "javax.mail:mail:1.4.3"
+
+    // ----------------------------------------------------------------------------------------------------------------
+    // These libraries are not included as part of Artifactory, so you need to manually deploy them to the "plugins/lib"
+    // folder under the Artifactory root.
     compile "org.codehaus.groovy.modules.http-builder:http-builder:0.6"
-    compile "javax.mail:mail:1.4.3"
+    compile "xml-resolver:xml-resolver:1.2" // Included in Artifactory 4.x, but not 5.x.
 }
 
 repositories {
@@ -31,7 +45,7 @@
 }
 
 project.ext.localConfDir = "${projectDir}/localConf"
-if (!new File(localConfDir).exists()) {
+if (!new File((String)localConfDir).exists()) {
     "cmd /c mklink /j \"${localConfDir}\" \"${projectDir}\\..\\..\\local\\local-artifactory-plugins\\conf\"".execute().waitFor()
 }
 
@@ -41,7 +55,7 @@
 if (!project.hasProperty("pluginsDeployDir")) {
     project.ext.pluginsDeployDir = new File(buildDir, "deploy/artifactory-etc-plugins")
 }
-project.ext.pluginsConfDeployDir = new File(pluginsDeployDir, "conf")
+project.ext.pluginsConfDeployDir = new File((File)pluginsDeployDir, "conf")
 if (!project.hasProperty("contentDeployDir")) {
     project.ext.contentDeployDir = new File(buildDir, "deploy/webserver")
 }
@@ -66,12 +80,23 @@
     }
 }
 
-// Annoyingly, the task outputs for a Copy are the single root destinationDir, so we have to just magically know
-// what to deploy from the package dir.
-//
-// This isn't a Copy task because we expect some network cost to checking up-to-date-ness, and the set of files to copy
-// is small.
-task deploy {
+task prepareDeploy {
+    description = """
+This task collects files in the correct layout for deployment, but doesn't actually deploy them.
+
+The contents of the plugins deploy dir (by default, "deploy/artifactory-etc-plugins") should be copied into the
+"<ARTIFACTORY_ROOT>/etc/plugins" folder.
+
+The contents of the static content deploy dir (by default, "deploy/webserver") should be copied into an appropriate
+static content folder for your web server.
+"""
+
+    // Annoyingly, the task outputs for a Copy are the single root destinationDir, so we have to just magically know
+    // what to deploy from the package dir, instead of being able to declare a dependency on the packageRepositoryGraph
+    // task.
+    //
+    // This isn't a Copy task because we expect some network cost to checking up-to-date-ness, and the set of files to
+    // copy is small.
     dependsOn packageRepositoryGraph
     doLast {
         project.copy {
diff -r 9b75eaff9e23 -r 48a0dd8dac1d utils/artifactory-plugins/settings.gradle
--- a/utils/artifactory-plugins/settings.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/utils/artifactory-plugins/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -0,0 +1,1 @@
+rootProject.name = "artifactory-plugins"
\ No newline at end of file
diff -r 9b75eaff9e23 -r 48a0dd8dac1d utils/artifactory-plugins/src/main/groovy/checkCaseInsensitiveNameClash.groovy
--- a/utils/artifactory-plugins/src/main/groovy/checkCaseInsensitiveNameClash.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/utils/artifactory-plugins/src/main/groovy/checkCaseInsensitiveNameClash.groovy	Fri May 03 13:55:15 2019 +0100
@@ -1,3 +1,5 @@
+package holygradle
+
 import groovyx.net.http.HttpResponseDecorator
 import groovyx.net.http.ParserRegistry
 import groovyx.net.http.RESTClient
@@ -142,10 +144,11 @@
     // "executions" block is executed is the "bin" folder of the installation.
     private static final File ARTIFACTORY_ROOT = new File("..")
     // Read all non-empty lines for email addresses.
-    private static final List<String> ALERT_EMAIL_ADDRESSES =
-        new File(ARTIFACTORY_ROOT, "etc/plugins/conf/notificationEmails.txt").
-            readLines().
-            findAll { !it.trim().empty }
+    private static final Set<String> ALERT_EMAIL_ADDRESSES =
+        new File(ARTIFACTORY_ROOT, "etc/plugins/conf/notificationEmails.txt")
+            .readLines()
+            .findAll { !it.trim().empty }
+            .toSet()
 
     private final Logger log
     private final Security security
@@ -195,9 +198,9 @@
         log.debug("sendNotifications: security.currentUsername = ${security.currentUsername}")
         log.debug("sendNotifications: currentUserEmail = ${currentUserEmail}")
         boolean isValidCurrentUserEmail = (currentUserEmail != null && !currentUserEmail.trim().empty)
-        List<String> emailAddresses = ALERT_EMAIL_ADDRESSES
+        Set<String> emailAddresses = new HashSet<String>(ALERT_EMAIL_ADDRESSES)
         if (isValidCurrentUserEmail) {
-            emailAddresses = emailAddresses + currentUserEmail
+            emailAddresses += currentUserEmail
         }
         log.debug("sendNotifications: emailAddresses = ${emailAddresses}")
         for (email in emailAddresses) {
@@ -215,10 +218,10 @@
 def List<ItemInfo> checkSiblings(RepoPath p) {
     List<ItemInfo> siblings = repositories.getChildren(p.parent)
     List<ItemInfo> clashes = siblings.findAll {
-        log.info("    sibling " + it)
+        log.debug("    sibling " + it)
         final boolean clash = (p.path != it.repoPath.path && p.path.equalsIgnoreCase(it.repoPath.path))
         if (clash) {
-            log.info("        CLASH!")
+            log.debug("        CLASH!")
         }
         return clash
     }
@@ -228,7 +231,7 @@
 def void checkPathForCaseClashes(RepoPath repoPath, Closure asSystem) {
     List<ItemInfo> clashes = []
     for (RepoPath path = repoPath; !path.root; path = path.parent) {
-        log.info("Checking " + path)
+        log.debug("Checking " + path)
         clashes += checkSiblings(path)
     }
 
@@ -240,7 +243,7 @@
         // Send email as well as giving an error.  This is helpful because the user won't see a useful error message
         // unless the case clash is in the filename, rather than in any parent folder.
         new EmailNotifier2(log, security, asSystem).sendNotifications(
-            "Blocked deploy to case-insensitive-equal path",
+            "Blocked deploy by ${security.currentUsername} (${security.currentUser().email}) to case-insensitive-equal path",
             errorMessage
         )
 
diff -r 9b75eaff9e23 -r 48a0dd8dac1d utils/artifactory-plugins/src/main/groovy/replicationVersionCheck.groovy
--- a/utils/artifactory-plugins/src/main/groovy/replicationVersionCheck.groovy	Sat Jun 10 22:29:31 2017 +0100
+++ b/utils/artifactory-plugins/src/main/groovy/replicationVersionCheck.groovy	Fri May 03 13:55:15 2019 +0100
@@ -15,8 +15,9 @@
 import javax.mail.internet.InternetAddress
 import javax.mail.internet.MimeMessage
 /**
- * This plugin is a guard against the possibility that replication will behave incorrectly if the source and destination
- * servers are running different versions of Artifactory.
+ * This plugin is a guard against the possibility that pull replication will behave incorrectly if the source and
+ * destination servers are running different versions of Artifactory.  In email, JFrog stated that they only test
+ * pull replication from older versions to newer versions, within the same major version.
  *
  * This plugin requires the following JARs to be manually copied to the ".../plugins/lib" folder of Artifactory.  They
  * can be copied from your Gradle cache under the paths given, once you have run "gw build" for this project.  (All
@@ -315,10 +316,18 @@
         )
         def remoteVersion = remoteApi.getVersionWithRevision()
         // log.debug("Remote version is ${remoteVersion}, local version is ${localVersion}, ${description}")
-        if (versionIsGreaterThan(remoteVersion, localVersion)) {
-            final String errorMessage = "Server version mismatch during replication ${description}: " +
+
+        // JFrog don't test -- and so we fail -- if the major versions don't match, or if the source server is on a
+        // newer version than this server (the destination).
+        String errorMessage = null
+        if (remoteVersion.get(0) != localVersion.get(0)) {
+            errorMessage = "Server version mismatch during replication ${description}: " +
+                "remote = ${remoteVersion} major version part does not match local = ${localVersion}"
+        } else if (versionIsGreaterThan(remoteVersion, localVersion)) {
+            errorMessage = "Server version mismatch during replication ${description}: " +
                 "remote = ${remoteVersion} is greater than local = ${localVersion}"
-
+        }
+        if (errorMessage != null) {
             new EmailNotifier(log, security, asSystem).sendNotifications(
                 "Server version mismatch during replication",
                 errorMessage
diff -r 9b75eaff9e23 -r 48a0dd8dac1d versionInfo.gradle
--- a/versionInfo.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/versionInfo.gradle	Fri May 03 13:55:15 2019 +0100
@@ -2,12 +2,25 @@
 
 
 project.ext.writeRepoInfo = { File repoDir, OutputStream os ->
-    exec {
-        executable = "hg"
-        args = ["paths", "default"]
-        standardOutput = os
-        workingDir = repoDir
+    new ByteArrayOutputStream().withStream { OutputStream errorStream ->
+        ExecResult result = exec {
+            executable = "hg"
+            args = ["paths", "default"]
+            errorOutput = errorStream
+            workingDir = repoDir
+            ignoreExitValue = true
+        }
+        // If "hg paths default" returns 1 and outputs "not found!", that just means the folder has no default remote,
+        // which is perfectly valid for a new, never-pushed repo.
+        if (result.exitValue == 0 ||
+            (result.exitValue == 1 && errorStream.toString().replaceAll('[\\r\\n]', '') == 'not found!')
+        ) {
+            errorStream.writeTo(os)
+        } else {
+            result.assertNormalExitValue() // to throw the appropriate exception from exec
+        }
     }
+
     (new PrintStream(os)).withStream { it.print(" ") }
     exec {
         executable = "hg"
diff -r 9b75eaff9e23 -r 48a0dd8dac1d website.gradle
--- a/website.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/website.gradle	Fri May 03 13:55:15 2019 +0100
@@ -1,4 +1,4 @@
-import holygradle.buildHelpers.*
+import holygradle.buildSrc.buildHelpers.*
 
 import java.nio.file.*
 import java.util.regex.*
diff -r 9b75eaff9e23 -r 48a0dd8dac1d wrapper-starter-kit/gradlew.bat
--- a/wrapper-starter-kit/gradlew.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/wrapper-starter-kit/gradlew.bat	Fri May 03 13:55:15 2019 +0100
@@ -21,6 +21,7 @@
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
+for %%f in ("%DIRNAME:~0,-1%") do set JUSTDIRNAME=%%~nxf
 
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
 set DEFAULT_JVM_OPTS=
@@ -28,7 +29,7 @@
 SET GRADLE_DISTRIBUTION_URL=https\://services.gradle.org/distributions/
 
 @rem Allow use of Holy Gradle specific options to override system Java settings
-if defined HOLY_GRADLE_JAVA_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_HOME%
+if defined HOLY_GRADLE_JAVA_8_HOME set JAVA_HOME=%HOLY_GRADLE_JAVA_8_HOME%
 if defined HOLY_GRADLE_GRADLE_HOME set GRADLE_HOME=%HOLY_GRADLE_GRADLE_HOME%
 
 @rem Find java.exe
@@ -73,16 +74,28 @@
   if /i "%%a" == "fetchAllDependencies" set NO_DAEMON_OPTION=--no-daemon
 )
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-@rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
-@rem because the wrapper-starter-kit subproject needs to copy it from here.
-if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
-)
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
-  copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  @rem We need this file copied, even though the Holy Gradle build itself doesn't use it,
+  @rem because the wrapper-starter-kit subproject needs to copy it from here.
+  if exist "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\base-url-lookup.txt" "%~dp0gradle\wrapper\base-url-lookup.txt"
+  ) else (
+    echo ************************************************************
+    echo WARNING: No local file found for wrapper\base-url-lookup.txt
+    echo ************************************************************
+  )
+
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" (
+    copy "%~dp0local\holy-gradle-plugins\proxy-lookup.txt" "%~dp0gradle\wrapper\proxy-lookup.txt"
+  ) else (
+    echo *********************************************************
+    echo WARNING: No local file found for wrapper\proxy-lookup.txt
+    echo *********************************************************
+  )
+
 )
 
 @rem Try to find a proxy server and port based on the DNS suffix values on the local machine.
@@ -101,53 +114,10 @@
   @rem We need a do-nothing command above because a label must label a command, not a closing parenthesis.
 )
 
-@rem If we're building the Holy Gradle, we just use the standard wrapper properties,
-@rem and there will be no project-local init-scripts for us to run.
-if "%APP_HOME:~-21%"=="\holy-gradle-plugins\" (
-    goto skipWriteWrapperProperties
-)
-
 set INIT_SCRIPT_OPTS=
 FOR %%f IN ("%APP_HOME%gradle\init.d\*.gradle") DO (
     SET "INIT_SCRIPT_OPTS=!INIT_SCRIPT_OPTS! -I "%%f""
 )
-set DISTRIBUTION_ORIGINAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionPath.txt"
-
-@rem Find a local_artifacts sub-folder, in this folder or any ancestor folder.
-set LOCAL_ARTIFACTS_DIR_NAME=local_artifacts
-set LOCAL_ARTIFACTS_DIR_RELATIVE_URL=
-set LOCAL_ARTIFACTS_DIR_PATH=
-set "dir=%~f0"
-:findLocalArtifactsLoop
-  @rem Get the parent directory using ~dp trick, then strip the trailing '\'
-  for %%d in ("%dir%") do set "dir=%%~dpd"
-  set "dir=%dir:~0,-1%"
-
-  if exist "%dir%\%LOCAL_ARTIFACTS_DIR_NAME%\" (
-    set "LOCAL_ARTIFACTS_DIR_PATH=%dir%\%LOCAL_ARTIFACTS_DIR_NAME%"
-    goto :findLocalArtifactsDone
-  )
-
-  if "%dir:~-1%" == ":" (
-    goto :findLocalArtifactsDone
-  )
-
-  set "LOCAL_ARTIFACTS_DIR_RELATIVE_URL=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%"
-goto findLocalArtifactsLoop
-
-:findLocalArtifactsDone
-
-
-
-if not "x%LOCAL_ARTIFACTS_DIR_PATH%"=="x" (
-  @rem We have to use goto here, instead of an "else (...)", because Windows will try to parse the
-  @rem "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%" inside the else, and fail because the variable isn't set.
-  if exist "%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle" (
-    @rem If the wrapper folder exists inside local_artifacts folder then write wrapper properties 
-    @rem based on local_artifacts location.
-    goto writeWrapperPropertiesForLocalArtifacts
-  )
-)
 
 if "x%HOLY_GRADLE_REPOSITORY_BASE_URL%"=="x" (
 
@@ -175,54 +145,19 @@
   )
 )
 
+if "%JUSTDIRNAME%"=="holy-gradle-plugins" (
 
-if not exist "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in" (
-    echo Not generating "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" because ".in" file does not exist.
-    goto skipWriteWrapperProperties
+  @rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
+  if exist "%~dp0local\holy-gradle-plugins\certs" (
+    xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
+  ) else (
+    echo **************************************************
+    echo WARNING: No local files found for wrapper\certs\**
+    echo **************************************************
+  )
+
 )
 
-
-@rem Write the distribution base URL to a file and concat with the properties and path.
-@rem Note that this "set" trick (to echo without a newline) sets ERRORLEVEL to 1.
-if not "%HOLY_GRADLE_REPOSITORY_BASE_URL:~-1%"=="/" set HOLY_GRADLE_REPOSITORY_BASE_URL=%HOLY_GRADLE_REPOSITORY_BASE_URL%/
-<nul set /p=distributionUrl=%GRADLE_DISTRIBUTION_URL%> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_ORIGINAL_PATH_FILE%
-goto writeWrapperProperties
-
-:writeWrapperPropertiesForLocalArtifacts
-
-REM The local_artifacts folder has a custom-gradle folder, so use the distribution in there.
-set LOCAL_DISTRIBUTIONS_DIR=%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle
-set DISTRIBUTION_LOCAL_DIR_NAME=
-for /d %%D in (%LOCAL_DISTRIBUTIONS_DIR%/gradle-*-bin) do (
-    if not x!DISTRIBUTION_LOCAL_DIR_NAME!x == xx (
-        echo WARNING: Found more than one local Gradle distribution under %LOCAL_DISTRIBUTIONS_DIR%
-        dir /b %LOCAL_DISTRIBUTIONS_DIR%
-    )
-    set DISTRIBUTION_LOCAL_DIR_NAME=%%D
-)
-<nul set /p=distributionUrl=../%LOCAL_ARTIFACTS_DIR_RELATIVE_URL%local_artifacts/custom-gradle/%DISTRIBUTION_LOCAL_DIR_NAME%/> "%APP_HOME%gradle\wrapper\distributionUrlBase.txt"
-
-set DISTRIBUTION_LOCAL_PATH_FILE="%APP_HOME%gradle\wrapper\distributionLocalPath.txt"
-echo %~nx0 found "%LOCAL_ARTIFACTS_DIR_PATH%"
-echo so will generate "%APP_HOME%gradle\wrapper\gradle-wrapper.properties"
-echo from %DISTRIBUTION_LOCAL_PATH_FILE%
-echo instead of %DISTRIBUTION_ORIGINAL_PATH_FILE%.
-set /p DISTRIBUTION_PATH= <%DISTRIBUTION_ORIGINAL_PATH_FILE%
-set DISTRIBUTION_LOCAL_PATH=%DISTRIBUTION_PATH:plugins-release/holygradle/=%
-<nul set /p=%DISTRIBUTION_LOCAL_PATH%>%DISTRIBUTION_LOCAL_PATH_FILE%
-
-set DISTRIBUTION_PATH_FILE=%DISTRIBUTION_LOCAL_PATH_FILE%
-
-:writeWrapperProperties
-copy >nul /y /a "%APP_HOME%gradle\wrapper\gradle-wrapper.properties.in"+"%APP_HOME%gradle\wrapper\distributionUrlBase.txt"+%DISTRIBUTION_PATH_FILE% "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" /b
-
-:skipWriteWrapperProperties
-
-@rem This "copy" makes sure that we use the most up-to-date list when *building* the plugins.
-if exist "%~dp0local\holy-gradle-plugins\certs" (
-  xcopy /i /s /y "%~dp0local\holy-gradle-plugins\certs" "%~dp0gradle\wrapper\certs"
-)
 if not exist "%APP_HOME%gradle\wrapper\certs" goto certsDone
 @rem Find keytool.exe from java.exe.
 
@@ -274,12 +209,16 @@
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+:executeGradle
 @rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS%
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% %HOLY_GRADLE_PROXY_OPTS% %TRUST_STORE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS% %NO_DAEMON_OPTION% %INIT_SCRIPT_OPTS% %HOLY_GRADLE_OPTS%
 
 :end
 @rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="123456" goto execute
+if exist .restart (
+    del .restart
+    goto executeGradle
+)
 if "%ERRORLEVEL%"=="0" goto mainEnd
 
 :fail
diff -r 9b75eaff9e23 -r 48a0dd8dac1d wrapper-starter-kit/gw.bat
--- a/wrapper-starter-kit/gw.bat	Sat Jun 10 22:29:31 2017 +0100
+++ b/wrapper-starter-kit/gw.bat	Fri May 03 13:55:15 2019 +0100
@@ -1,2 +1,1 @@
-@echo 'gw.bat' is deprecated and will be removed in future; use 'gradlew.bat' instead.
 %~dp0gradlew.bat %*
diff -r 9b75eaff9e23 -r 48a0dd8dac1d wrapper-starter-kit/newWrapper/build.gradle
--- a/wrapper-starter-kit/newWrapper/build.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/wrapper-starter-kit/newWrapper/build.gradle	Fri May 03 13:55:15 2019 +0100
@@ -29,8 +29,10 @@
     )
 }
 
-task clean.doLast {
-    delete "gradlew", "gradlew.bat", "gw.bat", "gradle"
+task clean {
+    doLast {
+        delete "gradlew", "gradlew.bat", "gw.bat", "gradle"
+    }
 }
 
 createWrapper.dependsOn clean
diff -r 9b75eaff9e23 -r 48a0dd8dac1d wrapper-starter-kit/settings.gradle
--- a/wrapper-starter-kit/settings.gradle	Sat Jun 10 22:29:31 2017 +0100
+++ b/wrapper-starter-kit/settings.gradle	Fri May 03 13:55:15 2019 +0100
@@ -5,6 +5,6 @@
 File propertiesFile = new File(rootProject.projectDir, "gradle.properties")
 if (!propertiesFile.exists()) {
     Path link = propertiesFile.toPath()
-    Path target = Paths.get("..", "gradle.properties")
+    Path target = Paths.get(rootProject.projectDir.parent, "gradle.properties")
     Files.createLink(link, target)
 }
