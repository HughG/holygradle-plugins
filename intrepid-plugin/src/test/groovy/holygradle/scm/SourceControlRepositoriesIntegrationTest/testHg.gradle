buildscript {
    gplugins.use "intrepid:${System.getProperty("holygradle.versionForIntegrationTest")}"

    // Pull in JUnit so we can use org.junit.Assert
    dependencies {
        classpath "junit:junit:4.8.+"
    }
}
gplugins.apply()

import holygradle.scm.HgRepository
import holygradle.scm.SourceControlRepository

import static org.junit.Assert.*

apply from: "hgExec.gradle"

final String EXAMPLE_FILE = "ahoy.txt"

////////////////////////////////////////////////////////////////////////////////
// Set up this project as a Mercurial repo
//
// We need to do this in a separate Gradle run, because the "sourceControl" project extension is set
// up when the intrepid plugin is initialised.  It wouldn't be created/changed if we made the
// project folder into a repo during the same build where we're trying to run the test.

task setupRepo << {
    // Make the project dir into a repo.
    hgExec(project, "init")

    // Add a file.
    (new File(project.projectDir, EXAMPLE_FILE)).text = "ahoy"
    hgExec(project, "add", EXAMPLE_FILE)
    // Set the commit message, user, and date, so that the hash will be the same every time.
    hgExec(project,
           "commit",
           "-m", "Added another file.",
           "-u", "TestUser",
           "-d", "2000-01-01"
    )
}

////////////////////////////////////////////////////////////////////////////////
// Now do the tests.

task runTest << {

    def sourceControl = project.extensions.findByName("sourceControl") as SourceControlRepository

    assertTrue("An HgRepository instance has been created for the project", sourceControl instanceof HgRepository)

    assertEquals(
        "First commit hash is as expected",
        "30c86257cd03bde0acb2e22f91512e589df605e9",
        sourceControl.getRevision()
    )
    assertFalse("Initially there are no local changes", sourceControl.hasLocalChanges())
    assertEquals("The master repo is 'unknown'", "unknown", sourceControl.getUrl())
    assertEquals(
        "The SourceControlRepository reports its protocol correctly",
        "hg",
        sourceControl.getProtocol()
    )
    assertEquals(
        "The SourceControlRepository reports its directory correctly",
        project.projectDir.getCanonicalFile(),
        sourceControl.getLocalDir()
    )

    new File(project.projectDir, EXAMPLE_FILE as String).withPrintWriter {
        PrintWriter w -> w.println("two")
    }

    assertTrue("Local changes are detected correctly", sourceControl.hasLocalChanges())

}

[setupRepo, runTest].each { it.dependsOn setupHgExec }
