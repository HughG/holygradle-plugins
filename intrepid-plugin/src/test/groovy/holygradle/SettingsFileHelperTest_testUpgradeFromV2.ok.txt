/*
    Code before special section.
*/

// holygradle source dependencies V90f964dd819aba9ac979eb7585873a83 BEGIN
// Do not edit this section.  It may be replaced by the holygradle plugins automatically.
// When the Holy Gradle adds or modifies this section, you should commit this file to source control.
final String settingsFileName = startParameter.settingsFile?.name ?: Settings.DEFAULT_SETTINGS_FILE
final String subprojectsFileName = settingsFileName.replaceAll(/\.[^\.]+$/, "-subprojects.txt")
final File subprojectsFile = new File(settingsDir, subprojectsFileName)
final List<String> subprojectPaths = !subprojectsFile.exists() ? [] : subprojectsFile.readLines().findAll {
    !it.startsWith('#') && !it.trim().isEmpty()
}
subprojectPaths.each { include it }
Collection<ProjectDescriptor> collectProjects(Collection<ProjectDescriptor> projects) {
    projects + projects.collectMany { collectProjects(it.children) }
}
Collection<String> getBuildFiles(ProjectDescriptor proj) {
    [proj.name, 'build'].collect { new File(proj.projectDir, "${it}.gradle") }.findAll { it.exists() }
}
collectProjects([rootProject]).findAll { !getBuildFiles(it).any() }.each {
    println("No Gradle build file found for subproject ${it.name} in ${it.projectDir}; excluding from build.")
    it.parent.children.remove(it)
}
// This block does two things for sub-projects in a multi-project build.
//   1) Allows them to lie outside the root project's folder (by removing relative paths from the start of the name).
//   2) Allows them to have their build files named to match the directory.
collectProjects([rootProject]).each { ProjectDescriptor proj ->
    Collection<File> buildFiles = getBuildFiles(proj)
    switch (buildFiles.size()) {
        case 0:
            throw new RuntimeException("Internal error: project ${proj} has no build files, so it should have been removed!")
        case 1:
            proj.buildFileName = buildFiles[0].name
            break;
        case 2:
            throw new RuntimeException("Project ${proj} has '${proj.name}.gradle' AND 'build.gradle'. You should only have one of these.")
        default:
            throw new RuntimeException("Internal error: project ${proj} has more than 2 build files! ${buildFiles}.")
    }
}
// holygradle source dependencies V90f964dd819aba9ac979eb7585873a83 END

/*
    Code after special section.
*/
