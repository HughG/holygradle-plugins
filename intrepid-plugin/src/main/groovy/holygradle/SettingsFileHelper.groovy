package holygradle

import holygradle.source_dependencies.SourceDependencyHandler
import org.apache.commons.codec.digest.DigestUtils
import org.gradle.api.Project

class SettingsFileHelper {
    private static class SettingsContent {
        private static final String SECTION_MARKER = '// holygradle source dependencies V'
        private static final String BEGIN_PATTERN = "${SECTION_MARKER}[0-9a-f]+ BEGIN"
        private static final String END_PATTERN = "${SECTION_MARKER}[0-9a-f]+ END"
        private static final String SETTINGS_FILE_METHOD_1_MARKER =
            '// This allows subprojects to name the gradle script the same as the directory'

        public static String getBeginPattern() { BEGIN_PATTERN }
        public static String getEndPattern() { END_PATTERN }
        public static String getMethod1Marker() { SETTINGS_FILE_METHOD_1_MARKER }

        public static String getContent() {
            String baseContent = IntrepidPlugin.class.getResourceAsStream("/holygradle/settings-content.gradle").
                getText("UTF-8")
            String md5 = DigestUtils.md5Hex(baseContent)
            return """${SECTION_MARKER}${md5} BEGIN
${baseContent}
${SECTION_MARKER}${md5} END"""
        }
    }

    // We don't just use a fixed filename because we need it to be different for tests.
    public static File getSettingsSubprojectsFile(File settingsFile) {
        return new File(
            settingsFile.parentFile,
            settingsFile.name.replaceAll(/\.[^\.]+$/, "-subprojects.txt")
        )
    }

    // Convert backslashes to slashes, then strip any trailing slash.
    private static Collection<String> getNormalisedIncludeFilePaths(Collection<String> includeFilePaths) {
        return includeFilePaths.collect {
            it.replaceAll(/[\\\/]+/, '/').replaceAll(/\/$/, '')
        }
    }

    public static Collection<String> writeSettingsFile(File settingsFile, Collection<String> includeFilePaths) {
        return writeSettingsFile(settingsFile, getSettingsSubprojectsFile(settingsFile), includeFilePaths)
    }

    public static Collection<String> writeSettingsFile(
        File settingsFile,
        File settingsSubprojectsFile,
        Collection<String> includeFilePaths
    ) {
        includeFilePaths = getNormalisedIncludeFilePaths(includeFilePaths)
        settingsSubprojectsFile.withPrintWriter { w ->
            includeFilePaths.each {
                w.println(it)
            }
        }

        // The settings file is always going to be relatively small, so it's okay to handle all the lines in memory.
        if (settingsFile.exists()) {
            final List<String> lines = settingsFile.readLines()
            if (lines.find { it.contains(SettingsContent.method1Marker) }) {
                // The settings file was auto-generated by older versions of the Holy Gradle, so delete it and replace
                // It with the current version.  (There was no specific marker for that code, so we just match some
                // text which it happens to have always included.)
                if (!settingsFile.delete()) {
                    throw new RuntimeException("Failed to delete existing settings.gradle file.")
                }
                appendSettingsFileContent(settingsFile)
            } else {
                // The settings file exists and doesn't contain the older style of holygradle code.  So, it might
                // or might not contain the new style.  If it does, then we copy all lines before and after the
                // BEGIN/END markers, and add the new lines (with markers) at the same position as the original.
                // If it doesn't, we'll append the current version of the code.
                if (!replaceSettingsFileContent(settingsFile, lines)) {
                    // The settings file didn't contain any version of the holygradle code, so add current version.
                    appendSettingsFileContent(settingsFile)
                }
            }
        } else {
            // The settings file doesn't exist, so create it with the current version of the holygradle code.
            appendSettingsFileContent(settingsFile)
        }

        return includeFilePaths
    }

    private static void appendSettingsFileContent(File settingsFile) {
        settingsFile.withWriterAppend { BufferedWriter bw ->
            bw.withPrintWriter { PrintWriter w ->
                /*
                 * This intentionally starts with a blank line, in case the file didn't end with a line ending.
                 * In that case, this text would be appended at the end of that line, so the start would not be
                 * recognised on later runs, and so it would keep being appended on later runs.
                 */
                w.println()
                // We pull the lines out of the string and write them individually to be sure we get platform-specific
                // line endings right.
                for (String line in SettingsContent.content.readLines()) {
                    w.println(line)
                }
            }
        }
    }

    private static boolean replaceSettingsFileContent(File settingsFile, List<String> lines) {
        final List<String> newLines = new ArrayList(lines.size() * 2) // extra capacity in case new version is larger
        boolean replaced = false
        boolean replacing = false
        for (String line in lines) {
            if (!replacing) {
                if (line ==~ SettingsContent.beginPattern) {
                    // Start replacing, including this line.
                    replacing = true
                } else {
                    // Copy this line to the new settings file.
                    newLines << line
                }
            } else { // we are replacing this section
                if (line ==~ SettingsContent.endPattern) {
                    // Insert the new content, and stop skipping.
                    newLines.addAll(SettingsContent.content.readLines())
                    replacing = false
                    replaced = true
                } else {
                    // Don't copy this line to the new settings file, because we're replacing it.
                }
            }
        }
        // If we actually replaced some lines, re-write the settings file (from scratch -- not "append").
        if (replaced) {
            settingsFile.withPrintWriter { PrintWriter w ->
                for (String line in newLines) {
                    w.println(line)
                }
            }
        }
        return replaced
    }

    // Returns true if the settings have changed.
    public static boolean writeSettingsFileAndDetectChange(File settingsFile, Collection<String> includeFilePaths) {
        List<String> previousIncludeFilePaths = []

        File settingsSubprojectsFile = getSettingsSubprojectsFile(settingsFile)
        if (settingsSubprojectsFile.exists()) {
            previousIncludeFilePaths = settingsSubprojectsFile.readLines()
        }

        // We write the settings file even if we have an empty list of includeFilePaths, because the user might have
        // removed all sourceDependencies, as compared to the previous run.
        List<String> newIncludeFilePaths = writeSettingsFile(settingsFile, settingsSubprojectsFile, includeFilePaths)

        Collections.sort(previousIncludeFilePaths)
        Collections.sort(newIncludeFilePaths)

        return newIncludeFilePaths != previousIncludeFilePaths
    }
    
    // Returns true if the settings have changed.
    public static boolean writeSettingsFileAndDetectChange(Project project) {
        File settingsFile = new File(project.projectDir, "settings.gradle")
        Collection<SourceDependencyHandler> transitiveSubprojects = Helper.getTransitiveSourceDependencies(project)
        Collection<String> newIncludes = transitiveSubprojects.collect {
            Helper.relativizePath(it.getDestinationDir(), project.rootProject.projectDir)
        }
        writeSettingsFileAndDetectChange(settingsFile, newIncludes.unique())
    }
}