import java.util.regex.Pattern
import java.util.regex.Matcher

import holygradle.process.ExecHelper

public File getCommonToolsPathFromVSWhere(String vswhereLocation) {
    Pattern versionPattern = Pattern.compile("VS([0-9]+)", Pattern.CASE_INSENSITIVE)
    Matcher versionMatcher = versionPattern.matcher(chosenDevEnvVersion)

    if (versionMatcher.find()) {
        Integer devEnvVersion = Integer.parseInt(versionMatcher.group(1))
        String majorVersionNumber = (devEnvVersion / 10).toString()
        String fullVersionNumber = majorVersionNumber + ".0"
        String nextFullVersionNumber = majorVersionNumber + '.1'

        String installPath = ExecHelper.executeAndReturnResultAsString(
            project.logger,
            project.&exec,
            { ExecSpec spec ->
                spec.commandLine vswhereLocation,
                                 "-property", "installationPath",
                                 "-legacy",
                                 "-format", "value",
                                 "-version", "[${fullVersionNumber},${nextFullVersionNumber})"
            },
            { return true }
        )
        return new File(installPath, "Common7/Tools")
    } else {
        throw new RuntimeException("Failed to parse DevEnv version '${chosenDevEnvVersion}'")
    }
}

public File getCommonToolsPathFromEnvironment() {
    String envVarComnTools = System.getenv("${chosenDevEnvVersion}COMNTOOLS")
    if (envVarComnTools == null || envVarComnTools == "") {
        throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
    }
    return new File(envVarComnTools)
}

public File getCommonToolsPath() {
    // Check for the existence of vswhere.exe
    final String vswhereLocation = ["ProgramFiles", "ProgramFiles(x86)"] // look at 64-bit then 32-bit environment variables
        .findResults { System.getenv(it) } // collect all non-null environment variable values
        .collect { "${it}\\Microsoft Visual Studio\\Installer\\vswhere.exe" } // map to filenames
        .find { new File(it).exists() } // return the first filename for which a file exists

    if (vswhereLocation != null) {
        return getCommonToolsPathFromVSWhere(vswhereLocation)
    } else {
        return getCommonToolsPathFromEnvironment()
    }
}

public File getDevEnvPath() {
    File commonToolsPath = getCommonToolsPath()
    File devEnvPath = new File(commonToolsPath, "../IDE/devenv.com")
    if (!devEnvPath.exists()) {
        throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
    }
    return devEnvPath
}

String releaseVersionInfoFileName = 'release_version_info.h'
task createReleaseVersionFile {
    inputs.files rootProject.setPublishVersion.outputs.files
    File versionFile = new File(projectDir, releaseVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        versionFile.withWriter { BufferedWriter writer ->
            final String version = project.version
            boolean isSnapshot = version.endsWith("SNAPSHOT-0")
            String ver = isSnapshot ? "0.0.0.0" : version
            String commaVer = isSnapshot ? "0,0,0,0" : version.replaceAll('\\.', ',')
            writer.writeLine "#define RELEASE_VERSION \"${ver}\""
            writer.writeLine "#define RELEASE_VERSION_WITH_COMMAS ${commaVer}"
        }
    }
}

String projectVersionInfoFileName = 'project_version_info.h'
task createProjectVersionFile {
    inputs.files rootProject.setHgVersionInfo.outputs.files
    File versionFile = new File(projectDir, projectVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        String ver = (project.hgVersion.endsWith('+') ? "uncommitted code" : project.rootProject.hgVersionInfo)
        versionFile.withWriter { BufferedWriter writer ->
            writer.writeLine "#define PROJECT_VERSION \"${ver}\""
        }
    }
}

final File CREDENTIAL_STORE_EXE = project.file("Release/credential-store.exe")

task("build", type: Exec) { Exec t ->
    t.inputs.files createReleaseVersionFile.outputs.files
    t.inputs.files createProjectVersionFile.outputs.files

    t.inputs.files(project.fileTree(projectDir) {
        include "credential-store.*"
        include "*.h"
        include "*.cpp"
    })
    t.outputs.file(CREDENTIAL_STORE_EXE)

    t.workingDir project.projectDir.path
    t.commandLine getDevEnvPath().path, "credential-store.sln", "/build", "Release^|Win32"
}

// Make sure we build before we publish.
project.publishTasks.each { Upload it ->
    it.dependsOn build
}
// The publish-locally task for this project has slightly different input dependencies from the
// Groovy plugins.
project.tasks["publishPluginsLocally"].inputs.files(project.tasks["build"].outputs.files)

artifacts {
    it."default" CREDENTIAL_STORE_EXE
}
