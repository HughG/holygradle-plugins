public File getDevEnvPath() {
    String envVarComnTools = System.getenv("VS100COMNTOOLS")
    if (envVarComnTools == null || envVarComnTools == "") {
        throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
    }
    File comnToolsPath = new File(envVarComnTools)
    File devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
    if (!devEnvPath.exists()) {
        throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
    }
    devEnvPath
}

String releaseVersionInfoFileName = 'release_version_info.h'
task createReleaseVersionFile {
    (new File(projectDir, releaseVersionInfoFileName)).withWriter { BufferedWriter writer ->
        String ver = (project.version == "unspecified") ? "0.0.0.0" : project.version
        String commaVer = (project.version == "unspecified") ? "0,0,0,0" : project.version.replaceAll('\\.', ',')
        writer.writeLine "#define RELEASE_VERSION \"${ver}\""
        writer.writeLine "#define RELEASE_VERSION_WITH_COMMAS ${commaVer}"
    }
}

String projectVersionInfoFileName = 'project_version_info.h'
task createProjectVersionFile {
    (new File(projectDir, projectVersionInfoFileName)).withWriter { BufferedWriter writer ->
        writer.writeLine "#define PROJECT_VERSION \"${project.rootProject.hgVersionInfo}\""
    }
}

final File CREDENTIAL_STORE_EXE = project.file("Release/credential-store.exe")

task("build", type: Exec) { Exec t ->
    t.dependsOn createReleaseVersionFile, createProjectVersionFile

    t.inputs.files(project.fileTree(projectDir) {
        include "credential-store.*"
        include "*.h"
        include "*.cpp"
    })
    t.outputs.file(CREDENTIAL_STORE_EXE)

    t.workingDir project.projectDir.path
    t.commandLine getDevEnvPath().path, "credential-store.sln", "/build", "Release^|Win32"
}

// Make sure we build before we publish.
project.publishTasks.each { Upload it ->
    it.dependsOn build
}
// The publish-locally task for this project has slightly different input dependencies from the Groovy plugins.
project.tasks["publishPluginsLocally"].inputs.files(project.tasks["build"].outputs.files)

artifacts {
    it."default" CREDENTIAL_STORE_EXE
}
