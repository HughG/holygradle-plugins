public File getDevEnvPath() {
    if (!project.hasProperty('chosenDevEnvVersion')) {
        throw new RuntimeException(
            'Cannot configure ${project.name} to build because property chosenDevEnvVersion is not set. ' +
            'The value should be something like "VS120".'
        )
    }
    String envVarComnTools = System.getenv("${chosenDevEnvVersion}COMNTOOLS")
    if (envVarComnTools == null || envVarComnTools == "") {
        throw new RuntimeException("'chosenDevEnvVersion' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
    }
    File comnToolsPath = new File(envVarComnTools)
    File devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
    if (!devEnvPath.exists()) {
        throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
    }
    devEnvPath
}

String releaseVersionInfoFileName = 'release_version_info.h'
task createReleaseVersionFile {
    inputs.files rootProject.setPublishVersion.outputs.files
    File versionFile = new File(projectDir, releaseVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        versionFile.withWriter { BufferedWriter writer ->
            final String version = project.version
            boolean isSnapshot = version.endsWith("SNAPSHOT-0")
            String ver = isSnapshot ? "0.0.0.0" : version
            String commaVer = isSnapshot ? "0,0,0,0" : version.replaceAll('\\.', ',')
            writer.writeLine "#define RELEASE_VERSION \"${ver}\""
            writer.writeLine "#define RELEASE_VERSION_WITH_COMMAS ${commaVer}"
        }
    }
}

String projectVersionInfoFileName = 'project_version_info.h'
task createProjectVersionFile {
    inputs.files rootProject.setHgVersionInfo.outputs.files
    File versionFile = new File(projectDir, projectVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        String ver = (project.hgVersion.endsWith('+') ? "uncommitted code" : project.rootProject.hgVersionInfo)
        versionFile.withWriter { BufferedWriter writer ->
            writer.writeLine "#define PROJECT_VERSION \"${ver}\""
        }
    }
}

final File CREDENTIAL_STORE_EXE = project.file("Release/credential-store.exe")

task("build", type: Exec) { Exec t ->
    t.inputs.files createReleaseVersionFile.outputs.files
    t.inputs.files createProjectVersionFile.outputs.files

    t.inputs.files(project.fileTree(projectDir) {
        include "credential-store.*"
        include "*.h"
        include "*.cpp"
    })
    t.outputs.file(CREDENTIAL_STORE_EXE)

    t.workingDir project.projectDir.path
    t.commandLine getDevEnvPath().path, "credential-store.sln", "/build", "Release^|Win32"
}

// Make sure we build before we publish.
project.publishTasks.each { Upload it ->
    it.dependsOn build
}
// The publish-locally task for this project has slightly different input dependencies from the
// Groovy plugins.
project.tasks["publishPluginsLocally"].inputs.files(project.tasks["build"].outputs.files)

artifacts {
    "default" CREDENTIAL_STORE_EXE
}
