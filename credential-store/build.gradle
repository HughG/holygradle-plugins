import java.util.regex.Pattern
import java.util.regex.Matcher


import java.io.BufferedReader

import org.gradle.process.ExecSpec
import holygradle.process.ExecHelper

public File getDevEnvPathFromvswhere(String vswhereLocation, String chosenDevEnvVersion) {

    String devEnvLocationPropertyName = "holygradleDevEnv" +chosenDevEnvVersion+"Location";
    
    Pattern versionPattern = Pattern.compile("VS([0-9]+)", Pattern.CASE_INSENSITIVE);
    Matcher versionMatcher = versionPattern.matcher(chosenDevEnvVersion);
    
    if (versionMatcher.find()){
        Integer devEnvVersion = Integer.parseInt(versionMatcher.group(1))
        String decimalVersionNumber = (devEnvVersion/10).toString()
        String nextDecimalVersionNumber = ((devEnvVersion/10)+0.1).toString()
        
         String installPath = ExecHelper.executeAndReturnResultAsString(
            project.logger,
            project.&exec,
            { ExecSpec spec ->
                spec.commandLine vswhereLocation, "-property","installationPath","-legacy","-format","value","-version","[${decimalVersionNumber},${nextDecimalVersionNumber})"
            },
            { return true }
        )
        File devEnvPath = new File(installPath, "/Common7/IDE/devenv.com");
        
        if (!devEnvPath.exists()) {
            throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
        }
        devEnvPath
        
    } else {
        throw new RuntimeException("Failed to parse DevEnv version '${chosenDevEnvVersion}'")
        
    }
        
}

public File getDevEnvPathFromRegistry(String chosenDevEnvVersion) {
    String envVarComnTools = System.getenv("${chosenDevEnvVersion}COMNTOOLS")
    if (envVarComnTools == null || envVarComnTools == "") {
        throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
    }
    File comnToolsPath = new File(envVarComnTools)
    File devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
    if (!devEnvPath.exists()) {
        throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
    }
    devEnvPath
    
}

public File getDevEnvPath() {
    String devEnvVersion = "VS120"
    // Check for the existence of vswhere.exe
    String vswhereLocation = null;
    String programFiles = System.getenv("ProgramFiles(x86)");
    String programFiles32 = System.getenv("ProgramFiles"); //  Location of vswhere.exe on 32 bit OS's before windows 10.
    if (programFiles != null &&
        new File("${programFiles}\\Microsoft Visual Studio\\Installer\\vswhere.exe").exists()) {
            vswhereLocation = "${programFiles}\\Microsoft Visual Studio\\Installer\\vswhere.exe";   
    } else if (programFiles32 != null && 
        new File("${programFiles32}\\Microsoft Visual Studio\\Installer\\vswhere.exe").exists()) {
            vswhereLocation = "${programFiles32}\\Microsoft Visual Studio\\Installer\\vswhere.exe";
    }
    
    if (vswhereLocation != null){
        getDevEnvPathFromvswhere(vswhereLocation,devEnvVersion);
    } else {
        getDevEnvPathFromRegistry(devEnvVersion);
    }
}

String releaseVersionInfoFileName = 'release_version_info.h'
task createReleaseVersionFile {
    inputs.files rootProject.setPublishVersion.outputs.files
    File versionFile = new File(projectDir, releaseVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        versionFile.withWriter { BufferedWriter writer ->
            String username = System.getProperty("user.name").toLowerCase()
            boolean isSnapshot = (project.version == "${username}-SNAPSHOT")
            String ver = isSnapshot ? "0.0.0.0" : project.version
            String commaVer = isSnapshot ? "0,0,0,0" : project.version.replaceAll('\\.', ',')
            writer.writeLine "#define RELEASE_VERSION \"${ver}\""
            writer.writeLine "#define RELEASE_VERSION_WITH_COMMAS ${commaVer}"
        }
    }
}

String projectVersionInfoFileName = 'project_version_info.h'
task createProjectVersionFile {
    inputs.files rootProject.setHgVersionInfo.outputs.files
    File versionFile = new File(projectDir, projectVersionInfoFileName)
    outputs.file(versionFile)
    doLast {
        String ver = (project.hgVersion.endsWith('+') ? "uncommitted code" : project.rootProject.hgVersionInfo)
        versionFile.withWriter { BufferedWriter writer ->
            writer.writeLine "#define PROJECT_VERSION \"${ver}\""
        }
    }
}

final File CREDENTIAL_STORE_EXE = project.file("Release/credential-store.exe")

task("build", type: Exec) { Exec t ->
    t.inputs.files createReleaseVersionFile.outputs.files
    t.inputs.files createProjectVersionFile.outputs.files

    t.inputs.files(project.fileTree(projectDir) {
        include "credential-store.*"
        include "*.h"
        include "*.cpp"
    })
    t.outputs.file(CREDENTIAL_STORE_EXE)

    t.workingDir project.projectDir.path
    t.commandLine getDevEnvPath().path, "credential-store.sln", "/build", "Release^|Win32"
}

// Make sure we build before we publish.
project.publishTasks.each { Upload it ->
    it.dependsOn build
}
// The publish-locally task for this project has slightly different input dependencies from the
// Groovy plugins.
project.tasks["publishPluginsLocally"].inputs.files(project.tasks["build"].outputs.files)

artifacts {
    it."default" CREDENTIAL_STORE_EXE
}
