public File getDevEnvPath() {
    def envVarComnTools = System.getenv("VS100COMNTOOLS")
    if (envVarComnTools == null || envVarComnTools == "") {
        throw new RuntimeException("'version' was set to '${chosenDevEnvVersion}' but the environment variable '${chosenDevEnvVersion}COMNTOOLS' was null or empty.")
    }
    def comnToolsPath = new File(envVarComnTools)
    def devEnvPath = new File(comnToolsPath, "../IDE/devenv.com")
    if (!devEnvPath.exists()) {
        throw new RuntimeException("DevEnv could not be found at '${devEnvPath}'.")
    }
    devEnvPath
}

def releaseVersionInfoFileName = 'release_version_info.h'
task createReleaseVersionFile {
    (new File(projectDir, releaseVersionInfoFileName)).withWriter { BufferedWriter writer ->
        String ver = (project.version == "unspecified") ? "0.0.0.0" : project.version
        String commaVer = (project.version == "unspecified") ? "0,0,0,0" : project.version.replaceAll('\\.', ',')
        writer.writeLine "#define RELEASE_VERSION \"${ver}\""
        writer.writeLine "#define RELEASE_VERSION_WITH_COMMAS ${commaVer}"
    }
}

def projectVersionInfoFileName = 'project_version_info.h'
task createProjectVersionFile {
    (new File(projectDir, projectVersionInfoFileName)).withWriter { BufferedWriter writer ->
        writer.writeLine "#define PROJECT_VERSION \"${project.rootProject.hgVersionInfo}\""
    }
}

task("build", type: Exec) {
    dependsOn createReleaseVersionFile, createProjectVersionFile

    workingDir project.projectDir.path
    commandLine getDevEnvPath().path, "credential-store.sln", "/build", "Release^|Win32"
}

publishSnapshot.dependsOn build
publishRelease.dependsOn build

artifacts {
    it."default" file("Release/credential-store.exe")
}
